<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>d12frosted</title>
    <link href="https://d12frosted.io/atom.xml" rel="self" />
    <link href="https://d12frosted.io" />
    <id>https://d12frosted.io/atom.xml</id>
    <author>
        <name>Boris Buliga</name>
        <email>boris@d12frosted.io</email>
    </author>
    <updated>2021-06-11T00:00:00Z</updated>
    <entry>
    <title>Path to org-roam v2</title>
    <link href="https://d12frosted.io/posts/2021-06-11-path-to-org-roam-v2.html" />
    <id>https://d12frosted.io/posts/2021-06-11-path-to-org-roam-v2.html</id>
    <published>2021-06-11T00:00:00Z</published>
    <updated>2021-06-11T00:00:00Z</updated>
    <summary type="html"><![CDATA[<!doctype html>
<html lang="en">
  <head>
    <title>Path to org-roam v2</title>
    <link rel="stylesheet" href="../css/post-bundle.css" />
    <meta charset="utf-8">
<meta http-equiv="x-ua-compatible" content="ie=edge">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="keywords" content="blog,programming,Haskell,Emacs,fish,bash">
<meta property="og:title" content="Boris Buliga">
<meta property="og:locale" content="es_US">
<meta property="og:url" content="https://d12frosted.io">

<link rel="apple-touch-icon" sizes="180x180" href="../apple-touch-icon.png">
<link rel="icon" type="image/png" sizes="32x32" href="../favicon-32x32.png">
<link rel="icon" type="image/png" sizes="16x16" href="../favicon-16x16.png">
<link rel="manifest" href="../site.webmanifest">

<link href="https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css" rel="stylesheet">
<script>
  MathJax = {
    svg: {
      fontCache: 'global'
    }
  };
</script>
<script type="text/javascript" id="MathJax-script" async src="../library/mathjax/es5/tex-svg.js">
</script>
<script src="../library/chart.js/dist/Chart.min.js"></script>
<script data-goatcounter="https://d12frosted.goatcounter.com/count" async src="//gc.zgo.at/count.js"></script>

    <meta name="description" content="Migration process to org-roam v2" />
    <meta name="twitter:card" content="summary">
    <meta name="twitter:description" content="Migration process to org-roam v2">
    <meta property="og:description" content="Migration process to org-roam v2">
  </head>
  <body>
    <header>
      <nav>
  <ul>
    <li><a class="fa fa-home" href="../" title="Home">&nbsp Home</a></li>
    <li><a class="fa fa-suitcase" href="../projects.html" title="Projects">&nbsp Projects</a></li>
    <li><a class="fa fa-rss" href="../atom.xml" title="RSS">&nbsp RSS</a></li>
    <li><a class="fa fa-github" href="https://github.com/d12frosted" title="GitHub profile">&nbsp GitHub</a></li>
  </ul>
</nav>

    </header>

    <h1 class="post-title">Path to org-roam v2</h1>
    <div class="date"><span>June 11, 2021</span></div>
    <div class="tags"><span>(<a title="All pages tagged 'emacs'." href="../tags/emacs.html">emacs</a>, <a title="All pages tagged 'org-roam'." href="../tags/org-roam.html">org-roam</a>)</span></div>
    <article>
      <section>
        <div class="image-container-half post-image-split">
<img src="../images/org-roam-logo.png" /><img src="../images/vulpea-logo.png" />
</div>

<p>In my opinion, <a href="https://github.com/org-roam/org-roam/">org-roam</a> is among the best things that happened to Emacs during the last 5 years. Forget Zettelkasten method, <code class="verbatim">org-roam</code> is a solution for non-hierarchical note-taking regardless of methodology you are worshiping. The most important and appealing feature of <code class="verbatim">org-roam</code> is its database! Just imagine, in less than a second I can filter a collection of 10000+ notes by tags, title, aliases, links and other things. This is what made my <a href="https://github.com/d12frosted/vino">wine tracking</a> solution usable with ever growing collection of tasting notes, and this is what I used to build various tools for presenting non-trivial views around my notes (<a href="https://github.com/d12frosted/environment/blob/master/emacs/README.org#managing-litnotes">example of a public one</a>).</p>
<p>And now <code class="verbatim">org-roam</code> has <a href="https://github.com/org-roam/org-roam/releases/tag/v2.0.0">released</a> <code class="verbatim">V2</code>, the first major redesign affecting both users and authors of libraries extending <code class="verbatim">org-roam</code>. And while there are breaking changes requiring some effort from users, <code class="verbatim">V2</code> is so amazing and is so much more stable than <code class="verbatim">V1</code>, that my advice is to drop the chains of old <code class="verbatim">org-roam</code> and embrace all the goodness <code class="verbatim">V2</code> brings.</p>
<p>Unfortunately, major redesign means lots of breaking changes and in this post I am going to describe my migration experience, code I used to migrate my notes and share some thoughts after migrating a code base comparable to <code class="verbatim">org-roam</code> itself. Of course, it touches my precious <a href="https://github.com/d12frosted/vulpea">vulpea</a> library (the fox image is its icon), so expect some advertisement™.</p>
<p>NB. Migration process means adapting to and overcoming breaking changes. Since <code class="verbatim">V2</code> is full of them, this article might look pessimistic or depressing. But don’t get fooled, I think that <code class="verbatim">V2</code> is amazing. I am very happy to use it on a daily basis for several months and I never looked back. <a href="https://github.com/jethrokuan">Jethro</a> is doing amazing work! As well as all <a href="https://github.com/org-roam/org-roam/graphs/contributors">contributors</a> (with extra kudos to <a href="https://github.com/nobiot">Noboru Ota</a>, because Noboru rocks).</p>
<p><strong>Change Log:</strong></p>
<ul>
<li><code>[2021-07-24 Sat]</code> Update post to reflect <a href="https://github.com/org-roam/org-roam/releases/tag/v2.0.0">release of org-roam v2</a>.</li>
</ul>
<!--more-->

<h1 id="key-changes">Key changes</h1>
<p><code class="verbatim">org-roam</code> <code class="verbatim">V2</code> has <a href="https://github.com/org-roam/org-roam/pull/1401">many changes</a>, and some of them are UX-related (e.g. new completing read, revamped roam buffer), while others are fundamental in a way that they affect interactive and programmatic usage. So I am going to focus on these changes. I might miss some very important things that I have never used, and if so, just let me know and I will update the list.</p>
<h2 id="structured-note">Structured note</h2>
<p>One of the first thing that I’ve been playing around in <code class="verbatim">vulpea</code> is definition of a note. Initially it was a <a href="https://github.com/d12frosted/vulpea/commit/8820c9af2c71c1e995856432c5106aac2774d162">property list</a>, but I quickly started to hate this approach (even thought it was well defined) and switched to <a href="https://github.com/d12frosted/vulpea/commit/e38a1353c068bf28203ca3ebe93e5a3d6cfd7262">struct</a>. Why? Because a formal definition of data types makes it easier to build on top of that. You have completion for fields, you have byte compiler to warn you on missing field, etc. So even if as an author of library you are totally fine with not having a formal definition of your data types, they are a game-changer for people using it.</p>
<p>This is why I am so happy that <code class="verbatim">org-roam</code> finally formalised <code class="verbatim">org-roam-node</code>. And one of the best parts about this change - there is no distinction between file-level notes and headings anymore. This is what I’ve done in <code class="verbatim">vulpea</code> and now with <code class="verbatim">V2</code> I can remove all those <code>(if (= level 0) (treat-as-file)
(treat-as-heading))</code> indirections.</p>
<p>The only thing that you should keep in mind, having <code class="verbatim">org-roam-node</code> doesn’t mean that all fields are populated, you might need to call <code class="verbatim">org-roam-populate</code>. As far as I can tell, the reason is that all data is scattered across multiple tables and gathering everything is an expensive operation. This is the main difference between <code class="verbatim">org-roam-node</code> and <code class="verbatim">vulpea-note</code>, which is always populated when returned from <code class="verbatim">vulpea</code> functions (achieved by horrific <a href="https://github.com/d12frosted/vulpea/blob/c606b33e25c0240ca68350163a0327a0bf08d20d/vulpea-db.el#L85">SQL expression</a>). On the other hand, <code class="verbatim">vulpea-note</code> contains less information than <code class="verbatim">org-roam-node</code>.</p>
<h2 id="mandatory-id">Mandatory ID</h2>
<p>Following note type formalisation, <code class="verbatim">ID</code> property became mandatory for a node to be part of <code class="verbatim">org-roam</code> database. Meaning that if your heading doesn’t have an <code class="verbatim">ID</code>, it will not be picked up by <code class="verbatim">org-roam</code>.</p>
<p>And I am happy about this requirement, because ids are the only way to identify a note (I know, tautology). And <code class="verbatim">vulpea</code> <a href="https://github.com/d12frosted/vulpea/commit/8820c9af2c71c1e995856432c5106aac2774d162#diff-ecbc1aa90e9ff97a00b0b2aab1551bceee0c4d21993146bdcb1af4de31c9cac6R26">required</a> them from the day 1. In my sense, missing <code class="verbatim">ID</code> means that the note doesn’t exists yet (or at least, the system doesn’t know about it yet).</p>
<p>This is important, because again, it reduces any indirection in libraries code related to note/node identification. Just <code class="verbatim">ID</code> and that’s it.</p>
<p>Another reason to have mandatory ids is linking.</p>
<h2 id="id-links">ID Links</h2>
<p>Initially <code class="verbatim">org-roam</code> used file links. This means that whenever you linked a note, it used absolute (or relative???<a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a>) file path to said note. But these paths are very sensitive to file system changes, which should be irrelevant in non-hierarchical note-taking tool. Right? You change file name, now all links must change. Have fun if for some reason it was not changed automatically. You moved directory, now all links must be updated. You synchronise <code class="verbatim">org-roam-directory</code> across multiple computers, with different path to said directory (e.g. <code class="verbatim">/home/boris/org</code> vs <code class="verbatim">/Users/boris/notes/org</code>), now there are no links between your notes! Task failed successfully, as they say! It’s easy to become paranoid with such approach, because you can not trust a system that misses links.</p>
<p>Now, ids don’t change (quite a philosophical question about identity, but let’s skip this one for another day). And Org mode supports <code class="verbatim">ID</code> links. Perfect! With <code class="verbatim">V2</code> all links are id based and less maintenance is required when you move something around. Great, users of <code class="verbatim">org-roam</code> and its maintainers are both winners.</p>
<p>Not sure if this brings much to authors of libraries, but in general it’s a very good change that allows to remove most of safeguards related to links. If you still believe that path links are somehow superior, please let me know why! I might be missing something here.</p>
<h2 id="tags">Tags</h2>
<p>IMHO, one of the biggest breaking change is how things are being tagged now. In <code class="verbatim">V2</code> there is no separate tagging system. In <code class="verbatim">V1</code> there are several <a href="https://github.com/org-roam/org-roam/blob/8ad141403065bebd5a72f0ef53cf5ef8f2034419/org-roam.el#L195">sources</a> of <code class="verbatim">org-roam</code> tags - path elements (e.g. sub-directories relative to <code class="verbatim">org-roam-directory</code>), properties and Org mode tags. With <code class="verbatim">V2</code> there are only Org mode tags.</p>
<p>This is quite a complex topic, because with this kind of freedom, it’s easy to exploit and over-complicate usage of tags in <code class="verbatim">org-roam</code>. The key thing to remember - while Org mode tags are great when doing agenda searches, agenda does not work with files, but with headings only. And if you were using roam tags for categorisation (so you could filter out stuff from db based on these tags), now you have to deal with <a href="https://orgmode.org/manual/Tag-Inheritance.html#Tag-Inheritance">Tag Inheritance</a>, which is not a big deal in some cases, but still.</p>
<p>Another thing to keep in mind, valid tag for <code class="verbatim">#+roam_tags</code> is not necessary a valid tag for <code class="verbatim">#+file_tags</code>. For example, spaces, colons are not allowed - tags are normal words containing letters, numbers, ‘_’, and ‘@’ (see <code class="verbatim">org-tag-re</code>). So you need to keep that in mind during migration (covered in attached script).</p>
<p>Since I was abusing tagging system, I had to go over every such case and find another way to achieve my goal. Just as example, I was tagging all my <code class="verbatim">litnotes</code> with two types of tags: content type (e.g. <code class="verbatim">content:book</code>, <code class="verbatim">content:article</code>, etc.) and status (e.g. <code class="verbatim">status:new</code>, <code class="verbatim">status:ongoing</code>, <code class="verbatim">status:done</code>, <code class="verbatim">status:dropped</code>). I didn’t want to use <code class="verbatim">fieltags</code> for this purpose, because I would need to disable inheritance for all possible values. So my <a href="https://github.com/d12frosted/environment/blob/master/emacs/README.org#managing-litnotes">solution</a> is to move this kind of metadata to … <a href="https://github.com/d12frosted/vulpea/tree/c606b33e25c0240ca68350163a0327a0bf08d20d#vulpea-meta">metadata list</a>.</p>
<h2 id="capture">Capture</h2>
<p>When you only migrate to <code class="verbatim">org-roam</code> or when you automate stuff, having an ability to programmatically create new note synchronously and get it as result is priceless. While it was possible with <code class="verbatim">V1</code>, it required <a href="https://github.com/d12frosted/vulpea/blob/0f73528e603b1901cbe36eccd536a9113ef0439d/vulpea.el#L167">a certain hack</a>. With <code class="verbatim">V2</code> it is no longer needed, because you can <a href="https://github.com/org-roam/org-roam/pull/1523">provide</a> <code class="verbatim">id</code> of a note during capture process and then simply query it (just don’t forget to <a href="https://github.com/d12frosted/vulpea/blob/c606b33e25c0240ca68350163a0327a0bf08d20d/vulpea.el#L350">pass</a> <code class="verbatim">immediate-fnish</code> property).</p>
<p>And the most cool thing about new capture process is that <code class="verbatim">org-roam-capture-templates</code> became even closer to Org mode capture template, meaning that you can configure capture stuff in so many fancy ways… I am yet to discover this new wonderful world.</p>
<h1 id="notes-migration">Notes migration</h1>
<p>Migration to <code class="verbatim">V2</code> requires changes to your notes:</p>
<ol>
<li>make sure that each file contains an id;</li>
<li>move <code class="verbatim">roam_key</code> to <code class="verbatim">roam_ref</code> property;</li>
<li>move <code class="verbatim">roam_alias</code> to <code class="verbatim">roam_aliases</code> property;</li>
<li>move <code class="verbatim">roam_tags</code> to <code class="verbatim">filetags</code> and
<ol>
<li>make sure they do not contain ‘:’ or spaces;</li>
<li>extract path tags;</li>
</ol></li>
</ol>
<p>It can be achieved by using helpers from <a href="https://github.com/d12frosted/vulpea/">vulpea</a> and the following script (you must be on <code class="verbatim">org-roam-v2</code>):</p>
<div class="sourceCode" id="cb1" data-org-language="emacs-lisp"><pre class="sourceCode commonlisp"><code class="sourceCode commonlisp"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a>(<span class="kw">defun</span><span class="fu"> vulpea-migrate-buffer </span>()</span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>  <span class="st">&quot;Migrate current buffer note to `org-roam' v2.&quot;</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>  <span class="co">;; Create file level ID if it doesn't exist yet</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>  (org-with-point-at <span class="dv">1</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>    (org-id-get-create))</span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a>  <span class="co">;; update title (just to make sure it's lowercase)</span></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a>  (vulpea-buffer-title-set (vulpea-buffer-prop-get <span class="st">&quot;title&quot;</span>))</span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a>  <span class="co">;; move roam_key into properties drawer roam_ref</span></span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a>  (when-let* ((ref (vulpea-buffer-prop-get <span class="st">&quot;roam_key&quot;</span>)))</span>
<span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a>    (org-set-property <span class="st">&quot;ROAM_REFS&quot;</span> ref)</span>
<span id="cb1-13"><a href="#cb1-13" aria-hidden="true" tabindex="-1"></a>    (<span class="kw">let</span> ((case-fold-search <span class="kw">t</span>))</span>
<span id="cb1-14"><a href="#cb1-14" aria-hidden="true" tabindex="-1"></a>      (org-with-point-at <span class="dv">1</span></span>
<span id="cb1-15"><a href="#cb1-15" aria-hidden="true" tabindex="-1"></a>        (while (re-search-forward <span class="st">&quot;^</span><span class="ch">#\\</span><span class="st">+roam_key:&quot;</span> (point-max) <span class="kw">t</span>)</span>
<span id="cb1-16"><a href="#cb1-16" aria-hidden="true" tabindex="-1"></a>          (beginning-of-line)</span>
<span id="cb1-17"><a href="#cb1-17" aria-hidden="true" tabindex="-1"></a>          (kill-line <span class="dv">1</span>)))))</span>
<span id="cb1-18"><a href="#cb1-18" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-19"><a href="#cb1-19" aria-hidden="true" tabindex="-1"></a>  <span class="co">;; move roam_alias into properties drawer roam_aliases</span></span>
<span id="cb1-20"><a href="#cb1-20" aria-hidden="true" tabindex="-1"></a>  (when-let* ((aliases (vulpea-buffer-prop-get-list <span class="st">&quot;roam_alias&quot;</span>)))</span>
<span id="cb1-21"><a href="#cb1-21" aria-hidden="true" tabindex="-1"></a>    (org-set-property <span class="st">&quot;ROAM_ALIASES&quot;</span></span>
<span id="cb1-22"><a href="#cb1-22" aria-hidden="true" tabindex="-1"></a>                      (combine-and-quote-strings aliases))</span>
<span id="cb1-23"><a href="#cb1-23" aria-hidden="true" tabindex="-1"></a>    (<span class="kw">let</span> ((case-fold-search <span class="kw">t</span>))</span>
<span id="cb1-24"><a href="#cb1-24" aria-hidden="true" tabindex="-1"></a>      (org-with-point-at <span class="dv">1</span></span>
<span id="cb1-25"><a href="#cb1-25" aria-hidden="true" tabindex="-1"></a>        (while (re-search-forward <span class="st">&quot;^</span><span class="ch">#\\</span><span class="st">+roam_alias:&quot;</span> (point-max) <span class="kw">t</span>)</span>
<span id="cb1-26"><a href="#cb1-26" aria-hidden="true" tabindex="-1"></a>          (beginning-of-line)</span>
<span id="cb1-27"><a href="#cb1-27" aria-hidden="true" tabindex="-1"></a>          (kill-line <span class="dv">1</span>)))))</span>
<span id="cb1-28"><a href="#cb1-28" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-29"><a href="#cb1-29" aria-hidden="true" tabindex="-1"></a>  <span class="co">;; move roam_tags into filetags</span></span>
<span id="cb1-30"><a href="#cb1-30" aria-hidden="true" tabindex="-1"></a>  (<span class="kw">let*</span> ((roam-tags (vulpea-buffer-prop-get-list <span class="st">&quot;roam_tags&quot;</span>))</span>
<span id="cb1-31"><a href="#cb1-31" aria-hidden="true" tabindex="-1"></a>         (file-tags (vulpea-buffer-prop-get-list <span class="st">&quot;filetags&quot;</span>))</span>
<span id="cb1-32"><a href="#cb1-32" aria-hidden="true" tabindex="-1"></a>         (path-tags (seq-filter</span>
<span id="cb1-33"><a href="#cb1-33" aria-hidden="true" tabindex="-1"></a>                     (<span class="kw">lambda</span> (x) (<span class="kw">not</span> (string-empty-p x)))</span>
<span id="cb1-34"><a href="#cb1-34" aria-hidden="true" tabindex="-1"></a>                     (split-string</span>
<span id="cb1-35"><a href="#cb1-35" aria-hidden="true" tabindex="-1"></a>                      (string-remove-prefix</span>
<span id="cb1-36"><a href="#cb1-36" aria-hidden="true" tabindex="-1"></a>                       org-roam-directory</span>
<span id="cb1-37"><a href="#cb1-37" aria-hidden="true" tabindex="-1"></a>                       (file-name-directory (buffer-file-name)))</span>
<span id="cb1-38"><a href="#cb1-38" aria-hidden="true" tabindex="-1"></a>                      <span class="st">&quot;/&quot;</span>)))</span>
<span id="cb1-39"><a href="#cb1-39" aria-hidden="true" tabindex="-1"></a>         (tags (seq-map</span>
<span id="cb1-40"><a href="#cb1-40" aria-hidden="true" tabindex="-1"></a>                (<span class="kw">lambda</span> (tag)</span>
<span id="cb1-41"><a href="#cb1-41" aria-hidden="true" tabindex="-1"></a>                  (<span class="kw">setq</span> tag (replace-regexp-in-string</span>
<span id="cb1-42"><a href="#cb1-42" aria-hidden="true" tabindex="-1"></a>                             <span class="co">;; see `org-tag-re'</span></span>
<span id="cb1-43"><a href="#cb1-43" aria-hidden="true" tabindex="-1"></a>                             <span class="st">&quot;[^[:alnum:]_@#%]&quot;</span></span>
<span id="cb1-44"><a href="#cb1-44" aria-hidden="true" tabindex="-1"></a>                             <span class="st">&quot;_&quot;</span>        <span class="co">; use any valid char - _@#%</span></span>
<span id="cb1-45"><a href="#cb1-45" aria-hidden="true" tabindex="-1"></a>                             tag))</span>
<span id="cb1-46"><a href="#cb1-46" aria-hidden="true" tabindex="-1"></a>                  (<span class="kw">if</span> (<span class="kw">or</span></span>
<span id="cb1-47"><a href="#cb1-47" aria-hidden="true" tabindex="-1"></a>                       (string-prefix-p <span class="st">&quot;status&quot;</span> tag 'ignore-case)</span>
<span id="cb1-48"><a href="#cb1-48" aria-hidden="true" tabindex="-1"></a>                       (string-prefix-p <span class="st">&quot;content&quot;</span> tag 'ignore-case)</span>
<span id="cb1-49"><a href="#cb1-49" aria-hidden="true" tabindex="-1"></a>                       (<span class="kw">string-equal</span> <span class="st">&quot;Project&quot;</span> tag))</span>
<span id="cb1-50"><a href="#cb1-50" aria-hidden="true" tabindex="-1"></a>                      (<span class="kw">setq</span> tag (downcase tag)))</span>
<span id="cb1-51"><a href="#cb1-51" aria-hidden="true" tabindex="-1"></a>                  tag)</span>
<span id="cb1-52"><a href="#cb1-52" aria-hidden="true" tabindex="-1"></a>                (seq-uniq (<span class="kw">append</span> roam-tags file-tags path-tags)))))</span>
<span id="cb1-53"><a href="#cb1-53" aria-hidden="true" tabindex="-1"></a>    (<span class="kw">when</span> tags</span>
<span id="cb1-54"><a href="#cb1-54" aria-hidden="true" tabindex="-1"></a>      (<span class="kw">apply</span> #'vulpea-buffer-tags-set tags)</span>
<span id="cb1-55"><a href="#cb1-55" aria-hidden="true" tabindex="-1"></a>      (<span class="kw">let</span> ((case-fold-search <span class="kw">t</span>))</span>
<span id="cb1-56"><a href="#cb1-56" aria-hidden="true" tabindex="-1"></a>        (org-with-point-at <span class="dv">1</span></span>
<span id="cb1-57"><a href="#cb1-57" aria-hidden="true" tabindex="-1"></a>          (while (re-search-forward <span class="st">&quot;^</span><span class="ch">#\\</span><span class="st">+roam_tags:&quot;</span> (point-max) <span class="kw">t</span>)</span>
<span id="cb1-58"><a href="#cb1-58" aria-hidden="true" tabindex="-1"></a>            (beginning-of-line)</span>
<span id="cb1-59"><a href="#cb1-59" aria-hidden="true" tabindex="-1"></a>            (kill-line <span class="dv">1</span>))))))</span>
<span id="cb1-60"><a href="#cb1-60" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-61"><a href="#cb1-61" aria-hidden="true" tabindex="-1"></a>  (save-buffer))</span>
<span id="cb1-62"><a href="#cb1-62" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-63"><a href="#cb1-63" aria-hidden="true" tabindex="-1"></a>(<span class="kw">defun</span><span class="fu"> vulpea-migrate-db </span>()</span>
<span id="cb1-64"><a href="#cb1-64" aria-hidden="true" tabindex="-1"></a>  <span class="st">&quot;Migrate all notes.&quot;</span></span>
<span id="cb1-65"><a href="#cb1-65" aria-hidden="true" tabindex="-1"></a>  (interactive)</span>
<span id="cb1-66"><a href="#cb1-66" aria-hidden="true" tabindex="-1"></a>  (<span class="kw">dolist</span> (f (org-roam--list-all-files))</span>
<span id="cb1-67"><a href="#cb1-67" aria-hidden="true" tabindex="-1"></a>    (with-current-buffer (find-file f)</span>
<span id="cb1-68"><a href="#cb1-68" aria-hidden="true" tabindex="-1"></a>      (message <span class="st">&quot;migrating %s&quot;</span> f)</span>
<span id="cb1-69"><a href="#cb1-69" aria-hidden="true" tabindex="-1"></a>      (vulpea-migrate-buffer)))</span>
<span id="cb1-70"><a href="#cb1-70" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-71"><a href="#cb1-71" aria-hidden="true" tabindex="-1"></a>  <span class="co">;; Step 2: Build cache</span></span>
<span id="cb1-72"><a href="#cb1-72" aria-hidden="true" tabindex="-1"></a>  (org-roam-db-sync 'force))</span></code></pre></div>
<p>Simply run <code class="verbatim">M-x vulpea-migrate-db</code> and wait until the dirty work is done. Let me know if it doesn’t work for you. More discussion around migration can be found on <a href="https://www.orgroam.com/manual.html#Migrating-from-Org_002droam-v1">official guide</a>, <a href="https://org-roam.discourse.group/t/the-org-roam-v2-great-migration/1505">discourse</a>, <a href="https://gist.github.com/jethrokuan/02f41028fb4a6f81787dc420fb99b6e4">GitHub Gist</a> and <a href="https://github.com/org-roam/org-roam/wiki/Hitchhiker's-Rough-Guide-to-Org-roam-V2">GitHub Wiki</a>.</p>
<h1 id="code-migration">Code migration</h1>
<p>And this is the trickiest part, because <code class="verbatim">V2</code> is taking revolutionary approach instead of evolutionary approach, you just have to deal with huge amount of breaking changes. Migrating my notes took around an hour and a half (including patching migration script, iteratively fixing things, pouring more wine, and fighting with issues caused by misusing <code class="verbatim">git-gutter</code><a href="#fn2" class="footnote-ref" id="fnref2" role="doc-noteref"><sup>2</sup></a>). Migration of <a href="https://github.com/d12frosted/vulpea">vulpea</a>, <a href="https://github.com/d12frosted/vino">vino</a> and <a href="https://github.com/d12frosted/environment">personal configs</a> took more than a week of work. And it was not that bad thanks to (1) having <code class="verbatim">vulpea</code> and <code class="verbatim">vino</code> covered with tests (so I simply was fixing them), (2) using byte compiler which caught many changes and (3) having most of my code based on <code class="verbatim">vulpea</code>, so lots of stuff got fixed transitively<a href="#fn3" class="footnote-ref" id="fnref3" role="doc-noteref"><sup>3</sup></a>.</p>
<p>Now, the real question is what are the major changes code-wise? Different database scheme, formalized <code class="verbatim">org-roam-node</code> data type, new capture flow, new utilities (some are gone, but there are many good new ones).</p>
<p>Since <code class="verbatim">V1</code> lacked good abstraction over database, it was very common to… well you know, use <code class="verbatim">org-roam-db-query</code> directly to execute arbitrary SQL queries<a href="#fn4" class="footnote-ref" id="fnref4" role="doc-noteref"><sup>4</sup></a>, which of course relies on <em>knowing</em> the scheme. But this coupling bites really hard with <code class="verbatim">V2</code>, because the scheme changed dramatically. So you just have to sit down and work with <strong>every</strong> query you perform. Some changes are trivial, some are not. Unfortunately, there is no pill here. My advice is to minimise amount of direct queries by using functions provided by <code class="verbatim">org-roam</code> or extracting them into your own helpers.</p>
<p>With <code class="verbatim">org-roam-node</code> and some other data types everything becomes really nice. There is no need for indirection for file-level or heading-level nodes anymore. You know exactly, what fields you have. The only thing you need to keep in mind - not all fields are populated, so there is <code class="verbatim">org-roam-populate</code> that works with various types.</p>
<p>You can check my PRs related to migration to <code class="verbatim">V2</code> for inspiration (unfortunately most of them already have new unrelated features):</p>
<ul>
<li><a href="https://github.com/d12frosted/vulpea/pull/92">vulpea#92</a></li>
<li><a href="https://github.com/d12frosted/vino/pull/100">vino#100</a></li>
<li><a href="https://github.com/d12frosted/environment/commit/87d23cd71800b8976d1c40927b6a345b8eac40ac">environment#87d23cd</a>, with follow-ups:
<ul>
<li><a href="https://github.com/d12frosted/environment/commit/57e6fe4417ff367754d3df31eb144efa76ea1073">environment#57e6fe4</a></li>
<li><a href="https://github.com/d12frosted/environment/commit/1febc7a5b015d98602cd48cb0143b4424a5e8c03">environment#1febc7a</a></li>
<li>… and many more</li>
</ul></li>
</ul>
<p>And before you jump into changing your code base, I suggest to go over <a href="https://github.com/org-roam/org-roam/blob/ed16ca75d7556b4d831326804543591836b466d5/doc/org-roam.org#developers-guide-to-org-roam">Developer’s Guide to Org-roam</a>.</p>
<h1 id="what-about-vulpea">What about vulpea?</h1>
<p>Some of the core ideas of <code class="verbatim">vulpea</code> got implemented in <code class="verbatim">org-roam</code> now (definitely not claiming that I have played any role in this, I am sure Jethro had this in mind for a long time). And I asked myself - is there still a need for <code class="verbatim">vulpea</code>? Like, there is <code class="verbatim">org-roam-node</code>, why do I need <code class="verbatim">vulpea-note</code>? There is new and wonderful capture process, why do I need <code class="verbatim">vulpea-create</code>? Many questions like this. But fundamentally I think there are only two questions. Is <code class="verbatim">vulpea</code> still useful for <strong>me</strong>? And is <code class="verbatim">vulpea</code> still useful for <strong>others</strong>?</p>
<p>For me - definitely yes. Because it gives me abstractions and utilities to build other stuff on top. Migration process illustrated that I can do all the heavy lifting in <code class="verbatim">vulpea</code> and get most of the stuff fixed in many other places. Tests<a href="#fn5" class="footnote-ref" id="fnref5" role="doc-noteref"><sup>5</sup></a> made this migration really smooth (of course I have not covered every single shit).</p>
<p>For others - it’s for you to decide, and I believe that yes :) Forget abstractions, <code class="verbatim">vulpea</code> provides various utilities for working with Org Mode and Org Roam files that you might want to use (for dealing with buffer properties, e.g. <code class="verbatim">#+key: value</code>, and for dealing with description lists). It also provides a custom configurable interface for selecting notes - <code class="verbatim">vulpea-select</code> with interactive functions using it (<code class="verbatim">vulpea-find</code>, <code class="verbatim">vulpea-find-backlink</code> and <code class="verbatim">vulpea-insert</code>). I will cover them in a separate article. And of course, my favourite functions - <code class="verbatim">vulpea-db-query</code> and <code class="verbatim">vulpea-create</code>.</p>
<p>So I am going to continue support and development of <code class="verbatim">vulpea</code> library. And if you encounter any issues (with code, documentation etc.) or have a feature request - just don’t hesitate to <a href="https://github.com/d12frosted/vulpea/issues">open an issue</a>, <a href="https://github.com/d12frosted/vulpea/discussions">start a discussion</a>, comment on this post, or write me an email.</p>
<h1 id="any-lessons-learned">Any lessons learned?</h1>
<p>The most important lesson for me is that <code class="verbatim">vulpea</code> has huge ROI. Primary goal of <code class="verbatim">vulpea</code><a href="#fn6" class="footnote-ref" id="fnref6" role="doc-noteref"><sup>6</sup></a> is to be a <em>tested</em> library for building solutions for note taking. And this migration process simply proved that the goal worth the effort.</p>
<p>Another lesson I am taking from this situation is that revolutionary approach is stressful and time consuming for users (not sure about Jethro, I hope he is all right). Even though in this case it totally worth all the nerves and doubts. It is stable, polished and better. It also implies another lesson - sequel might be even better than original :)</p>
<p>I am also annoyed by the fact that I keep abusing tagging system whenever I encounter it. Whenever it becomes multidimensional, it is a sign to stop and take a step back. Tags should not turn into total mess<a href="#fn7" class="footnote-ref" id="fnref7" role="doc-noteref"><sup>7</sup></a>.</p>
<p>And of course, <code class="verbatim">org-roam</code> community is fantastic. I don’t read all the messages on <a href="https://org-roam.discourse.group/">org-roam.discourse.group</a>, but when I do, I am simply amazed by all the use cases you folks have, and how helpful you are! Seriously, this is amazing. And it also a credit to <a href="https://github.com/jethrokuan/">Jethro</a>. Without doubt, <code class="verbatim">org-roam</code> is the best thing happened in my note-taking life.</p>
<h1 id="resources">Resources</h1>
<ul>
<li><a href="https://github.com/org-roam/org-roam/pull/1401">org-roam#1401</a></li>
<li><a href="https://org-roam.discourse.group/t/org-roam-major-redesign/1198">Org-roam major redesign</a></li>
<li><a href="https://github.com/org-roam/org-roam/blob/ed16ca75d7556b4d831326804543591836b466d5/doc/org-roam.org#developers-guide-to-org-roam">Developer’s Guide to Org-roam</a></li>
<li><a href="https://github.com/org-roam/org-roam/wiki/Hitchhiker's-Rough-Guide-to-Org-roam-V2">Hitchhiker’s Rough Guide to Org roam V2</a></li>
<li><a href="https://org-roam.discourse.group/t/the-org-roam-v2-great-migration/1505">The Org-roam v2 Great Migration</a></li>
</ul>
<section class="footnotes" role="doc-endnotes">
<hr />
<ol>
<li id="fn1" role="doc-endnote"><p>I don’t even remember, because I quickly switched to ID links once they landed to <code class="verbatim">org-roam</code>.<a href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn2" role="doc-endnote"><p>Silly, but I’ve ‘adopted’ an approach by Doom Emacs where gutter is updated asynchronously. And during migration I was opening and modifying too many org files (hey, more than 10000) which exhausted Emacs. I’ve spend too much time trying to figure out why it was happening.<a href="#fnref2" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn3" role="doc-endnote"><p>And whatever was using <code class="verbatim">org-roam</code> internals was migrated to <code class="verbatim">vulpea</code>.<a href="#fnref3" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn4" role="doc-endnote"><p>Again, tautology! I love them.<a href="#fnref4" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn5" role="doc-endnote"><p>Just for the reference, I am not a TDD advocate. I usually write tests <em>after</em> features and mostly <em>before</em> bug fixes.<a href="#fnref5" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn6" role="doc-endnote"><p>To be precise, <code class="verbatim">vulpea</code> (and sometimes <code class="verbatim">KitsuneBook</code>) is just a name I am using for note taking utilities. At some point of time it was a Haskell command line application… Now it’s an Emacs Lisp library leveraging Org Mode and Org Roam! It definitely has more active life than me.<a href="#fnref6" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn7" role="doc-endnote"><p>Maybe a partial mess, but definitely not total.<a href="#fnref7" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>
      </section>
    </article>

    <div class="footer-separator"></div>
    <div class="footer">
      <a target="_blank" class="post-footer-sources" href="https://github.com/d12frosted/d12frosted.io/blob/master/posts/2021-06-11-path-to-org-roam-v2.org">Sources <i class="fa fa-code fa-lg"></i></a>
    </div>
    <script src="https://utteranc.es/client.js" repo="d12frosted/d12frosted.io" issue-term="pathname" label="comments" theme="github-light" crossorigin="anonymous" async>
    </script>

    <footer>
  <div>
      <p>
        Follow me on <a class="fa fa-github" href="https://github.com/d12frosted" title="GitHub profile">&nbsp GitHub</a>
      </p>
  </div>
</footer>

  </body>
</html>
]]></summary>
</entry>
<entry>
    <title>Task management with org-roam Vol. 7: Capture</title>
    <link href="https://d12frosted.io/posts/2021-05-21-task-management-with-roam-vol7.html" />
    <id>https://d12frosted.io/posts/2021-05-21-task-management-with-roam-vol7.html</id>
    <published>2021-05-21T00:00:00Z</published>
    <updated>2021-05-21T00:00:00Z</updated>
    <summary type="html"><![CDATA[<!doctype html>
<html lang="en">
  <head>
    <title>Task management with org-roam Vol. 7: Capture</title>
    <link rel="stylesheet" href="../css/post-bundle.css" />
    <meta charset="utf-8">
<meta http-equiv="x-ua-compatible" content="ie=edge">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="keywords" content="blog,programming,Haskell,Emacs,fish,bash">
<meta property="og:title" content="Boris Buliga">
<meta property="og:locale" content="es_US">
<meta property="og:url" content="https://d12frosted.io">

<link rel="apple-touch-icon" sizes="180x180" href="../apple-touch-icon.png">
<link rel="icon" type="image/png" sizes="32x32" href="../favicon-32x32.png">
<link rel="icon" type="image/png" sizes="16x16" href="../favicon-16x16.png">
<link rel="manifest" href="../site.webmanifest">

<link href="https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css" rel="stylesheet">
<script>
  MathJax = {
    svg: {
      fontCache: 'global'
    }
  };
</script>
<script type="text/javascript" id="MathJax-script" async src="../library/mathjax/es5/tex-svg.js">
</script>
<script src="../library/chart.js/dist/Chart.min.js"></script>
<script data-goatcounter="https://d12frosted.goatcounter.com/count" async src="//gc.zgo.at/count.js"></script>

    <meta name="description" content="How to setup capture flow with org-roam" />
    <meta name="twitter:card" content="summary">
    <meta name="twitter:description" content="How to setup capture flow with org-roam">
    <meta property="og:description" content="How to setup capture flow with org-roam">
  </head>
  <body>
    <header>
      <nav>
  <ul>
    <li><a class="fa fa-home" href="../" title="Home">&nbsp Home</a></li>
    <li><a class="fa fa-suitcase" href="../projects.html" title="Projects">&nbsp Projects</a></li>
    <li><a class="fa fa-rss" href="../atom.xml" title="RSS">&nbsp RSS</a></li>
    <li><a class="fa fa-github" href="https://github.com/d12frosted" title="GitHub profile">&nbsp GitHub</a></li>
  </ul>
</nav>

    </header>

    <h1 class="post-title">Task management with org-roam Vol. 7: Capture</h1>
    <div class="date"><span>May 21, 2021</span></div>
    <div class="tags"><span>(<a title="All pages tagged 'emacs'." href="../tags/emacs.html">emacs</a>, <a title="All pages tagged 'org-roam'." href="../tags/org-roam.html">org-roam</a>, <a title="All pages tagged 'org-mode'." href="../tags/org-mode.html">org-mode</a>)</span></div>
    <article>
      <section>
        <p>Capturing is one of the most important activities in the task management process. Previously we talked about storing and querying tasks and now it’s time to cover capturing of tasks, meeting notes and inbox.</p>
<p>Please note that the goal is not to discuss GTD or any other methodology, but rather to discover how org-roam combined with everything we talked previously may help you to improve your capturing process regardless of methodology you are using.</p>
<!--more-->

<p>Org Mode <a href="https://orgmode.org/manual/Capture.html#Capture">Capture</a> lets you quickly store notes with zero interruption of your work flow. And capture is ridiculously powerful in Org Mode, as you can build so many things on top of it. For example, you can setup a full-blown journal with simple template, automatically put TODO entries when capturing a link to GitHub or Jira issue, etc.</p>
<div class="sourceCode" id="cb1" data-org-language="emacs-lisp"><pre class="sourceCode commonlisp"><code class="sourceCode commonlisp"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="co">;; you don't really need much, do you?</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>(<span class="kw">setq</span> org-capture-templates</span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>      '((<span class="st">&quot;j&quot;</span> <span class="st">&quot;Journal entry&quot;</span> plain</span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>         (file+olp+datetree <span class="st">&quot;~/path/to/journal.org&quot;</span>)</span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>         <span class="st">&quot;%K - %a</span><span class="sc">\n</span><span class="st">%i</span><span class="sc">\n</span><span class="st">%?</span><span class="sc">\n</span><span class="st">&quot;</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>         :unnarrowed <span class="kw">t</span>)))</span></code></pre></div>
<p>Over the years of using Org Mode for task management I’ve got a habit of clearing my head of any actionable items and thoughts that I can’t allow myself to spend time and cognitive resources now thus highly reducing my stress level. For some people it allows to maintain focus, and since my work is mostly about constant context switching, it also allows me to stay sane.</p>
<p>For this to work, any task management system must have the following properties.</p>
<ul>
<li>Capturing must be as fast as possible, which also implies ease of capturing.</li>
<li>There must be a way to easily review all captured items and process them when you have time.</li>
</ul>
<p>The speed and convenience of capture process is plain simple to understand. If it takes more than few seconds, it disturbs you from the current task at hand more and more, meaning that you will stop capturing at some point of time. If you need to go to the 6th floor and unlock your precious planner from the safe in order to capture something, it means that you will stop capturing.</p>
<p>In general, this means that it’s totally fine to use phone (even non-org based solution) or piece of paper to write something down. You’ll just have few sources to process captured items from when you have time.</p>
<p>Due to the nature of capture process, where you do it as fast as possible, these captured items might be… lacking better description, located in wrong place, irrelevant or beginning of something bigger. This is why it’s important to process all captured items and process them when you have time for that.</p>
<h1 id="inbox">Inbox</h1>
<p>When it comes to Org Mode, I prefer to have a dedicated inbox file per machine, so I can avoid sync issues as I might capture without internet connection. So I define my inbox file:</p>
<div class="sourceCode" id="cb2" data-org-language="emacs-lisp"><pre class="sourceCode commonlisp"><code class="sourceCode commonlisp"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a>(<span class="kw">defvar</span><span class="fu"> vulpea-capture-inbox-file</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>  (<span class="kw">format</span> <span class="st">&quot;inbox-%s.org&quot;</span> (system-name))</span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>  <span class="st">&quot;The path to the inbox file.</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a><span class="st">It is relative to `org-directory', unless it is absolute.&quot;</span>)</span></code></pre></div>
<p>Every inbox file has a title to distinguish between multiple inbox files and <code class="verbatim">filetags</code> that is <a href="https://orgmode.org/manual/Tag-Inheritance.html#Tag-Inheritance">inherited</a> by all TODO entries in this file, so that I can quickly pull whatever I need to process. In my case I am using <code class="verbatim">REFILE</code> tag.</p>
<pre class="org"><code>:PROPERTIES:
:ID:                     d272271d-7585-4913-9445-d7d97b59295d
:END:
#+title: Inbox (personal)
#+filetags: REFILE
</code></pre>
<h1 id="capturing-into-inbox">Capturing into inbox</h1>
<div class="post-video">
<video autoplay loop>
  <source src="../images/org-roam-task-management-vol7-1.mp4" type="video/mp4">
  Your browser does not support the video tag.
</video>
</div>

<p>In order for items to end up in the inbox file, I am using a simple capture template for TODO entries. And since I want to avoid picking template when I have more than one, I have a wrapper <code class="verbatim">vulpea-capture-task</code> function that picks up specific template. There are other ways to achieve that, if you are interested let me know.</p>
<div class="sourceCode" id="cb4" data-org-language="emacs-lisp"><pre class="sourceCode commonlisp"><code class="sourceCode commonlisp"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a>(<span class="kw">setq</span> org-capture-templates</span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a>      '((<span class="st">&quot;t&quot;</span> <span class="st">&quot;todo&quot;</span> plain (file vulpea-capture-inbox-file)</span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a>         <span class="st">&quot;* TODO %?</span><span class="sc">\n</span><span class="st">%U</span><span class="sc">\n</span><span class="st">&quot;</span> :clock-in <span class="kw">t</span> :clock-resume <span class="kw">t</span>)))</span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a>(<span class="kw">defun</span><span class="fu"> vulpea-capture-task </span>()</span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a>  <span class="st">&quot;Capture a task.&quot;</span></span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a>  (interactive)</span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true" tabindex="-1"></a>  (org-capture <span class="kw">nil</span> <span class="st">&quot;t&quot;</span>))</span></code></pre></div>
<h1 id="processing-inbox">Processing inbox</h1>
<div class="post-image">
<img src="../images/org-roam-task-management-vol7-2.png" />
</div>

<p>In order to process all inbox files managed by Org Mode we have wonderful <code class="verbatim">org-agenda</code>. My default agenda consists of various blocks, but the very first one lists all entries with <code class="verbatim">REFILE</code> tag (thanks to <code class="verbatim">filetags</code> all entries in inbox files are tagged accordingly).</p>
<div class="sourceCode" id="cb5" data-org-language="emacs-lisp"><pre class="sourceCode commonlisp"><code class="sourceCode commonlisp"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a>(<span class="kw">setq</span> org-agenda-custom-commands</span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a>      '((<span class="st">&quot; &quot;</span> <span class="st">&quot;Agenda&quot;</span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a>         ((tags</span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a>           <span class="st">&quot;REFILE&quot;</span></span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a>           ((org-agenda-overriding-header <span class="st">&quot;To refile&quot;</span>)</span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a>            (org-tags-match-list-sublevels <span class="kw">nil</span>)))))))</span></code></pre></div>
<p>Now I can perform my routine on inbox entries by removing irrelevant entries, performing actions that can be performed now, moving tasks to relevant projects, processing meeting notes by producing more notes or tasks. Well, routine.</p>
<p>Agenda builds fast thanks to trick described in <a href="https://d12frosted.io/posts/2021-01-16-task-management-with-roam-vol5.html">Dynamic and fast agenda</a>.</p>
<h1 id="e8460c6c-c9c1-4fa6-858a-dab6ba7fecc7" id="dynamically-selecting-capture-location">Dynamically selecting capture location</h1>
<p>At this point you might be wondering how it’s related to Org Roam. After all, up to this moment we didn’t use any Org Roam features. And what is the core feature of Org Roam? IMO, it’s fast query capabilities - this is something we’ve been using in almost every post of series.</p>
<p>It’s hard to come up with generic example, and I hate examples from the void of someones imagination, so let me describe where exactly in the capturing process I use it (apart from <a href="https://d12frosted.io/posts/2020-07-07-task-management-with-roam-vol4.html">Automatic tagging</a>). Hopefully, it’s easy to adapt this idea for other use cases, and if you experience any troubles, don’t hesitate to contact me.</p>
<p>Meeting notes. Whenever I am on a meeting, I love to keep meeting notes (thanks to Org Mode my memory is ephemeral). I divide all meetings in two categories - one-on-ones (e.g. <span class="math inline">\(p = 2\)</span>) and meetings with multiple participants (e.g. <span class="math inline">\(p &gt;
2\)</span>). And in the end, all meetings from one-on-ones are moved under <code class="verbatim">Meetings</code> outline in the file related to person I have a meeting with. And since it is so common I decided to save myself from unnecessary refile action by adapting my capture flow.</p>
<div class="post-video">
<video autoplay loop>
  <source src="../images/org-roam-task-management-vol7-3.mp4" type="video/mp4">
  Your browser does not support the video tag.
</video>
</div>

<p>So when a have a meeting, I simply hit <code class="verbatim">M-m c m</code> (short for ‘capture meeting’ which calls <code class="verbatim">vulpea-capture-meeting</code>), select a person or type any other phrase (e.g. project name) and let the capture process to place my notes in the right location. If I select a person, meeting notes are going to be located under <code class="verbatim">Meetings</code> heading in the file dedicated to the selected person. If I type something else, my notes go straight the inbox.</p>
<p>Person selection is possible by using <code class="verbatim">vulpea-select</code> from <a href="https://github.com/d12frosted/vulpea">vulpea</a> library (the same as we did in <a href="https://d12frosted.io/posts/2021-01-24-task-management-with-roam-vol6.html">Select a person and view related tasks</a>). In order for my meetings notes related to specific person to fall into my inbox, I tag them with <code class="verbatim">REFILE</code> tag directly (unlike notes in inbox file, which get tag via inheritance).</p>
<p>The code is pretty straightforward and available on <a href="https://github.com/d12frosted/environment/blob/ec30dc1218c86578b4f655c717147cd70012a12e/emacs/lisp/lib-vulpea-capture.el">GitHub</a>. First we setup a new template, which is responsible for capturing meeting notes. The cool part about capture process in Org Mode is that you can use functions to determine capture location and capture body, so this is what we are using here - <code class="verbatim">vulpea-capture-meeting-target</code> and <code class="verbatim">vulpea-capture-meeting-template</code>.</p>
<div class="sourceCode" id="cb6" data-org-language="emacs-lisp"><pre class="sourceCode commonlisp"><code class="sourceCode commonlisp"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a>(<span class="kw">setq</span> org-capture-templates</span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a>      '((<span class="st">&quot;t&quot;</span> <span class="st">&quot;todo&quot;</span> plain (file vulpea-capture-inbox-file)</span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a>         <span class="st">&quot;* TODO %?</span><span class="sc">\n</span><span class="st">%U</span><span class="sc">\n</span><span class="st">&quot;</span> :clock-in <span class="kw">t</span> :clock-resume <span class="kw">t</span>)</span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a>        (<span class="st">&quot;m&quot;</span> <span class="st">&quot;Meeting&quot;</span> entry</span>
<span id="cb6-6"><a href="#cb6-6" aria-hidden="true" tabindex="-1"></a>         (<span class="kw">function</span> vulpea-capture-meeting-target)</span>
<span id="cb6-7"><a href="#cb6-7" aria-hidden="true" tabindex="-1"></a>         (<span class="kw">function</span> vulpea-capture-meeting-template)</span>
<span id="cb6-8"><a href="#cb6-8" aria-hidden="true" tabindex="-1"></a>         :clock-in <span class="kw">t</span></span>
<span id="cb6-9"><a href="#cb6-9" aria-hidden="true" tabindex="-1"></a>         :clock-resume <span class="kw">t</span>)))</span>
<span id="cb6-10"><a href="#cb6-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-11"><a href="#cb6-11" aria-hidden="true" tabindex="-1"></a>(<span class="kw">defun</span><span class="fu"> vulpea-capture-meeting </span>()</span>
<span id="cb6-12"><a href="#cb6-12" aria-hidden="true" tabindex="-1"></a>  <span class="st">&quot;Capture a meeting.&quot;</span></span>
<span id="cb6-13"><a href="#cb6-13" aria-hidden="true" tabindex="-1"></a>  (interactive)</span>
<span id="cb6-14"><a href="#cb6-14" aria-hidden="true" tabindex="-1"></a>  (org-capture <span class="kw">nil</span> <span class="st">&quot;m&quot;</span>))</span></code></pre></div>
<p>The funny thing is that these functions are called in the following order:</p>
<ul>
<li><code class="verbatim">vulpea-capture-meeting-template</code></li>
<li><code class="verbatim">vulpea-capture-meeting-target</code></li>
</ul>
<p>Meaning that we need to present a list of people in the <code class="verbatim">template</code> phase and then access it somehow in <code class="verbatim">target</code> phase. Fortunately, there is an API in capture process allowing to store extra information for the duration of capture process - <code class="verbatim">org-capture-put</code> and <code class="verbatim">org-capture-get</code>.</p>
<div class="sourceCode" id="cb7" data-org-language="emacs-lisp"><pre class="sourceCode commonlisp"><code class="sourceCode commonlisp"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a>(<span class="kw">defun</span><span class="fu"> vulpea-capture-meeting-template </span>()</span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a>  <span class="st">&quot;Return a template for a meeting capture.&quot;</span></span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a>  (<span class="kw">let</span> ((person (vulpea-select</span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a>                 <span class="st">&quot;Person&quot;</span></span>
<span id="cb7-5"><a href="#cb7-5" aria-hidden="true" tabindex="-1"></a>                 :filter-fn</span>
<span id="cb7-6"><a href="#cb7-6" aria-hidden="true" tabindex="-1"></a>                 (<span class="kw">lambda</span> (note)</span>
<span id="cb7-7"><a href="#cb7-7" aria-hidden="true" tabindex="-1"></a>                   (<span class="kw">let</span> ((tags (vulpea-note-tags note)))</span>
<span id="cb7-8"><a href="#cb7-8" aria-hidden="true" tabindex="-1"></a>                     (seq-contains-p tags <span class="st">&quot;people&quot;</span>))))))</span>
<span id="cb7-9"><a href="#cb7-9" aria-hidden="true" tabindex="-1"></a>    (org-capture-put :meeting-person person)</span>
<span id="cb7-10"><a href="#cb7-10" aria-hidden="true" tabindex="-1"></a>    (<span class="kw">if</span> (vulpea-note-id person)</span>
<span id="cb7-11"><a href="#cb7-11" aria-hidden="true" tabindex="-1"></a>        <span class="st">&quot;* MEETING [%&lt;%Y-%m-%d %a&gt;] :REFILE:MEETING:</span><span class="sc">\n</span><span class="st">%U</span><span class="sc">\n\n</span><span class="st">%?&quot;</span></span>
<span id="cb7-12"><a href="#cb7-12" aria-hidden="true" tabindex="-1"></a>      (concat <span class="st">&quot;* MEETING with &quot;</span></span>
<span id="cb7-13"><a href="#cb7-13" aria-hidden="true" tabindex="-1"></a>              (vulpea-note-title person)</span>
<span id="cb7-14"><a href="#cb7-14" aria-hidden="true" tabindex="-1"></a>              <span class="st">&quot; on [%&lt;%Y-%m-%d %a&gt;] :MEETING:</span><span class="sc">\n</span><span class="st">%U</span><span class="sc">\n\n</span><span class="st">%?&quot;</span>))))</span></code></pre></div>
<p>So first we select a person via <code class="verbatim">vulpea-select</code> and store it via <code class="verbatim">org-capture-put</code>, so we can access it in <code class="verbatim">vulpea-capture-meeting-target</code> function. <code class="verbatim">vulpea-select</code> always return a note, but in case result doesn’t contain an <code class="verbatim">id</code>, it means that the note doesn’t exist. In our case that means that we want to place meeting notes in the inbox file and the heading must contain the name of the group we are having meeting with. In case it’s a real person, there is no need to add name in the heading, but we need an extra tag - <code class="verbatim">REFILE</code>, so Inbox agenda picks it up.</p>
<div class="sourceCode" id="cb8" data-org-language="emacs-lisp"><pre class="sourceCode commonlisp"><code class="sourceCode commonlisp"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a>(<span class="kw">defun</span><span class="fu"> vulpea-capture-meeting-target </span>()</span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a>  <span class="st">&quot;Return a target for a meeting capture.&quot;</span></span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a>  (<span class="kw">let</span> ((person (org-capture-get :meeting-person)))</span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a>    <span class="co">;; unfortunately, I could not find a way to reuse</span></span>
<span id="cb8-5"><a href="#cb8-5" aria-hidden="true" tabindex="-1"></a>    <span class="co">;; `org-capture-set-target-location'</span></span>
<span id="cb8-6"><a href="#cb8-6" aria-hidden="true" tabindex="-1"></a>    (<span class="kw">if</span> (vulpea-note-id person)</span>
<span id="cb8-7"><a href="#cb8-7" aria-hidden="true" tabindex="-1"></a>        (<span class="kw">let</span> ((path (vulpea-note-path person))</span>
<span id="cb8-8"><a href="#cb8-8" aria-hidden="true" tabindex="-1"></a>              (headline <span class="st">&quot;Meetings&quot;</span>))</span>
<span id="cb8-9"><a href="#cb8-9" aria-hidden="true" tabindex="-1"></a>          (set-buffer (org-capture-target-buffer path))</span>
<span id="cb8-10"><a href="#cb8-10" aria-hidden="true" tabindex="-1"></a>          <span class="co">;; Org expects the target file to be in Org mode, otherwise</span></span>
<span id="cb8-11"><a href="#cb8-11" aria-hidden="true" tabindex="-1"></a>          <span class="co">;; it throws an error. However, the default notes files</span></span>
<span id="cb8-12"><a href="#cb8-12" aria-hidden="true" tabindex="-1"></a>          <span class="co">;; should work out of the box. In this case, we switch it to</span></span>
<span id="cb8-13"><a href="#cb8-13" aria-hidden="true" tabindex="-1"></a>          <span class="co">;; Org mode.</span></span>
<span id="cb8-14"><a href="#cb8-14" aria-hidden="true" tabindex="-1"></a>          (<span class="kw">unless</span> (derived-mode-p 'org-mode)</span>
<span id="cb8-15"><a href="#cb8-15" aria-hidden="true" tabindex="-1"></a>            (org-display-warning</span>
<span id="cb8-16"><a href="#cb8-16" aria-hidden="true" tabindex="-1"></a>             (<span class="kw">format</span></span>
<span id="cb8-17"><a href="#cb8-17" aria-hidden="true" tabindex="-1"></a>              <span class="st">&quot;Capture requirement: switching buffer %S to Org mode&quot;</span></span>
<span id="cb8-18"><a href="#cb8-18" aria-hidden="true" tabindex="-1"></a>              (current-buffer)))</span>
<span id="cb8-19"><a href="#cb8-19" aria-hidden="true" tabindex="-1"></a>            (org-mode))</span>
<span id="cb8-20"><a href="#cb8-20" aria-hidden="true" tabindex="-1"></a>          (org-capture-put-target-region-and-position)</span>
<span id="cb8-21"><a href="#cb8-21" aria-hidden="true" tabindex="-1"></a>          (widen)</span>
<span id="cb8-22"><a href="#cb8-22" aria-hidden="true" tabindex="-1"></a>          (goto-char (point-min))</span>
<span id="cb8-23"><a href="#cb8-23" aria-hidden="true" tabindex="-1"></a>          (<span class="kw">if</span> (re-search-forward</span>
<span id="cb8-24"><a href="#cb8-24" aria-hidden="true" tabindex="-1"></a>               (<span class="kw">format</span> org-complex-heading-regexp-format</span>
<span id="cb8-25"><a href="#cb8-25" aria-hidden="true" tabindex="-1"></a>                       (regexp-quote headline))</span>
<span id="cb8-26"><a href="#cb8-26" aria-hidden="true" tabindex="-1"></a>               <span class="kw">nil</span> <span class="kw">t</span>)</span>
<span id="cb8-27"><a href="#cb8-27" aria-hidden="true" tabindex="-1"></a>              (beginning-of-line)</span>
<span id="cb8-28"><a href="#cb8-28" aria-hidden="true" tabindex="-1"></a>            (goto-char (point-max))</span>
<span id="cb8-29"><a href="#cb8-29" aria-hidden="true" tabindex="-1"></a>            (<span class="kw">unless</span> (bolp) (insert <span class="st">&quot;</span><span class="sc">\n</span><span class="st">&quot;</span>))</span>
<span id="cb8-30"><a href="#cb8-30" aria-hidden="true" tabindex="-1"></a>            (insert <span class="st">&quot;* &quot;</span> headline <span class="st">&quot;</span><span class="sc">\n</span><span class="st">&quot;</span>)</span>
<span id="cb8-31"><a href="#cb8-31" aria-hidden="true" tabindex="-1"></a>            (beginning-of-line <span class="dv">0</span>)))</span>
<span id="cb8-32"><a href="#cb8-32" aria-hidden="true" tabindex="-1"></a>      (<span class="kw">let</span> ((path vulpea-capture-inbox-file))</span>
<span id="cb8-33"><a href="#cb8-33" aria-hidden="true" tabindex="-1"></a>        (set-buffer (org-capture-target-buffer path))</span>
<span id="cb8-34"><a href="#cb8-34" aria-hidden="true" tabindex="-1"></a>        (org-capture-put-target-region-and-position)</span>
<span id="cb8-35"><a href="#cb8-35" aria-hidden="true" tabindex="-1"></a>        (widen)))))</span></code></pre></div>
<p>Now it become a little bit more verbose, but this code is actually dead simple. It is borrowed from <code class="verbatim">org-capture-set-target-location</code> and unfortunately, I could not find a way to properly reuse it.</p>
<p>First we get a person note that we selected in <code class="verbatim">vulpea-capture-meeting-template</code> via <code class="verbatim">org-capture-get</code> and if it has an id, that means that we need to place the note under Meetings headline, otherwise it just goes straight to <code class="verbatim">vulpea-capture-inbox-file</code>.</p>
<p>That’s it!</p>
<h1 id="task-management-with-org-roam-series">Task Management with org-roam Series</h1>
<ol>
<li><a href="https://d12frosted.io/posts/2020-06-23-task-management-with-roam-vol1.html">Path to Roam</a></li>
<li><a href="https://d12frosted.io/posts/2020-06-24-task-management-with-roam-vol2.html">Categories</a></li>
<li><a href="https://d12frosted.io/posts/2020-06-25-task-management-with-roam-vol3.html">FILETAGS</a></li>
<li><a href="https://d12frosted.io/posts/2020-07-07-task-management-with-roam-vol4.html">Automatic tagging</a></li>
<li><a href="https://d12frosted.io/posts/2021-01-16-task-management-with-roam-vol5.html">Dynamic and fast agenda</a></li>
<li><a href="https://d12frosted.io/posts/2021-01-24-task-management-with-roam-vol6.html">Select a person and view related tasks</a></li>
<li><a href="https://d12frosted.io/posts/2021-05-21-task-management-with-roam-vol7.html">Capture</a></li>
</ol>
<h1 id="references">References</h1>
<ul>
<li><a href="https://orgmode.org/manual/Capture.html#Capture">Org Mode Capture</a></li>
<li><a href="https://orgmode.org/manual/Tag-Inheritance.html#Tag-Inheritance">Org Mode Tag Inheritance</a></li>
<li><a href="https://github.com/d12frosted/environment/blob/ec30dc1218c86578b4f655c717147cd70012a12e/emacs/lisp/lib-vulpea-capture.el">lib-vulpea-capture</a> - personal configurations for Org capture process</li>
</ul>
      </section>
    </article>

    <div class="footer-separator"></div>
    <div class="footer">
      <a target="_blank" class="post-footer-sources" href="https://github.com/d12frosted/d12frosted.io/blob/master/posts/2021-05-21-task-management-with-roam-vol7.org">Sources <i class="fa fa-code fa-lg"></i></a>
    </div>
    <script src="https://utteranc.es/client.js" repo="d12frosted/d12frosted.io" issue-term="pathname" label="comments" theme="github-light" crossorigin="anonymous" async>
    </script>

    <footer>
  <div>
      <p>
        Follow me on <a class="fa fa-github" href="https://github.com/d12frosted" title="GitHub profile">&nbsp GitHub</a>
      </p>
  </div>
</footer>

  </body>
</html>
]]></summary>
</entry>
<entry>
    <title>Fixing PATH in fish with nix-darwin</title>
    <link href="https://d12frosted.io/posts/2021-05-21-path-in-fish-with-nix-darwin.html" />
    <id>https://d12frosted.io/posts/2021-05-21-path-in-fish-with-nix-darwin.html</id>
    <published>2021-05-21T00:00:00Z</published>
    <updated>2021-05-21T00:00:00Z</updated>
    <summary type="html"><![CDATA[<!doctype html>
<html lang="en">
  <head>
    <title>Fixing PATH in fish with nix-darwin</title>
    <link rel="stylesheet" href="../css/post-bundle.css" />
    <meta charset="utf-8">
<meta http-equiv="x-ua-compatible" content="ie=edge">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="keywords" content="blog,programming,Haskell,Emacs,fish,bash">
<meta property="og:title" content="Boris Buliga">
<meta property="og:locale" content="es_US">
<meta property="og:url" content="https://d12frosted.io">

<link rel="apple-touch-icon" sizes="180x180" href="../apple-touch-icon.png">
<link rel="icon" type="image/png" sizes="32x32" href="../favicon-32x32.png">
<link rel="icon" type="image/png" sizes="16x16" href="../favicon-16x16.png">
<link rel="manifest" href="../site.webmanifest">

<link href="https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css" rel="stylesheet">
<script>
  MathJax = {
    svg: {
      fontCache: 'global'
    }
  };
</script>
<script type="text/javascript" id="MathJax-script" async src="../library/mathjax/es5/tex-svg.js">
</script>
<script src="../library/chart.js/dist/Chart.min.js"></script>
<script data-goatcounter="https://d12frosted.goatcounter.com/count" async src="//gc.zgo.at/count.js"></script>

    <meta name="description" content="Fixing PATH entries order when using fish and nix-darwin" />
    <meta name="twitter:card" content="summary">
    <meta name="twitter:description" content="Fixing PATH entries order when using fish and nix-darwin">
    <meta property="og:description" content="Fixing PATH entries order when using fish and nix-darwin">
  </head>
  <body>
    <header>
      <nav>
  <ul>
    <li><a class="fa fa-home" href="../" title="Home">&nbsp Home</a></li>
    <li><a class="fa fa-suitcase" href="../projects.html" title="Projects">&nbsp Projects</a></li>
    <li><a class="fa fa-rss" href="../atom.xml" title="RSS">&nbsp RSS</a></li>
    <li><a class="fa fa-github" href="https://github.com/d12frosted" title="GitHub profile">&nbsp GitHub</a></li>
  </ul>
</nav>

    </header>

    <h1 class="post-title">Fixing PATH in fish with nix-darwin</h1>
    <div class="date"><span>May 21, 2021</span></div>
    <div class="tags"><span>(<a title="All pages tagged 'nix'." href="../tags/nix.html">nix</a>, <a title="All pages tagged 'fish'." href="../tags/fish.html">fish</a>)</span></div>
    <article>
      <section>
        <p>During migration to <code class="verbatim">nix</code> for package and system management in <a href="https://github.com/d12frosted/environment/pull/11">environment#11</a>, I’ve encountered an issue with <code class="verbatim">PATH</code> variable containing seemingly correct entries, but in incorrect order when using <code class="verbatim">fish</code>. Basically, <code class="verbatim">$HOME/.nix-profile/bin</code> is put in the end. Since I am very new to <code class="verbatim">nix</code> ecosystem (using it for few days), it was not clear what is causing this issue (my configuration, <code class="verbatim">nix-home-manager</code>, <code class="verbatim">nix-darwin</code> or <code class="verbatim">fish</code> itself), so I decided to investigate. While it turned out to be a <a href="https://github.com/LnL7/nix-darwin/issues/122">known issue</a>, I learned a little bit in the process and found a local fix, which I am sharing in the end of the post.</p>
<!--more-->

<p>When <code class="verbatim">bash</code> is set as user shell, the value of <code class="verbatim">PATH</code> is good expect for repeating values.</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> echo <span class="va">$PATH</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="ex">/Users/d12frosted/.nix-profile/bin:</span> <span class="dt">\</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>  /nix/var/nix/profiles/default/bin: <span class="dt">\</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>  /usr/local/bin: <span class="dt">\</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>  /usr/bin: <span class="dt">\</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>  /bin: <span class="dt">\</span></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a>  /usr/sbin: <span class="dt">\</span></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a>  /sbin: <span class="dt">\</span></span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a>  /Library/TeX/texbin: <span class="dt">\</span></span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a>  /usr/local/MacGPG2/bin: <span class="dt">\</span></span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a>  /opt/X11/bin: <span class="dt">\</span></span>
<span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a>  /Library/Apple/usr/bin: <span class="dt">\</span></span>
<span id="cb1-13"><a href="#cb1-13" aria-hidden="true" tabindex="-1"></a>  /Users/d12frosted/.nix-profile/bin: <span class="dt">\</span></span>
<span id="cb1-14"><a href="#cb1-14" aria-hidden="true" tabindex="-1"></a>  /run/current-system/sw/bin: <span class="dt">\</span></span>
<span id="cb1-15"><a href="#cb1-15" aria-hidden="true" tabindex="-1"></a>  /nix/var/nix/profiles/default/bin</span></code></pre></div>
<p>The important part here is <code class="verbatim">$HOME/.nix-profile/bin</code> being the first item in this list, which is expected and desired, because we want binaries installed via package manager (in this case <code class="verbatim">nix</code>) to shadow any built-in binaries (common with <code class="verbatim">coreutils</code> package).</p>
<p>But when <code class="verbatim">fish</code> is used as user shell, the list doesn’t contain any duplicates, but <code class="verbatim">$HOME/.nix-profile/bin</code> and <code class="verbatim">/nix/var/nix/profiles/default/bin</code> are placed in the end.</p>
<pre class="fish"><code>$ echo $PATH
/usr/local/bin \
  /usr/bin \
  /bin \
  /usr/sbin \
  /sbin \
  /opt/X11/bin \
  /Library/Apple/usr/bin \
  /usr/local/MacGPG2/bin \
  /Library/TeX/texbin \
  /Users/d12frosted/.nix-profile/bin \
  /run/current-system/sw/bin \
  /nix/var/nix/profiles/default/bin
</code></pre>
<p>And I become curious about reasons behind difference of these values and possible solution. Since I am very new to <code class="verbatim">nix</code> ecosystem, I decided to start with something more familiar - <code class="verbatim">fish</code>. It turns out, that it’s possible to debug variable modifications with <code class="verbatim">fish</code> by using <a href="https://fishshell.com/docs/current/index.html#event">event handlers</a>, which we can put somewhere in the very beginning of <a href="https://fishshell.com/docs/current/index.html#initialization">initialization</a> process, which is <code class="verbatim">$__fish_data_dir/config.fish</code> - configuration file shipped with <code class="verbatim">fish</code> itself that is loaded first. In general no one should ever modify this file, but we are debugging, so it’s fine. I also use <a href="https://fishshell.com/docs/current/cmds/status.html#cmd-status">status</a> function to display extra information (mostly interested in stack trace).</p>
<pre class="fish"><code># Add these lines to the very beginning of $__fish_data_dir/config.fish
# /nix/store/r5brs3gn4amxbl1mrl4433inlghwl1r0-fish-3.2.2/share/fish/config.fish
echo &quot;PATH before initialisation &gt; $PATH&quot;

function __notice_path_change -d &quot;Notice PATH changes&quot; --on-variable PATH
  echo &quot;PATH has changed to $PATH&quot;
  status
end
</code></pre>
<p>After firing a new <code class="verbatim">fish</code> session, I see the following output in terminal emulator.</p>
<pre class="example"><code>PATH before initialisation &gt; /Users/d12frosted/.nix-profile/bin:/run/current-system/sw/bin:/nix/var/nix/profiles/default/bin:/usr/local/bin:/usr/bin:/usr/sbin:/bin:/sbin:/Users/d12frosted/.config/bin:/Users/d12frosted/.local/bin
PATH has changed to /usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/opt/X11/bin:/Library/Apple/usr/bin:/usr/local/MacGPG2/bin:/Library/TeX/texbin:/Users/d12frosted/.nix-profile/bin:/run/current-system/sw/bin:/nix/var/nix/profiles/default/bin:/Users/d12frosted/.config/bin:/Users/d12frosted/.local/bin
This is a login shell
Job control: Only on interactive jobs
in function '__notice_path_change' with arguments 'VARIABLE SET PATH'
  called on line 1 of file /nix/store/r5brs3gn4amxbl1mrl4433inlghwl1r0-fish-3.2.2/share/fish/config.fish
in event handler: handler for variable “PATH”
  called on line 198 of file /nix/store/r5brs3gn4amxbl1mrl4433inlghwl1r0-fish-3.2.2/share/fish/config.fish
PATH has changed to /usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/opt/X11/bin:/Library/Apple/usr/bin:/usr/local/MacGPG2/bin:/Library/TeX/texbin:/Users/d12frosted/.nix-profile/bin:/run/current-system/sw/bin:/nix/var/nix/profiles/default/bin:/Users/d12frosted/.config/bin:/Users/d12frosted/.local/bin
This is a login shell
Job control: Only on interactive jobs
in function '__notice_path_change' with arguments 'VARIABLE SET PATH'
  called on line 1 of file /nix/store/r5brs3gn4amxbl1mrl4433inlghwl1r0-fish-3.2.2/share/fish/config.fish
in event handler: handler for variable “PATH”
  called on line 129 of file /nix/store/r5brs3gn4amxbl1mrl4433inlghwl1r0-fish-3.2.2/share/fish/config.fish
Welcome to fish, the friendly interactive shell
Type help for instructions on how to use fish

[17:37:38] @MacBook-Pro ~
λ
</code></pre>
<p>So as you can see, the value of <code class="verbatim">PATH</code> is almost correct before <code class="verbatim">fish</code> is loaded. The value is in correct order, but lacks few entries. And then it gets the missing entries, but also gets reordered on line 198 of <code class="verbatim">$__fish_data_dir/config.fish</code>.</p>
<p>Turns out, <code class="verbatim">fish</code> mimics behaviour of <code class="verbatim">path_helper</code> macOS (BSD) utility, which makes sure that entries from <code class="verbatim">/etc/paths</code> file and all files under <code class="verbatim">/etc/paths.d/</code> are present in the <code class="verbatim">PATH</code>.</p>
<pre class="example"><code>path_helper(8)                       Nixpkgs System Manager's Manual                       path_helper(8)

NAME
     path_helper — helper for constructing PATH environment variable

SYNOPSIS
     path_helper [-c | -s]

DESCRIPTION
     The path_helper utility reads the contents of the files in the directories /etc/paths.d and
     /etc/manpaths.d and appends their contents to the PATH and MANPATH environment variables respec‐
     tively.  (The MANPATH environment variable will not be modified unless it is already set in the en‐
     vironment.)

     Files in these directories should contain one path element per line.

     Prior to reading these directories, default PATH and MANPATH values are obtained from the files
     /etc/paths and /etc/manpaths respectively.

     Options:

     -c      Generate C-shell commands on stdout.  This is the default if SHELL ends with &quot;csh&quot;.

     -s      Generate Bourne shell commands on stdout.  This is the default if SHELL does not end with
             &quot;csh&quot;.

NOTE
     The path_helper utility should not be invoked directly.  It is intended only for use by the shell
     profile.

Mac OS X                                      March 15, 2007                                     Mac OS X
</code></pre>
<p>And this is how it’s implemented in <code class="verbatim">fish</code> (inside <code class="verbatim">$__fish_data_dir/config.fish</code>):</p>
<pre class="fish"><code>#
# Some things should only be done for login terminals
# This used to be in etc/config.fish - keep it here to keep the semantics
#
if status --is-login
    if command -sq /usr/libexec/path_helper
        # Adapt construct_path from the macOS /usr/libexec/path_helper
        # executable for fish; see
        # https://opensource.apple.com/source/shell_cmds/shell_cmds-203/path_helper/path_helper.c.auto.html .
        function __fish_macos_set_env -d &quot;set an environment variable like path_helper does (macOS only)&quot;
            set -l result

            # Populate path according to config files
            for path_file in $argv[2] $argv[3]/*
                if [ -f $path_file ]
                    while read -l entry
                        if not contains -- $entry $result
                            test -n &quot;$entry&quot;
                            and set -a result $entry
                        end
                    end &lt;$path_file
                end
            end

            # Merge in any existing path elements
            for existing_entry in $$argv[1]
                if not contains -- $existing_entry $result
                    set -a result $existing_entry
                end
            end

            set -xg $argv[1] $result
        end

        __fish_macos_set_env PATH /etc/paths '/etc/paths.d'
        if [ -n &quot;$MANPATH&quot; ]
            __fish_macos_set_env MANPATH /etc/manpaths '/etc/manpaths.d'
        end
        functions -e __fish_macos_set_env
    end

    # ...
end
</code></pre>
<p>In short, it constructs a list of entries from <code class="verbatim">/etc/paths</code> file plus files from <code class="verbatim">/etc/paths.d</code> and appends to the result all missing entries from <code class="verbatim">PATH</code> variable. Since <code class="verbatim">$HOME/.nix-profile/bin</code> is not in <code class="verbatim">/etc/paths</code>, it is added to the end of the result.</p>
<p>I am not sure why this mechanism exists in the first place, I suspect that it’s needed for building proper <code class="verbatim">PATH</code> during system loading and for operation of macOS applications (which is a constant source of confusion). If anyone knows more, please share your knowledge via comments or email, I will include better explanations instead of my speculations.</p>
<p>While we learned the reason this value is incorrect, it’s still unclear how and by whom <code class="verbatim">PATH</code> is fixed when using <code class="verbatim">bash</code> and how to fix it in <code class="verbatim">fish</code>.</p>
<p>By quick inspection of contents of <code class="verbatim">/run/current-system</code> and <code class="verbatim">/run/current-system/etc</code>, I find an interesting file <code class="verbatim">/run/current-system/etc/bashrc</code>.</p>
<pre class="example"><code>λ la /run/current-system/
total 68K
dr-xr-xr-x    15 root wheel   480 Jan  1  1970 .
drwxrwxr-t 11741 root nixbld 367K May 20 09:14 ..
lrwxr-xr-x     1 root wheel    76 Jan  1  1970 Applications -&gt; /nix/store/4w1af25hb32hqd31sh7pwm4vd00dpzw2-system-applications/Applications
dr-xr-xr-x     5 root wheel   160 Jan  1  1970 Library
-r-xr-xr-x     1 root wheel   40K Jan  1  1970 activate
-r-xr-xr-x     1 root wheel  6.9K Jan  1  1970 activate-user
dr-xr-xr-x     2 root wheel    64 Jan  1  1970 darwin
-r--r--r--     1 root wheel  4.2K Jan  1  1970 darwin-changes
-r--r--r--     1 root wheel    38 Jan  1  1970 darwin-version
lrwxr-xr-x     1 root wheel    51 Jan  1  1970 etc -&gt; /nix/store/5069ikh9adm1m98fjxisgp6m7bn5jzwa-etc/etc
lrwxr-xr-x     1 root wheel    59 Jan  1  1970 patches -&gt; /nix/store/l4dwcgs0zqh5z6b2b4z1wax4fwamg5fg-patches/patches
lrwxr-xr-x     1 root wheel    55 Jan  1  1970 sw -&gt; /nix/store/jj97rcxh8z2fnn45bcd9xwm08xi3vdcy-system-path
-r--r--r--     1 root wheel    13 Jan  1  1970 system
-r--r--r--     1 root wheel    96 Jan  1  1970 systemConfig
dr-xr-xr-x     3 root wheel    96 Jan  1  1970 user
</code></pre>
<pre class="example"><code>λ la /run/current-system/etc/
total 0
dr-xr-xr-x 9 root wheel 288 Jan  1  1970 .
dr-xr-xr-x 3 root wheel  96 Jan  1  1970 ..
lrwxr-xr-x 1 root wheel  54 Jan  1  1970 bashrc -&gt; /nix/store/b17sn0hfampy7fl1y0lf7nbckv2gfyvb-etc-bashrc
dr-xr-xr-x 5 root wheel 160 Jan  1  1970 fish
dr-xr-xr-x 4 root wheel 128 Jan  1  1970 nix
lrwxr-xr-x 1 root wheel  54 Jan  1  1970 shells -&gt; /nix/store/dyprd01kgm00asrnd7dv0rdmg1fk8855-etc-shells
lrwxr-xr-x 1 root wheel  54 Jan  1  1970 skhdrc -&gt; /nix/store/dd9hd30wlgbv4f2qfp1v863wm2wi8pkk-etc-skhdrc
dr-xr-xr-x 3 root wheel  96 Jan  1  1970 ssh
dr-xr-xr-x 3 root wheel  96 Jan  1  1970 ssl
</code></pre>
<div class="sourceCode" id="cb9"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a><span class="co"># content of /run/current-system/etc/bashrc</span></span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a><span class="co"># /etc/bashrc: DO NOT EDIT -- this file has been generated automatically.</span></span>
<span id="cb9-3"><a href="#cb9-3" aria-hidden="true" tabindex="-1"></a><span class="co"># This file is read for interactive shells.</span></span>
<span id="cb9-4"><a href="#cb9-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-5"><a href="#cb9-5" aria-hidden="true" tabindex="-1"></a><span class="bu">[</span> <span class="ot">-r</span> <span class="st">&quot;/etc/bashrc_</span><span class="va">$TERM_PROGRAM</span><span class="st">&quot;</span> <span class="bu">]</span> <span class="kw">&amp;&amp;</span> <span class="bu">.</span> <span class="st">&quot;/etc/bashrc_</span><span class="va">$TERM_PROGRAM</span><span class="st">&quot;</span></span>
<span id="cb9-6"><a href="#cb9-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-7"><a href="#cb9-7" aria-hidden="true" tabindex="-1"></a><span class="co"># Only execute this file once per shell.</span></span>
<span id="cb9-8"><a href="#cb9-8" aria-hidden="true" tabindex="-1"></a><span class="cf">if</span> <span class="bu">[</span> <span class="ot">-n</span> <span class="st">&quot;</span><span class="va">$__ETC_BASHRC_SOURCED</span><span class="st">&quot;</span> -o <span class="er">-n</span> <span class="st">&quot;</span><span class="va">$NOSYSBASHRC</span><span class="st">&quot;</span> ]<span class="kw">;</span> <span class="cf">then</span> <span class="cf">return</span><span class="kw">;</span> <span class="cf">fi</span></span>
<span id="cb9-9"><a href="#cb9-9" aria-hidden="true" tabindex="-1"></a><span class="va">__ETC_BASHRC_SOURCED</span><span class="op">=</span>1</span>
<span id="cb9-10"><a href="#cb9-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-11"><a href="#cb9-11" aria-hidden="true" tabindex="-1"></a><span class="co"># Don't execute this file when running in a pure nix-shell.</span></span>
<span id="cb9-12"><a href="#cb9-12" aria-hidden="true" tabindex="-1"></a><span class="cf">if</span> <span class="bu">test</span> <span class="at">-n</span> <span class="st">&quot;</span><span class="va">$IN_NIX_SHELL</span><span class="st">&quot;</span><span class="kw">;</span> <span class="cf">then</span> <span class="cf">return</span><span class="kw">;</span> <span class="cf">fi</span></span>
<span id="cb9-13"><a href="#cb9-13" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-14"><a href="#cb9-14" aria-hidden="true" tabindex="-1"></a><span class="cf">if</span> <span class="bu">[</span> <span class="ot">-z</span> <span class="st">&quot;</span><span class="va">$__NIX_DARWIN_SET_ENVIRONMENT_DONE</span><span class="st">&quot;</span> <span class="bu">]</span><span class="kw">;</span> <span class="cf">then</span></span>
<span id="cb9-15"><a href="#cb9-15" aria-hidden="true" tabindex="-1"></a>  <span class="bu">.</span> /nix/store/arcg1b2dbhmhj31xnm2f4xxgfsrzpnph-set-environment</span>
<span id="cb9-16"><a href="#cb9-16" aria-hidden="true" tabindex="-1"></a><span class="cf">fi</span></span>
<span id="cb9-17"><a href="#cb9-17" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-18"><a href="#cb9-18" aria-hidden="true" tabindex="-1"></a><span class="co"># Return early if not running interactively, but after basic nix setup.</span></span>
<span id="cb9-19"><a href="#cb9-19" aria-hidden="true" tabindex="-1"></a><span class="kw">[[</span> <span class="va">$-</span> <span class="ot">!=</span> <span class="pp">*</span>i<span class="pp">*</span> <span class="kw">]]</span> <span class="kw">&amp;&amp;</span> <span class="cf">return</span></span>
<span id="cb9-20"><a href="#cb9-20" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-21"><a href="#cb9-21" aria-hidden="true" tabindex="-1"></a><span class="co"># Make bash check its window size after a process completes</span></span>
<span id="cb9-22"><a href="#cb9-22" aria-hidden="true" tabindex="-1"></a><span class="bu">shopt</span> <span class="at">-s</span> checkwinsize</span>
<span id="cb9-23"><a href="#cb9-23" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-24"><a href="#cb9-24" aria-hidden="true" tabindex="-1"></a><span class="co"># Read system-wide modifications.</span></span>
<span id="cb9-25"><a href="#cb9-25" aria-hidden="true" tabindex="-1"></a><span class="cf">if</span> <span class="bu">test</span> <span class="at">-f</span> /etc/bash.local<span class="kw">;</span> <span class="cf">then</span></span>
<span id="cb9-26"><a href="#cb9-26" aria-hidden="true" tabindex="-1"></a>  <span class="bu">source</span> /etc/bash.local</span>
<span id="cb9-27"><a href="#cb9-27" aria-hidden="true" tabindex="-1"></a><span class="cf">fi</span></span></code></pre></div>
<p>As you can see, it sources <code class="verbatim">/nix/store/arcg1b2dbhmhj31xnm2f4xxgfsrzpnph-set-environment</code> file, which basically makes sure that <code class="verbatim">$HOME/.nix-profile/bin</code> is at the beginning of <code class="verbatim">PATH</code>:</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a><span class="co"># content of /nix/store/arcg1b2dbhmhj31xnm2f4xxgfsrzpnph-set-environment</span></span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true" tabindex="-1"></a><span class="co"># Prevent this file from being sourced by child shells.</span></span>
<span id="cb10-3"><a href="#cb10-3" aria-hidden="true" tabindex="-1"></a><span class="bu">export</span> <span class="va">__NIX_DARWIN_SET_ENVIRONMENT_DONE</span><span class="op">=</span>1</span>
<span id="cb10-4"><a href="#cb10-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-5"><a href="#cb10-5" aria-hidden="true" tabindex="-1"></a><span class="bu">export</span> <span class="va">PATH</span><span class="op">=</span><span class="va">$HOME</span>/.nix-profile/bin:/run/current-system/sw/bin:/nix/var/nix/profiles/default/bin:/usr/local/bin:/usr/bin:/usr/sbin:/bin:/sbin</span>
<span id="cb10-6"><a href="#cb10-6" aria-hidden="true" tabindex="-1"></a><span class="bu">export</span> <span class="va">EDITOR</span><span class="op">=</span><span class="st">&quot;nano&quot;</span></span>
<span id="cb10-7"><a href="#cb10-7" aria-hidden="true" tabindex="-1"></a><span class="bu">export</span> <span class="va">NIX_PATH</span><span class="op">=</span><span class="st">&quot;ssh-auth-sock=/Users/d12frosted/.config/gnupg/S.gpg-agent.ssh:ssh-config-file=/Users/d12frosted/.config/.ssh/config&quot;</span></span>
<span id="cb10-8"><a href="#cb10-8" aria-hidden="true" tabindex="-1"></a><span class="bu">export</span> <span class="va">NIX_SSL_CERT_FILE</span><span class="op">=</span><span class="st">&quot;/etc/ssl/certs/ca-certificates.crt&quot;</span></span>
<span id="cb10-9"><a href="#cb10-9" aria-hidden="true" tabindex="-1"></a><span class="bu">export</span> <span class="va">PAGER</span><span class="op">=</span><span class="st">&quot;less -R&quot;</span></span>
<span id="cb10-10"><a href="#cb10-10" aria-hidden="true" tabindex="-1"></a><span class="bu">export</span> <span class="va">XDG_CONFIG_DIRS</span><span class="op">=</span><span class="st">&quot;</span><span class="va">$HOME</span><span class="st">/.nix-profile/etc/xdg:/run/current-system/sw/etc/xdg:/nix/var/nix/profiles/default/etc/xdg&quot;</span></span>
<span id="cb10-11"><a href="#cb10-11" aria-hidden="true" tabindex="-1"></a><span class="bu">export</span> <span class="va">XDG_DATA_DIRS</span><span class="op">=</span><span class="st">&quot;</span><span class="va">$HOME</span><span class="st">/.nix-profile/share:/run/current-system/sw/share:/nix/var/nix/profiles/default/share&quot;</span></span>
<span id="cb10-12"><a href="#cb10-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-13"><a href="#cb10-13" aria-hidden="true" tabindex="-1"></a><span class="co"># Extra initialisation</span></span>
<span id="cb10-14"><a href="#cb10-14" aria-hidden="true" tabindex="-1"></a><span class="co"># reset TERM with new TERMINFO available (if any)</span></span>
<span id="cb10-15"><a href="#cb10-15" aria-hidden="true" tabindex="-1"></a><span class="bu">export</span> <span class="va">TERM</span><span class="op">=</span><span class="va">$TERM</span></span>
<span id="cb10-16"><a href="#cb10-16" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-17"><a href="#cb10-17" aria-hidden="true" tabindex="-1"></a><span class="bu">export</span> <span class="va">NIX_USER_PROFILE_DIR</span><span class="op">=</span><span class="st">&quot;/nix/var/nix/profiles/per-user/</span><span class="va">$USER</span><span class="st">&quot;</span></span>
<span id="cb10-18"><a href="#cb10-18" aria-hidden="true" tabindex="-1"></a><span class="bu">export</span> <span class="va">NIX_PROFILES</span><span class="op">=</span><span class="st">&quot;/nix/var/nix/profiles/default /run/current-system/sw </span><span class="va">$HOME</span><span class="st">/.nix-profile&quot;</span></span>
<span id="cb10-19"><a href="#cb10-19" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-20"><a href="#cb10-20" aria-hidden="true" tabindex="-1"></a><span class="co"># Set up secure multi-user builds: non-root users build through the</span></span>
<span id="cb10-21"><a href="#cb10-21" aria-hidden="true" tabindex="-1"></a><span class="co"># Nix daemon.</span></span>
<span id="cb10-22"><a href="#cb10-22" aria-hidden="true" tabindex="-1"></a><span class="cf">if</span> <span class="bu">[</span> <span class="ot">!</span> <span class="ot">-w</span> /nix/var/nix/db <span class="bu">]</span><span class="kw">;</span> <span class="cf">then</span></span>
<span id="cb10-23"><a href="#cb10-23" aria-hidden="true" tabindex="-1"></a>    <span class="bu">export</span> <span class="va">NIX_REMOTE</span><span class="op">=</span>daemon</span>
<span id="cb10-24"><a href="#cb10-24" aria-hidden="true" tabindex="-1"></a><span class="cf">fi</span></span>
<span id="cb10-25"><a href="#cb10-25" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-26"><a href="#cb10-26" aria-hidden="true" tabindex="-1"></a><span class="ex">~</span></span></code></pre></div>
<p>So it seems that <code class="verbatim">nix-darwin</code> is fixing <code class="verbatim">PATH</code> for <code class="verbatim">bash</code>, but it doesn’t fix <code class="verbatim">PATH</code> for <code class="verbatim">fish</code>. While the issue is not fixed in the upstream, it’s easy to fix it locally by adding required values in <code class="verbatim">programs.fish.shellInit</code>.</p>
<p>Since I didn’t want to mess too much with specific values, instead, I simply remember the original value of <code class="verbatim">PATH</code> before <code class="verbatim">fish</code> reconstructed its path and then in my user <code class="verbatim">init</code> code I fix the order like this:</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode nix"><code class="sourceCode bash"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true" tabindex="-1"></a><span class="ex">programs</span> = {</span>
<span id="cb11-2"><a href="#cb11-2" aria-hidden="true" tabindex="-1"></a>  <span class="ex">fish.enable</span> = true<span class="kw">;</span></span>
<span id="cb11-3"><a href="#cb11-3" aria-hidden="true" tabindex="-1"></a>  <span class="ex">fish.shellInit</span> = <span class="st">''</span></span>
<span id="cb11-4"><a href="#cb11-4" aria-hidden="true" tabindex="-1"></a><span class="ex">__nixos_path_fix</span></span>
<span id="cb11-5"><a href="#cb11-5" aria-hidden="true" tabindex="-1"></a>  <span class="st">''</span><span class="kw">;</span></span>
<span id="cb11-6"><a href="#cb11-6" aria-hidden="true" tabindex="-1"></a><span class="er">}</span><span class="kw">;</span></span>
<span id="cb11-7"><a href="#cb11-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-8"><a href="#cb11-8" aria-hidden="true" tabindex="-1"></a><span class="co"># see https://github.com/LnL7/nix-darwin/issues/122</span></span>
<span id="cb11-9"><a href="#cb11-9" aria-hidden="true" tabindex="-1"></a><span class="ex">environment.etc.</span><span class="st">&quot;fish/nixos-env-preinit.fish&quot;</span><span class="ex">.text</span> = lib.mkMerge [</span>
<span id="cb11-10"><a href="#cb11-10" aria-hidden="true" tabindex="-1"></a>  <span class="kw">(</span><span class="ex">lib.mkBefore</span> <span class="st">''</span></span>
<span id="cb11-11"><a href="#cb11-11" aria-hidden="true" tabindex="-1"></a><span class="bu">set</span> <span class="at">-g</span> __nixos_path_original <span class="va">$PATH</span></span>
<span id="cb11-12"><a href="#cb11-12" aria-hidden="true" tabindex="-1"></a>    <span class="st">''</span><span class="kw">)</span></span>
<span id="cb11-13"><a href="#cb11-13" aria-hidden="true" tabindex="-1"></a>  <span class="kw">(</span><span class="ex">lib.mkAfter</span> <span class="st">''</span></span>
<span id="cb11-14"><a href="#cb11-14" aria-hidden="true" tabindex="-1"></a><span class="kw">function</span><span class="fu"> __nixos_path_fix</span> <span class="ex">-d</span> <span class="st">&quot;fix PATH value&quot;</span></span>
<span id="cb11-15"><a href="#cb11-15" aria-hidden="true" tabindex="-1"></a><span class="bu">set</span> <span class="at">-l</span> result <span class="er">(</span><span class="ex">string</span> replace <span class="st">'$HOME'</span> <span class="st">&quot;</span><span class="va">$HOME</span><span class="st">&quot;</span> <span class="va">$__nixos_path_original</span><span class="kw">)</span></span>
<span id="cb11-16"><a href="#cb11-16" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> elt <span class="kw">in</span> <span class="va">$PATH</span></span>
<span id="cb11-17"><a href="#cb11-17" aria-hidden="true" tabindex="-1"></a>  <span class="cf">if</span> <span class="ex">not</span> contains <span class="at">--</span> <span class="va">$elt</span> <span class="va">$result</span></span>
<span id="cb11-18"><a href="#cb11-18" aria-hidden="true" tabindex="-1"></a>    <span class="bu">set</span> <span class="at">-a</span> result <span class="va">$elt</span></span>
<span id="cb11-19"><a href="#cb11-19" aria-hidden="true" tabindex="-1"></a>  <span class="ex">end</span></span>
<span id="cb11-20"><a href="#cb11-20" aria-hidden="true" tabindex="-1"></a><span class="ex">end</span></span>
<span id="cb11-21"><a href="#cb11-21" aria-hidden="true" tabindex="-1"></a><span class="bu">set</span> <span class="at">-g</span> PATH <span class="va">$result</span></span>
<span id="cb11-22"><a href="#cb11-22" aria-hidden="true" tabindex="-1"></a><span class="ex">end</span></span>
<span id="cb11-23"><a href="#cb11-23" aria-hidden="true" tabindex="-1"></a> <span class="st">''</span><span class="kw">)</span></span>
<span id="cb11-24"><a href="#cb11-24" aria-hidden="true" tabindex="-1"></a><span class="ex">]</span><span class="kw">;</span></span></code></pre></div>
<p>Rebuild and enjoy <code class="verbatim">coreutils</code> and alike!</p>
<p>Safe travels.</p>
      </section>
    </article>

    <div class="footer-separator"></div>
    <div class="footer">
      <a target="_blank" class="post-footer-sources" href="https://github.com/d12frosted/d12frosted.io/blob/master/posts/2021-05-21-path-in-fish-with-nix-darwin.org">Sources <i class="fa fa-code fa-lg"></i></a>
    </div>
    <script src="https://utteranc.es/client.js" repo="d12frosted/d12frosted.io" issue-term="pathname" label="comments" theme="github-light" crossorigin="anonymous" async>
    </script>

    <footer>
  <div>
      <p>
        Follow me on <a class="fa fa-github" href="https://github.com/d12frosted" title="GitHub profile">&nbsp GitHub</a>
      </p>
  </div>
</footer>

  </body>
</html>
]]></summary>
</entry>
<entry>
    <title>Towards future-safe emacs.d</title>
    <link href="https://d12frosted.io/posts/2021-04-09-emacs-d.html" />
    <id>https://d12frosted.io/posts/2021-04-09-emacs-d.html</id>
    <published>2021-04-09T00:00:00Z</published>
    <updated>2021-04-09T00:00:00Z</updated>
    <summary type="html"><![CDATA[<!doctype html>
<html lang="en">
  <head>
    <title>Towards future-safe emacs.d</title>
    <link rel="stylesheet" href="../css/post-bundle.css" />
    <meta charset="utf-8">
<meta http-equiv="x-ua-compatible" content="ie=edge">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="keywords" content="blog,programming,Haskell,Emacs,fish,bash">
<meta property="og:title" content="Boris Buliga">
<meta property="og:locale" content="es_US">
<meta property="og:url" content="https://d12frosted.io">

<link rel="apple-touch-icon" sizes="180x180" href="../apple-touch-icon.png">
<link rel="icon" type="image/png" sizes="32x32" href="../favicon-32x32.png">
<link rel="icon" type="image/png" sizes="16x16" href="../favicon-16x16.png">
<link rel="manifest" href="../site.webmanifest">

<link href="https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css" rel="stylesheet">
<script>
  MathJax = {
    svg: {
      fontCache: 'global'
    }
  };
</script>
<script type="text/javascript" id="MathJax-script" async src="../library/mathjax/es5/tex-svg.js">
</script>
<script src="../library/chart.js/dist/Chart.min.js"></script>
<script data-goatcounter="https://d12frosted.goatcounter.com/count" async src="//gc.zgo.at/count.js"></script>

    <meta name="description" content="Boosting emacs.d development flow" />
    <meta name="twitter:card" content="summary">
    <meta name="twitter:description" content="Boosting emacs.d development flow">
    <meta property="og:description" content="Boosting emacs.d development flow">
  </head>
  <body>
    <header>
      <nav>
  <ul>
    <li><a class="fa fa-home" href="../" title="Home">&nbsp Home</a></li>
    <li><a class="fa fa-suitcase" href="../projects.html" title="Projects">&nbsp Projects</a></li>
    <li><a class="fa fa-rss" href="../atom.xml" title="RSS">&nbsp RSS</a></li>
    <li><a class="fa fa-github" href="https://github.com/d12frosted" title="GitHub profile">&nbsp GitHub</a></li>
  </ul>
</nav>

    </header>

    <h1 class="post-title">Towards future-safe emacs.d</h1>
    <div class="date"><span>April  9, 2021</span></div>
    <div class="tags"><span>(<a title="All pages tagged 'emacs'." href="../tags/emacs.html">emacs</a>)</span></div>
    <article>
      <section>
        <p><strong>TL;DR</strong> This post describes an approach to make byte compiler and various linters happy and <strong>useful</strong> in your <code class="verbatim">.emacs.d</code>, while maintaining startup performance, the ability to write embedded packages and test them. This is going to be a long post, so grab a bottle of wine, snacks and follow me. In case you lack these things, just take a look at <a href="https://d12frosted.io/posts/2021-04-09-emacs-d.html#solution">results</a>.</p>
<hr />

<p>The longest project in my life is <a href="https://github.com/d12frosted/environment">environment</a>, it started with <a href="https://github.com/d12frosted/environment/tree/master/emacs">Emacs configurations</a> - personal frustration and my biggest time <del>waster</del> investment. I might be masochistic, but I never felt sorry for falling into this <del>trap</del> world. And boy, sometimes it is painful to maintain something in this ever-mutating and dynamic system.</p>
<p>There are various tools to help maintaining Emacs package, all fall into one of four categories - project management tools (e.g. <a href="https://cask.readthedocs.io/en/latest/">Cask</a>, <a href="https://github.com/doublep/eldev/">doublep/eldev</a>, <a href="https://github.com/alphapapa/makem.sh">alphapapa/makem.sh</a>), compiler (e.g. built-in byte compiler), linters (e.g. <a href="https://github.com/purcell/package-lint">purcell/package-lint</a>, <a href="https://github.com/mattiase/relint">mattiase/relint</a>, <a href="https://github.com/gonewest818/elisp-lint/">gonewest818/elisp-lint</a>, <a href="https://github.com/emacs-elsa/Elsa">emacs-elsa/Elsa</a>) and test frameworks (e.g. <a href="https://www.gnu.org/software/emacs/manual/html_node/ert/index.html">ERT</a>, <a href="https://github.com/jorgenschaefer/emacs-buttercup">jorgenschaefer/emacs-buttercup</a>). The tricky part comes when you want to use them for maintaining your own Emacs configurations, as they have different requirements compared to regular Emacs packages. At least in my case, they do.</p>
<p>First of all, I want Emacs to start as quickly as possible (e.g. in less than a second), meaning that I need to use tools like <code class="verbatim">use-package</code> for deferred loading. So I can’t <code class="verbatim">require</code> most of the packages directly except those that are used in the bootstrapping process. This easily makes compiler sad.</p>
<p>Secondly, I have lots of additional functions extending or combining functionality of one or more packages. But I hate to define them inside <code class="verbatim">use-packge</code> macro. Aside from aesthetics, I want to retain functionality of <code class="verbatim">xref-find-definitions</code>. Having definitions outside of <code class="verbatim">use-package</code> means that I will get many false byte compiler warnings and errors. Which is not helpful!</p>
<p>Thirdly, bootstrap process is different as project management tools isolate your package development from your Emacs configurations, which makes sense in general, but doesn’t make sense when you develop the aforementioned configurations.</p>
<p>The closest approach I know about is <a href="https://github.com/hlissner/doom-emacs">hlissner/doom-emacs</a>, but even there <code class="verbatim">.emacs.d</code> is <a href="https://github.com/hlissner/doom-emacs/blob/46dedb3e3361535052d199e994b641dca2c2cffd/modules/lang/emacs-lisp/config.el#L14">ignored</a> by compiler. Let me just quote a docstring from there:</p>
<blockquote>
<p>This checker (flycheck) tends to produce a lot of false positives in your .emacs.d and private config, so it is mostly useless there. However, special hacks are employed so that flycheck still does <strong>some</strong> helpful linting.</p>
</blockquote>
<p>But it’s Emacs, right? Everything is possible! So let’s find a way to make byte compiler and linters helpful and enable testing of Emacs configurations.</p>
<div class="post-image post-image-split">
<img src="../images/emacs-d-1.png" /><img src="../images/emacs-d-2.png" />
</div>

<!--more-->

<p>Before we dive too much into details, let me describe the solution from higher level.</p>
<ul>
<li><a href="https://github.com/doublep/eldev/">doublep/eldev</a> is a project management tool because it’s powerful and extensible.</li>
<li><a href="https://github.com/raxod502/straight.el">raxod502/straight.el</a> is a package management tool because it’s consistent and reliable.</li>
<li><a href="https://github.com/jwiegley/use-package">jwiegley/use-package</a> is a package configuration tool with deferred loading because it’s easy to use and widely adopted.</li>
<li><a href="https://github.com/gonewest818/elisp-lint/">gonewest818/elisp-lint</a> is a linter because it aggregates many other linters.</li>
<li><a href="https://github.com/jorgenschaefer/emacs-buttercup">jorgenschaefer/emacs-buttercup</a> is a testing framework because it’s easy to use.</li>
</ul>
<p>The structure of my <code class="verbatim">.emacs.d</code> looks like this:</p>
<pre class="example"><code>.
├── Eldev
├── Makefile
├── README.org
├── early-init.el
├── init.el
├── lisp
│   ├── config-aaa.el
│   ├── config-bbb.el
│   ├── ...
│   ├── config-zzz.el
│   ├── init-autoloads.el
│   ├── init-elpa.el
│   ├── init-aaa.el
│   ├── init-bbb.el
│   ├── ...
│   ├── init-zzz.el
│   ├── lib-aaa.el
│   ├── lib-bbb.el
│   ├── ...
│   ├── lib-zzz.el
├── templates
│   ├── emacs-lisp-mode
│   │   ├── template_1
│   │   ├── ...
│   │   └── template_n
│   └── haskell-mode
│       ├── template_1
│       ├── ...
│       └── template_n
├── test
│   ├── lib-aaa-test.el
│   ├── lib-bbb-test.el
│   ├── ...
└── └── lib-zzz-test.el
</code></pre>
<p>As you can see, all lisp files are located inside of <code class="verbatim">lisp</code> directory (you should not put them on the same level as <code class="verbatim">init.el</code> file as that directory can’t be part of <code class="verbatim">load-path</code>), and all tests are located inside of <code class="verbatim">test</code> directory.</p>
<p>The following naming convention is used.</p>
<ul>
<li><code class="verbatim">init-xxx</code> is a file lazily initializing <code class="verbatim">xxx</code> feature, it can be a programming language (e.g. <code class="verbatim">init-haskell</code>) or a feature (e.g. <code class="verbatim">init-project</code>)
<ul>
<li>this is the only file type describing what packages to install, how to initialize and configure them;</li>
<li>it is safe to require these files, as they should defer any loading as much as possible;</li>
</ul></li>
<li><code class="verbatim">lib-xxx</code> is a file containing various utilities depending on packages defined in <code class="verbatim">init-xxx</code> file
<ul>
<li>these files are loaded via <a href="#autoloads">autoloads</a>, and they should never be required directly;</li>
<li>these files can safely <code class="verbatim">require</code> any packages defined in <code class="verbatim">init-xxx</code> to help linter and byte compiler;</li>
<li>in some sense, <code class="verbatim">lib-xxx</code> are packages that are not distributed via MELPA, but rather located in <code class="verbatim">emacs.d</code> folder;</li>
<li>various extensions around <code class="verbatim">org-mode</code> called <code class="verbatim">vulpea</code> are good examples of <code class="verbatim">lib</code> files:
<ul>
<li><a href="https://github.com/d12frosted/environment/blob/6ffa964e77410b71058c3d1c43a2381a90bbc6aa/emacs/lisp/lib-vulpea-agenda.el">lib-vulpea-agenda.el</a></li>
<li><a href="https://github.com/d12frosted/environment/blob/6ffa964e77410b71058c3d1c43a2381a90bbc6aa/emacs/lisp/lib-vulpea-capture.el">lib-vulpea-capture.el</a></li>
<li><a href="https://github.com/d12frosted/environment/blob/6ffa964e77410b71058c3d1c43a2381a90bbc6aa/emacs/lisp/lib-vulpea-refile.el">lib-vulpea-refile.el</a></li>
<li><a href="https://github.com/d12frosted/environment/blob/6ffa964e77410b71058c3d1c43a2381a90bbc6aa/emacs/lisp/lib-vulpea-id.el">lib-vulpea-id.el</a></li>
<li><a href="https://github.com/d12frosted/environment/blob/6ffa964e77410b71058c3d1c43a2381a90bbc6aa/emacs/lisp/lib-vulpea.el">lib-vulpea.el</a></li>
</ul></li>
</ul></li>
<li><code class="verbatim">config-xxx</code> is a file containing variables and constants required by both <code class="verbatim">init-xxx</code> and <code class="verbatim">lib-xxx</code> files, allowing to avoid circular dependencies;
<ul>
<li>as they do not load any packages, it is safe to require this file from any other file;</li>
</ul></li>
</ul>
<p>The only exception from this convention is <code class="verbatim">init-autoloads.el</code> file containing <a href="#autoloads">autoloads</a>. Name comes from <code class="verbatim">init.el</code> file.</p>
<h1 id="content-of-early-init">Content of <code class="verbatim">early-init</code></h1>
<p>See <a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Early-Init-File.html">relevant section</a> in Emacs Help for more information on The Early Init File, introduced in Emacs 27.1. Basically, this file is great for frame customizations. In my case I love to disable as much clutter as possible:</p>
<div class="sourceCode" id="cb2" data-org-language="emacs-lisp"><pre class="sourceCode commonlisp"><code class="sourceCode commonlisp"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a>(add-to-list 'default-frame-alist '(tool-bar-lines . <span class="dv">0</span>))</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>(add-to-list 'default-frame-alist '(menu-bar-lines . <span class="dv">0</span>))</span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>(add-to-list 'default-frame-alist '(vertical-scroll-bars))</span></code></pre></div>
<p>This file is totally optional, you can safely omit it in your setup. But if you have any frame customization, putting them in <code class="verbatim">early-init</code> file might speed up your Emacs and fix some visual clutter upon startup.</p>
<h1 id="content-of-init.el">Content of <code class="verbatim">init.el</code></h1>
<p>The goal of this file is to <code class="verbatim">require</code> all <code class="verbatim">init-xxx</code> files. The structure is trivial:</p>
<ol>
<li>Add <code class="verbatim">lisp</code> folder to <code class="verbatim">load-path</code>, so we can use <code class="verbatim">require</code>.</li>
<li>Adjust garbage collection thresholds, so things run smoother.</li>
<li>Load <code class="verbatim">config-path</code> declaring various path constants.</li>
<li>Load <code class="verbatim">init-elpa</code> which ‘bootstraps’ your package and configuration management tools.</li>
<li>Load <a href="#autoloads">autoloads</a> file.</li>
<li>Load all other <code class="verbatim">init-xxx</code> files.</li>
<li>Load <code class="verbatim">custom-file</code>, even if you are not using <code class="verbatim">customize</code> interface, you need this to use <code class="verbatim">.dir-locals.el</code>.</li>
</ol>
<h2 id="add-lisp-directory-to-load-path">Add <code class="verbatim">lisp</code> directory to <code class="verbatim">load-path</code></h2>
<div class="sourceCode" id="cb3" data-org-language="emacs-lisp"><pre class="sourceCode commonlisp"><code class="sourceCode commonlisp"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="co">;; Since we might be running in CI or other environments, stick to</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a><span class="co">;; XDG_CONFIG_HOME value if possible.</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a>(<span class="kw">let</span> ((emacs-home (if-let ((xdg (getenv <span class="st">&quot;XDG_CONFIG_HOME&quot;</span>)))</span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a>                      (expand-file-name <span class="st">&quot;emacs/&quot;</span> xdg)</span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a>                    user-emacs-directory)))</span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a>  <span class="co">;; Add Lisp directory to `load-path'.</span></span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a>  (add-to-list 'load-path (expand-file-name <span class="st">&quot;lisp&quot;</span> emacs-home)))</span></code></pre></div>
<h2 id="garbage-collection-thresholds">Garbage collection thresholds</h2>
<p>Garbage collection is a huge contributor to startup time. We temporarily increase this value to prevent garbage collection from running, then reset it to some big number in <code class="verbatim">emacs-startup-hook</code>. I discovered this trick thanks to <a href="https://github.com/hlissner/doom-emacs/">hlissner/doom-emacs</a>. But it is widely used by many people, for example <a href="https://github.com/purcell/emacs.d">purcell/emacs.d</a>.</p>
<p>In addition it is a good idea to use <a href="https://github.com/emacsmirror/gcmh">emacsmirror/gcmh</a> (aka Garbage Collector Magic Hack) to improve performance of interactive functions.</p>
<div class="sourceCode" id="cb4" data-org-language="emacs-lisp"><pre class="sourceCode commonlisp"><code class="sourceCode commonlisp"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="co">;; Adjust garbage collection thresholds during startup, and thereafter</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a>(<span class="kw">let</span> ((normal-gc-cons-threshold (<span class="op">*</span> <span class="dv">20</span> <span class="dv">1024</span> <span class="dv">1024</span>))</span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a>      (init-gc-cons-threshold (<span class="op">*</span> <span class="dv">128</span> <span class="dv">1024</span> <span class="dv">1024</span>)))</span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a>  (<span class="kw">setq</span> gc-cons-threshold init-gc-cons-threshold)</span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a>  (add-hook 'emacs-startup-hook</span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a>            (<span class="kw">lambda</span> () (<span class="kw">setq</span> gc-cons-threshold</span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a>                             normal-gc-cons-threshold))))</span></code></pre></div>
<h2 id="bootstrap">Bootstrap</h2>
<div class="sourceCode" id="cb5" data-org-language="emacs-lisp"><pre class="sourceCode commonlisp"><code class="sourceCode commonlisp"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a>(<span class="kw">require</span> 'config-path)</span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a>(<span class="kw">require</span> 'init-elpa)</span></code></pre></div>
<p>Literally, that’s it. Checkout <a href="#content-of-init-elpa">content of <code class="verbatim">init-elpa</code></a> to find out how it works.</p>
<h2 id="setup-custom-file-location">Setup <code class="verbatim">custom-file</code> location</h2>
<p>Before we load anything, we should setup location of our <code class="verbatim">custom-file</code>, otherwise Emacs customization system will pollute our <code class="verbatim">init.el</code> file.</p>
<div class="sourceCode" id="cb6" data-org-language="emacs-lisp"><pre class="sourceCode commonlisp"><code class="sourceCode commonlisp"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a>(<span class="kw">setq</span> custom-file (concat path-local-dir <span class="st">&quot;custom.el&quot;</span>))</span></code></pre></div>
<p>The constant <code class="verbatim">path-local-dir</code> is defined in <code class="verbatim">config-path</code>:</p>
<div class="sourceCode" id="cb7" data-org-language="emacs-lisp"><pre class="sourceCode commonlisp"><code class="sourceCode commonlisp"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a>(defconst path-local-dir</span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a>  (concat</span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a>   (file-name-as-directory</span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a>    (<span class="kw">or</span> (getenv <span class="st">&quot;XDG_CACHE_HOME&quot;</span>)</span>
<span id="cb7-5"><a href="#cb7-5" aria-hidden="true" tabindex="-1"></a>        (concat path-home-dir <span class="st">&quot;.cache&quot;</span>)))</span>
<span id="cb7-6"><a href="#cb7-6" aria-hidden="true" tabindex="-1"></a>   <span class="st">&quot;emacs/&quot;</span>)</span>
<span id="cb7-7"><a href="#cb7-7" aria-hidden="true" tabindex="-1"></a>  <span class="st">&quot;The root directory for local Emacs files.</span></span>
<span id="cb7-8"><a href="#cb7-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-9"><a href="#cb7-9" aria-hidden="true" tabindex="-1"></a><span class="st">Use this as permanent storage for files that are safe to share</span></span>
<span id="cb7-10"><a href="#cb7-10" aria-hidden="true" tabindex="-1"></a><span class="st">across systems.&quot;</span>)</span></code></pre></div>
<h2 id="loading-autoloads">Loading autoloads</h2>
<div class="sourceCode" id="cb8" data-org-language="emacs-lisp"><pre class="sourceCode commonlisp"><code class="sourceCode commonlisp"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="co">;; load autoloads file</span></span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a>(<span class="kw">unless</span> elpa-bootstrap-p</span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a>  (<span class="kw">unless</span> (file-exists-p path-autoloads-file)</span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a>    (<span class="kw">error</span> <span class="st">&quot;Autoloads file doesn't exist, please run '%s'&quot;</span></span>
<span id="cb8-5"><a href="#cb8-5" aria-hidden="true" tabindex="-1"></a>           <span class="st">&quot;eru install emacs&quot;</span>))</span>
<span id="cb8-6"><a href="#cb8-6" aria-hidden="true" tabindex="-1"></a>  (<span class="kw">load</span> path-autoloads-file <span class="kw">nil</span> 'nomessage))</span></code></pre></div>
<p>The most important bit here is the last line, which loads file containing <a href="#autoloads">autoloads</a> and errors out if it doesn’t exist. We want to load this file before any other modules to make autoloaded functions available there. But of course we can’t load this file during bootstrap process which generates this file.</p>
<h2 id="loading-other-init-files">Loading other init files</h2>
<p>Now comes the easy part, we just load all <code class="verbatim">init-xxx</code> files that we have.</p>
<div class="sourceCode" id="cb9" data-org-language="emacs-lisp"><pre class="sourceCode commonlisp"><code class="sourceCode commonlisp"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a><span class="co">;; core</span></span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a>(<span class="kw">require</span> 'init-env)</span>
<span id="cb9-3"><a href="#cb9-3" aria-hidden="true" tabindex="-1"></a>(<span class="kw">require</span> 'init-kbd)</span>
<span id="cb9-4"><a href="#cb9-4" aria-hidden="true" tabindex="-1"></a>(<span class="kw">require</span> 'init-editor)</span>
<span id="cb9-5"><a href="#cb9-5" aria-hidden="true" tabindex="-1"></a><span class="co">;; ...</span></span>
<span id="cb9-6"><a href="#cb9-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-7"><a href="#cb9-7" aria-hidden="true" tabindex="-1"></a><span class="co">;; utilities</span></span>
<span id="cb9-8"><a href="#cb9-8" aria-hidden="true" tabindex="-1"></a>(<span class="kw">require</span> 'init-selection)</span>
<span id="cb9-9"><a href="#cb9-9" aria-hidden="true" tabindex="-1"></a>(<span class="kw">require</span> 'init-project)</span>
<span id="cb9-10"><a href="#cb9-10" aria-hidden="true" tabindex="-1"></a>(<span class="kw">require</span> 'init-vcs)</span>
<span id="cb9-11"><a href="#cb9-11" aria-hidden="true" tabindex="-1"></a>(<span class="kw">require</span> 'init-ide)</span>
<span id="cb9-12"><a href="#cb9-12" aria-hidden="true" tabindex="-1"></a>(<span class="kw">require</span> 'init-vulpea)</span>
<span id="cb9-13"><a href="#cb9-13" aria-hidden="true" tabindex="-1"></a>(<span class="kw">require</span> 'init-vino)</span>
<span id="cb9-14"><a href="#cb9-14" aria-hidden="true" tabindex="-1"></a>(<span class="kw">require</span> 'init-pdf)</span>
<span id="cb9-15"><a href="#cb9-15" aria-hidden="true" tabindex="-1"></a><span class="co">;; ...</span></span>
<span id="cb9-16"><a href="#cb9-16" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-17"><a href="#cb9-17" aria-hidden="true" tabindex="-1"></a><span class="co">;; languages</span></span>
<span id="cb9-18"><a href="#cb9-18" aria-hidden="true" tabindex="-1"></a>(<span class="kw">require</span> 'init-elisp)</span>
<span id="cb9-19"><a href="#cb9-19" aria-hidden="true" tabindex="-1"></a>(<span class="kw">require</span> 'init-haskell)</span>
<span id="cb9-20"><a href="#cb9-20" aria-hidden="true" tabindex="-1"></a>(<span class="kw">require</span> 'init-sh)</span>
<span id="cb9-21"><a href="#cb9-21" aria-hidden="true" tabindex="-1"></a><span class="co">;; ...</span></span></code></pre></div>
<p>While this might sound stupid to manually load files that has clear naming pattern, I still like to do it manually, because it helps byte compiler, it has less footprint on runtime performance, the list is not big and I rarely add new files. Another option would be to generate this list during ‘compilation’, but again, I would love to avoid any unnecessary complications.</p>
<h2 id="loading-custom-file">Loading <code class="verbatim">custom-file</code></h2>
<p>And the last thing to do is to load <code class="verbatim">custom-file</code>:</p>
<div class="sourceCode" id="cb10" data-org-language="emacs-lisp"><pre class="sourceCode commonlisp"><code class="sourceCode commonlisp"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a><span class="co">;; I don't use `customize' interface, but .dir-locals.el put 'safe'</span></span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true" tabindex="-1"></a><span class="co">;; variables into `custom-file'. And to be honest, I hate to allow</span></span>
<span id="cb10-3"><a href="#cb10-3" aria-hidden="true" tabindex="-1"></a><span class="co">;; them every time I restart Emacs.</span></span>
<span id="cb10-4"><a href="#cb10-4" aria-hidden="true" tabindex="-1"></a>(<span class="kw">when</span> (file-exists-p custom-file)</span>
<span id="cb10-5"><a href="#cb10-5" aria-hidden="true" tabindex="-1"></a>  (<span class="kw">load</span> custom-file <span class="kw">nil</span> 'nomessage))</span></code></pre></div>
<h1 id="content-of-init-elpa">Content of <code class="verbatim">init-elpa</code></h1>
<p>Part of our bootstrap process is setting up package management and package configuration tools, which is performed in <code class="verbatim">init-elpa</code> file.</p>
<h2 id="bootstrap-straight.el">Bootstrap <code class="verbatim">straight.el</code></h2>
<p>The bootstrap process of <a href="https://github.com/raxod502/straight.el">raxod502/straight.el</a> is quire simple and well documented in the official repository. Additionally, we want to avoid any modification checks at startup by setting the value of <code class="verbatim">straight-check-for-modifications</code> to <code class="verbatim">nil</code>, so everything runs faster. Also we want to install packages by default in <code class="verbatim">use-package</code> forms. And then everything is straight-forward.</p>
<div class="sourceCode" id="cb11" data-org-language="emacs-lisp"><pre class="sourceCode commonlisp"><code class="sourceCode commonlisp"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true" tabindex="-1"></a>(<span class="kw">require</span> 'config-path)</span>
<span id="cb11-2"><a href="#cb11-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-3"><a href="#cb11-3" aria-hidden="true" tabindex="-1"></a>(setq-default</span>
<span id="cb11-4"><a href="#cb11-4" aria-hidden="true" tabindex="-1"></a> straight-repository-branch <span class="st">&quot;develop&quot;</span></span>
<span id="cb11-5"><a href="#cb11-5" aria-hidden="true" tabindex="-1"></a> straight-check-for-modifications <span class="kw">nil</span></span>
<span id="cb11-6"><a href="#cb11-6" aria-hidden="true" tabindex="-1"></a> straight-use-package-by-default <span class="kw">t</span></span>
<span id="cb11-7"><a href="#cb11-7" aria-hidden="true" tabindex="-1"></a> straight-base-dir path-packages-dir)</span>
<span id="cb11-8"><a href="#cb11-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-9"><a href="#cb11-9" aria-hidden="true" tabindex="-1"></a>(<span class="kw">defvar</span><span class="fu"> bootstrap-version</span>)</span>
<span id="cb11-10"><a href="#cb11-10" aria-hidden="true" tabindex="-1"></a>(<span class="kw">let</span> ((bootstrap-file</span>
<span id="cb11-11"><a href="#cb11-11" aria-hidden="true" tabindex="-1"></a>       (expand-file-name <span class="st">&quot;straight/repos/straight.el/bootstrap.el&quot;</span></span>
<span id="cb11-12"><a href="#cb11-12" aria-hidden="true" tabindex="-1"></a>                         path-packages-dir))</span>
<span id="cb11-13"><a href="#cb11-13" aria-hidden="true" tabindex="-1"></a>      (bootstrap-version <span class="dv">5</span>))</span>
<span id="cb11-14"><a href="#cb11-14" aria-hidden="true" tabindex="-1"></a>  (<span class="kw">unless</span> (file-exists-p bootstrap-file)</span>
<span id="cb11-15"><a href="#cb11-15" aria-hidden="true" tabindex="-1"></a>    (with-current-buffer</span>
<span id="cb11-16"><a href="#cb11-16" aria-hidden="true" tabindex="-1"></a>        (url-retrieve-synchronously</span>
<span id="cb11-17"><a href="#cb11-17" aria-hidden="true" tabindex="-1"></a>         (concat <span class="st">&quot;https://raw.githubusercontent.com/&quot;</span></span>
<span id="cb11-18"><a href="#cb11-18" aria-hidden="true" tabindex="-1"></a>                 <span class="st">&quot;raxod502/straight.el/&quot;</span></span>
<span id="cb11-19"><a href="#cb11-19" aria-hidden="true" tabindex="-1"></a>                 <span class="st">&quot;develop/install.el&quot;</span>)</span>
<span id="cb11-20"><a href="#cb11-20" aria-hidden="true" tabindex="-1"></a>         'silent 'inhibit-cookies)</span>
<span id="cb11-21"><a href="#cb11-21" aria-hidden="true" tabindex="-1"></a>      (goto-char (point-max))</span>
<span id="cb11-22"><a href="#cb11-22" aria-hidden="true" tabindex="-1"></a>      (eval-print-last-sexp)))</span>
<span id="cb11-23"><a href="#cb11-23" aria-hidden="true" tabindex="-1"></a>  (<span class="kw">load</span> bootstrap-file <span class="kw">nil</span> 'nomessage))</span></code></pre></div>
<p>The only bit I am not describing here is how I configure <a href="https://d12frosted.io/posts/2021-04-08-straight-el-retries.html">retries for networking operations</a>.</p>
<h2 id="setup-use-package">Setup <code class="verbatim">use-package</code></h2>
<p>Now it’s easy to setup <code class="verbatim">use-package</code>:</p>
<div class="sourceCode" id="cb12" data-org-language="emacs-lisp"><pre class="sourceCode commonlisp"><code class="sourceCode commonlisp"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true" tabindex="-1"></a>(setq-default</span>
<span id="cb12-2"><a href="#cb12-2" aria-hidden="true" tabindex="-1"></a> use-package-enable-imenu-support <span class="kw">t</span>)</span>
<span id="cb12-3"><a href="#cb12-3" aria-hidden="true" tabindex="-1"></a>(straight-use-package 'use-package)</span></code></pre></div>
<h2 id="popular-packages">Popular packages</h2>
<p>There are packages (or rather libraries) that should be loaded eagerly because they are used extensively and they do not provide autoloads.</p>
<div class="sourceCode" id="cb13" data-org-language="emacs-lisp"><pre class="sourceCode commonlisp"><code class="sourceCode commonlisp"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true" tabindex="-1"></a>(<span class="kw">use-package</span> s)</span>
<span id="cb13-2"><a href="#cb13-2" aria-hidden="true" tabindex="-1"></a>(<span class="kw">use-package</span> dash)</span></code></pre></div>
<h1 id="content-of-eldev">Content of Eldev</h1>
<p><code class="verbatim">Eldev</code> file defines our project. You can read more about this file in <a href="https://github.com/doublep/eldev/">doublep/eldev</a> repository.</p>
<h2 id="specify-project-files">Specify project files</h2>
<p>Eldev is quite powerful when it comes to fileset specification, but I find it not working properly with extra directories out of box. Since we can not place our lisp files in the same directory with <code class="verbatim">init.el</code> file, we configure <code class="verbatim">eldev-main-fileset</code> and add <code class="verbatim">lisp</code> folder to loading roots for certain commands.</p>
<div class="sourceCode" id="cb14" data-org-language="emacs-lisp"><pre class="sourceCode commonlisp"><code class="sourceCode commonlisp"><span id="cb14-1"><a href="#cb14-1" aria-hidden="true" tabindex="-1"></a>(<span class="kw">setf</span> eldev-project-main-file <span class="st">&quot;init.el&quot;</span></span>
<span id="cb14-2"><a href="#cb14-2" aria-hidden="true" tabindex="-1"></a>      eldev-main-fileset '(<span class="st">&quot;init.el&quot;</span></span>
<span id="cb14-3"><a href="#cb14-3" aria-hidden="true" tabindex="-1"></a>                           <span class="st">&quot;early-init.el&quot;</span></span>
<span id="cb14-4"><a href="#cb14-4" aria-hidden="true" tabindex="-1"></a>                           <span class="st">&quot;lisp/*.el&quot;</span>))</span>
<span id="cb14-5"><a href="#cb14-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-6"><a href="#cb14-6" aria-hidden="true" tabindex="-1"></a><span class="co">;; Emacs doesn't allow to add directory containing init.el to load</span></span>
<span id="cb14-7"><a href="#cb14-7" aria-hidden="true" tabindex="-1"></a><span class="co">;; path, so we have to put other Emacs Lisp files in directory. Help</span></span>
<span id="cb14-8"><a href="#cb14-8" aria-hidden="true" tabindex="-1"></a><span class="co">;; Eldev commands to locate them.</span></span>
<span id="cb14-9"><a href="#cb14-9" aria-hidden="true" tabindex="-1"></a>(eldev-add-loading-roots 'build <span class="st">&quot;lisp&quot;</span>)</span>
<span id="cb14-10"><a href="#cb14-10" aria-hidden="true" tabindex="-1"></a>(eldev-add-loading-roots 'bootstrap <span class="st">&quot;lisp&quot;</span>)</span></code></pre></div>
<h2 id="use-melpa">Use MELPA</h2>
<p>We are going to use certain 3rd party packages for project management (e.g. testing and linting), so we must tell Eldev where to load them from. This part is a little bit confusing as Eldev will install packages from MELPA and for our configurations we are going to use <code class="verbatim">straight.el</code>. But Eldev isolates these packages in it’s working dir and they will not interfere with our configurations. Ugly, but safe.</p>
<div class="sourceCode" id="cb15" data-org-language="emacs-lisp"><pre class="sourceCode commonlisp"><code class="sourceCode commonlisp"><span id="cb15-1"><a href="#cb15-1" aria-hidden="true" tabindex="-1"></a><span class="co">;; There are dependencies for testing and linting phases, they should</span></span>
<span id="cb15-2"><a href="#cb15-2" aria-hidden="true" tabindex="-1"></a><span class="co">;; be installed by Eldev from MELPA and GNU ELPA (latter is enabled by</span></span>
<span id="cb15-3"><a href="#cb15-3" aria-hidden="true" tabindex="-1"></a><span class="co">;; default).</span></span>
<span id="cb15-4"><a href="#cb15-4" aria-hidden="true" tabindex="-1"></a>(eldev-use-package-archive 'melpa)</span></code></pre></div>
<h2 id="define-bootstrap-command">Define bootstrap command</h2>
<p>Bootstrapping Emacs is simple, we just need to load <code class="verbatim">init.el</code> file.</p>
<div class="sourceCode" id="cb16" data-org-language="emacs-lisp"><pre class="sourceCode commonlisp"><code class="sourceCode commonlisp"><span id="cb16-1"><a href="#cb16-1" aria-hidden="true" tabindex="-1"></a>(<span class="kw">defun</span><span class="fu"> elpa-bootstrap </span>()</span>
<span id="cb16-2"><a href="#cb16-2" aria-hidden="true" tabindex="-1"></a>  <span class="st">&quot;Bootstrap personal configurations.&quot;</span></span>
<span id="cb16-3"><a href="#cb16-3" aria-hidden="true" tabindex="-1"></a>  (setq-default</span>
<span id="cb16-4"><a href="#cb16-4" aria-hidden="true" tabindex="-1"></a>   elpa-bootstrap-p <span class="kw">t</span></span>
<span id="cb16-5"><a href="#cb16-5" aria-hidden="true" tabindex="-1"></a>   load-prefer-newer <span class="kw">t</span>)</span>
<span id="cb16-6"><a href="#cb16-6" aria-hidden="true" tabindex="-1"></a>  (eldev--inject-loading-roots 'bootstrap)</span>
<span id="cb16-7"><a href="#cb16-7" aria-hidden="true" tabindex="-1"></a>  (<span class="kw">require</span> 'config-path)</span>
<span id="cb16-8"><a href="#cb16-8" aria-hidden="true" tabindex="-1"></a>  (<span class="kw">load</span> (expand-file-name <span class="st">&quot;init.el&quot;</span> path-emacs-dir)))</span>
<span id="cb16-9"><a href="#cb16-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb16-10"><a href="#cb16-10" aria-hidden="true" tabindex="-1"></a><span class="co">;; We want to run this before any build command. This is also needed</span></span>
<span id="cb16-11"><a href="#cb16-11" aria-hidden="true" tabindex="-1"></a><span class="co">;; for `flyspell-eldev` to be aware of packages installed via</span></span>
<span id="cb16-12"><a href="#cb16-12" aria-hidden="true" tabindex="-1"></a><span class="co">;; straight.el.</span></span>
<span id="cb16-13"><a href="#cb16-13" aria-hidden="true" tabindex="-1"></a>(add-hook 'eldev-build-system-hook #'elpa-bootstrap)</span></code></pre></div>
<p>We set the value of <code class="verbatim">elpa-bootstrap-p</code> to <code class="verbatim">t</code>, so that autoloads file is not required from <code class="verbatim">init.el</code> (we are going to generate it during bootstrap flow). We also set <code class="verbatim">load-prefer-newer</code> to <code class="verbatim">t</code> so that Emacs prefers newer files instead of byte compiled (again, we are going to compile <code class="verbatim">.el</code> to <code class="verbatim">.elc</code>).</p>
<p>We hook this function into any build command in order to install packages and get proper <code class="verbatim">load-path</code> in all phases.</p>
<h2 id="define-upgrade-command">Define upgrade command</h2>
<p>Upgrade flow is simple and uses <code class="verbatim">straight.el</code> functionality, because we use it to manage packages.</p>
<div class="sourceCode" id="cb17" data-org-language="emacs-lisp"><pre class="sourceCode commonlisp"><code class="sourceCode commonlisp"><span id="cb17-1"><a href="#cb17-1" aria-hidden="true" tabindex="-1"></a>(<span class="kw">defun</span><span class="fu"> elpa-upgrade </span>()</span>
<span id="cb17-2"><a href="#cb17-2" aria-hidden="true" tabindex="-1"></a>  <span class="st">&quot;Bootstrap personal configurations.&quot;</span></span>
<span id="cb17-3"><a href="#cb17-3" aria-hidden="true" tabindex="-1"></a>  <span class="co">;; make sure that bootstrap has completed</span></span>
<span id="cb17-4"><a href="#cb17-4" aria-hidden="true" tabindex="-1"></a>  (elpa-bootstrap)</span>
<span id="cb17-5"><a href="#cb17-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb17-6"><a href="#cb17-6" aria-hidden="true" tabindex="-1"></a>  <span class="co">;;  fetch all packages and then merge the latest version</span></span>
<span id="cb17-7"><a href="#cb17-7" aria-hidden="true" tabindex="-1"></a>  (straight-fetch-all)</span>
<span id="cb17-8"><a href="#cb17-8" aria-hidden="true" tabindex="-1"></a>  (straight-merge-all)</span>
<span id="cb17-9"><a href="#cb17-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb17-10"><a href="#cb17-10" aria-hidden="true" tabindex="-1"></a>  <span class="co">;; in case we pinned some versions, revert any unneccessary merge</span></span>
<span id="cb17-11"><a href="#cb17-11" aria-hidden="true" tabindex="-1"></a>  (straight-thaw-versions)</span>
<span id="cb17-12"><a href="#cb17-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb17-13"><a href="#cb17-13" aria-hidden="true" tabindex="-1"></a>  <span class="co">;; rebuild updated packages</span></span>
<span id="cb17-14"><a href="#cb17-14" aria-hidden="true" tabindex="-1"></a>  (<span class="kw">delete-file</span> (concat path-packages-dir <span class="st">&quot;straight/build-cache.el&quot;</span>))</span>
<span id="cb17-15"><a href="#cb17-15" aria-hidden="true" tabindex="-1"></a>  (delete-directory (concat path-packages-dir <span class="st">&quot;straight/build&quot;</span>) 'recursive)</span>
<span id="cb17-16"><a href="#cb17-16" aria-hidden="true" tabindex="-1"></a>  (straight-check-all))</span>
<span id="cb17-17"><a href="#cb17-17" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb17-18"><a href="#cb17-18" aria-hidden="true" tabindex="-1"></a>(add-hook 'eldev-upgrade-hook #'elpa-upgrade)</span></code></pre></div>
<h2 id="define-autoloads-plugin">Define autoloads plugin</h2>
<p>Now is the most dirty part - autoloads generation. Eldev provides a plugin for autoloads generation, but unfortunately it works only with root directory, but we need to generate our autoloads for files in <code class="verbatim">lisp</code> directory. So we write our own plugin.</p>
<div class="sourceCode" id="cb18" data-org-language="emacs-lisp"><pre class="sourceCode commonlisp"><code class="sourceCode commonlisp"><span id="cb18-1"><a href="#cb18-1" aria-hidden="true" tabindex="-1"></a><span class="co">;; We want to generate autoloads file. This line simply loads few</span></span>
<span id="cb18-2"><a href="#cb18-2" aria-hidden="true" tabindex="-1"></a><span class="co">;; helpers.</span></span>
<span id="cb18-3"><a href="#cb18-3" aria-hidden="true" tabindex="-1"></a>(eldev-use-plugin 'autoloads)</span>
<span id="cb18-4"><a href="#cb18-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb18-5"><a href="#cb18-5" aria-hidden="true" tabindex="-1"></a><span class="co">;; Eldev doesn't traverse extra loading roots, so we have to modify</span></span>
<span id="cb18-6"><a href="#cb18-6" aria-hidden="true" tabindex="-1"></a><span class="co">;; autoloads plugin a little bit. Basically, this modification</span></span>
<span id="cb18-7"><a href="#cb18-7" aria-hidden="true" tabindex="-1"></a><span class="co">;; achieves specific goal - generate autoloads from files located in</span></span>
<span id="cb18-8"><a href="#cb18-8" aria-hidden="true" tabindex="-1"></a><span class="co">;; Lisp directory.</span></span>
<span id="cb18-9"><a href="#cb18-9" aria-hidden="true" tabindex="-1"></a>(eldev-defbuilder eldev-builder-autoloads (sources target)</span>
<span id="cb18-10"><a href="#cb18-10" aria-hidden="true" tabindex="-1"></a>  <span class="bu">:type</span>           many-to-one</span>
<span id="cb18-11"><a href="#cb18-11" aria-hidden="true" tabindex="-1"></a>  :short-name     <span class="st">&quot;AUTOLOADS&quot;</span></span>
<span id="cb18-12"><a href="#cb18-12" aria-hidden="true" tabindex="-1"></a>  :message        target</span>
<span id="cb18-13"><a href="#cb18-13" aria-hidden="true" tabindex="-1"></a>  :source-files   (:and <span class="st">&quot;lisp/*.el&quot;</span> (:not (<span class="st">&quot;lisp/*autoloads.el&quot;</span>)))</span>
<span id="cb18-14"><a href="#cb18-14" aria-hidden="true" tabindex="-1"></a>  :targets        (<span class="kw">lambda</span> (_sources) <span class="st">&quot;lisp/init-autoloads.el&quot;</span>)</span>
<span id="cb18-15"><a href="#cb18-15" aria-hidden="true" tabindex="-1"></a>  :define-cleaner (eldev-cleaner-autoloads</span>
<span id="cb18-16"><a href="#cb18-16" aria-hidden="true" tabindex="-1"></a>                   <span class="st">&quot;Delete the generated package autoloads files.&quot;</span></span>
<span id="cb18-17"><a href="#cb18-17" aria-hidden="true" tabindex="-1"></a>                   <span class="bu">:default</span> <span class="kw">t</span>)</span>
<span id="cb18-18"><a href="#cb18-18" aria-hidden="true" tabindex="-1"></a>  :collect        (<span class="st">&quot;:autoloads&quot;</span>)</span>
<span id="cb18-19"><a href="#cb18-19" aria-hidden="true" tabindex="-1"></a>  <span class="co">;; To make sure that `update-directory-autoloads' doesn't grab files it shouldn't,</span></span>
<span id="cb18-20"><a href="#cb18-20" aria-hidden="true" tabindex="-1"></a>  <span class="co">;; override `directory-files' temporarily.</span></span>
<span id="cb18-21"><a href="#cb18-21" aria-hidden="true" tabindex="-1"></a>  (eldev-advised (#'directory-files</span>
<span id="cb18-22"><a href="#cb18-22" aria-hidden="true" tabindex="-1"></a>                  :around</span>
<span id="cb18-23"><a href="#cb18-23" aria-hidden="true" tabindex="-1"></a>                  (<span class="kw">lambda</span> (original <span class="kw">directory</span> &amp;<span class="kw">rest</span> arguments)</span>
<span id="cb18-24"><a href="#cb18-24" aria-hidden="true" tabindex="-1"></a>                    (<span class="kw">let</span> ((files (<span class="kw">apply</span> original <span class="kw">directory</span> arguments)))</span>
<span id="cb18-25"><a href="#cb18-25" aria-hidden="true" tabindex="-1"></a>                      (<span class="kw">if</span> (file-equal-p <span class="kw">directory</span> eldev-project-dir)</span>
<span id="cb18-26"><a href="#cb18-26" aria-hidden="true" tabindex="-1"></a>                          (<span class="kw">let</span> (filtered)</span>
<span id="cb18-27"><a href="#cb18-27" aria-hidden="true" tabindex="-1"></a>                            (<span class="kw">dolist</span> (file files)</span>
<span id="cb18-28"><a href="#cb18-28" aria-hidden="true" tabindex="-1"></a>                              (<span class="kw">when</span> (eldev-any-p (file-equal-p file it) sources)</span>
<span id="cb18-29"><a href="#cb18-29" aria-hidden="true" tabindex="-1"></a>                                (<span class="kw">push</span> file filtered)))</span>
<span id="cb18-30"><a href="#cb18-30" aria-hidden="true" tabindex="-1"></a>                            (<span class="kw">nreverse</span> filtered))</span>
<span id="cb18-31"><a href="#cb18-31" aria-hidden="true" tabindex="-1"></a>                        files))))</span>
<span id="cb18-32"><a href="#cb18-32" aria-hidden="true" tabindex="-1"></a>    (<span class="kw">let</span> ((inhibit-message   <span class="kw">t</span>)</span>
<span id="cb18-33"><a href="#cb18-33" aria-hidden="true" tabindex="-1"></a>          (make-backup-files <span class="kw">nil</span>)</span>
<span id="cb18-34"><a href="#cb18-34" aria-hidden="true" tabindex="-1"></a>          (pkg-dir (expand-file-name <span class="st">&quot;lisp/&quot;</span> eldev-project-dir)))</span>
<span id="cb18-35"><a href="#cb18-35" aria-hidden="true" tabindex="-1"></a>      (package-generate-autoloads (package-desc-name (eldev-package-descriptor)) pkg-dir)</span>
<span id="cb18-36"><a href="#cb18-36" aria-hidden="true" tabindex="-1"></a>      <span class="co">;; Always load the generated file.  Maybe there are cases when we don't need that,</span></span>
<span id="cb18-37"><a href="#cb18-37" aria-hidden="true" tabindex="-1"></a>      <span class="co">;; but most of the time we do.</span></span>
<span id="cb18-38"><a href="#cb18-38" aria-hidden="true" tabindex="-1"></a>      (eldev--load-autoloads-file (expand-file-name target eldev-project-dir)))))</span>
<span id="cb18-39"><a href="#cb18-39" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb18-40"><a href="#cb18-40" aria-hidden="true" tabindex="-1"></a><span class="co">;; Always load autoloads file.</span></span>
<span id="cb18-41"><a href="#cb18-41" aria-hidden="true" tabindex="-1"></a>(add-hook</span>
<span id="cb18-42"><a href="#cb18-42" aria-hidden="true" tabindex="-1"></a> 'eldev-build-system-hook</span>
<span id="cb18-43"><a href="#cb18-43" aria-hidden="true" tabindex="-1"></a> (<span class="kw">lambda</span> ()</span>
<span id="cb18-44"><a href="#cb18-44" aria-hidden="true" tabindex="-1"></a>   (eldev--load-autoloads-file</span>
<span id="cb18-45"><a href="#cb18-45" aria-hidden="true" tabindex="-1"></a>    (expand-file-name <span class="st">&quot;lisp/init-autoloads.el&quot;</span> eldev-project-dir))))</span></code></pre></div>
<h2 id="linting-configuration">Linting configuration</h2>
<p>And again, we need to tell Eldev which files to lint.</p>
<div class="sourceCode" id="cb19" data-org-language="emacs-lisp"><pre class="sourceCode commonlisp"><code class="sourceCode commonlisp"><span id="cb19-1"><a href="#cb19-1" aria-hidden="true" tabindex="-1"></a>(<span class="kw">defun</span><span class="fu"> eldev-lint-find-files-absolute </span>(f &amp;<span class="kw">rest</span> args)</span>
<span id="cb19-2"><a href="#cb19-2" aria-hidden="true" tabindex="-1"></a>  <span class="st">&quot;Call F with ARGS and ensure that result is absolute paths.&quot;</span></span>
<span id="cb19-3"><a href="#cb19-3" aria-hidden="true" tabindex="-1"></a>  (seq-map (<span class="kw">lambda</span> (p)</span>
<span id="cb19-4"><a href="#cb19-4" aria-hidden="true" tabindex="-1"></a>             (expand-file-name p eldev-project-dir))</span>
<span id="cb19-5"><a href="#cb19-5" aria-hidden="true" tabindex="-1"></a>           (seq-filter (<span class="kw">lambda</span> (p)</span>
<span id="cb19-6"><a href="#cb19-6" aria-hidden="true" tabindex="-1"></a>                         (<span class="kw">not</span> (string-suffix-p <span class="st">&quot;autoloads.el&quot;</span> p)))</span>
<span id="cb19-7"><a href="#cb19-7" aria-hidden="true" tabindex="-1"></a>                       (<span class="kw">apply</span> f args))))</span>
<span id="cb19-8"><a href="#cb19-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb19-9"><a href="#cb19-9" aria-hidden="true" tabindex="-1"></a>(advice-add 'eldev-lint-find-files :around #'eldev-lint-find-files-absolute)</span></code></pre></div>
<p>Then we ask Eldev to use <a href="https://github.com/gonewest818/elisp-lint/">gonewest818/elisp-lint</a> for linting and configure it a little bit.</p>
<div class="sourceCode" id="cb20" data-org-language="emacs-lisp"><pre class="sourceCode commonlisp"><code class="sourceCode commonlisp"><span id="cb20-1"><a href="#cb20-1" aria-hidden="true" tabindex="-1"></a><span class="co">;; Use elisp-lint by default</span></span>
<span id="cb20-2"><a href="#cb20-2" aria-hidden="true" tabindex="-1"></a>(<span class="kw">setf</span> eldev-lint-default '(elisp))</span>
<span id="cb20-3"><a href="#cb20-3" aria-hidden="true" tabindex="-1"></a>(with-eval-after-load 'elisp-lint</span>
<span id="cb20-4"><a href="#cb20-4" aria-hidden="true" tabindex="-1"></a>  (<span class="kw">setf</span> elisp-lint-ignored-validators '(<span class="st">&quot;byte-compile&quot;</span>)))</span>
<span id="cb20-5"><a href="#cb20-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb20-6"><a href="#cb20-6" aria-hidden="true" tabindex="-1"></a><span class="co">;; Tell checkdoc not to demand two spaces after a period.</span></span>
<span id="cb20-7"><a href="#cb20-7" aria-hidden="true" tabindex="-1"></a>(<span class="kw">setq</span> sentence-end-double-space <span class="kw">nil</span>)</span></code></pre></div>
<p>What I love about <a href="https://github.com/gonewest818/elisp-lint/">gonewest818/elisp-lint</a> is that it combines multiple linters, including <a href="https://github.com/purcell/package-lint">purcell/package-lint</a>. While <code class="verbatim">package-lint</code> is a useful linter, it enforces naming convention which I don’t agree with when it comes to Emacs configurations. E.g. it wants every function in <code class="verbatim">lib-vulpea.el</code> to have a prefix <code class="verbatim">lib-vulpea</code>. While in general it makes sense, I want to avoid <code class="verbatim">lib</code> part here. The same goes for <code class="verbatim">init</code> and <code class="verbatim">config</code> stuff. So we intrusively change that rule:</p>
<div class="sourceCode" id="cb21" data-org-language="emacs-lisp"><pre class="sourceCode commonlisp"><code class="sourceCode commonlisp"><span id="cb21-1"><a href="#cb21-1" aria-hidden="true" tabindex="-1"></a><span class="co">;; In general, `package-lint' is useful. But package prefix naming</span></span>
<span id="cb21-2"><a href="#cb21-2" aria-hidden="true" tabindex="-1"></a><span class="co">;; policy is not useful for personal configurations. So we chop</span></span>
<span id="cb21-3"><a href="#cb21-3" aria-hidden="true" tabindex="-1"></a><span class="co">;; lib/init part from the package name.</span></span>
<span id="cb21-4"><a href="#cb21-4" aria-hidden="true" tabindex="-1"></a><span class="co">;;</span></span>
<span id="cb21-5"><a href="#cb21-5" aria-hidden="true" tabindex="-1"></a><span class="co">;; And `eval-after-load'. In general it's not a good idea to use it in</span></span>
<span id="cb21-6"><a href="#cb21-6" aria-hidden="true" tabindex="-1"></a><span class="co">;; packages, but these are configurations.</span></span>
<span id="cb21-7"><a href="#cb21-7" aria-hidden="true" tabindex="-1"></a>(with-eval-after-load 'package-lint</span>
<span id="cb21-8"><a href="#cb21-8" aria-hidden="true" tabindex="-1"></a>  (<span class="kw">defun</span><span class="fu"> package-lint--package-prefix-cleanup </span>(f &amp;<span class="kw">rest</span> args)</span>
<span id="cb21-9"><a href="#cb21-9" aria-hidden="true" tabindex="-1"></a>    <span class="st">&quot;Call F with ARGS and cleanup it's result.&quot;</span></span>
<span id="cb21-10"><a href="#cb21-10" aria-hidden="true" tabindex="-1"></a>    (<span class="kw">let</span> ((r (<span class="kw">apply</span> f args)))</span>
<span id="cb21-11"><a href="#cb21-11" aria-hidden="true" tabindex="-1"></a>      (replace-regexp-in-string <span class="st">&quot;</span><span class="sc">\\</span><span class="st">(init</span><span class="sc">\\</span><span class="st">|lib</span><span class="sc">\\</span><span class="st">|config</span><span class="sc">\\</span><span class="st">|compat</span><span class="sc">\\</span><span class="st">)-?&quot;</span> <span class="st">&quot;&quot;</span> r)))</span>
<span id="cb21-12"><a href="#cb21-12" aria-hidden="true" tabindex="-1"></a>  (advice-add 'package-lint--get-package-prefix :around #'package-lint--package-prefix-cleanup)</span>
<span id="cb21-13"><a href="#cb21-13" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb21-14"><a href="#cb21-14" aria-hidden="true" tabindex="-1"></a>  (<span class="kw">defun</span><span class="fu"> package-lint--check-eval-after-load </span>()</span>
<span id="cb21-15"><a href="#cb21-15" aria-hidden="true" tabindex="-1"></a>    <span class="st">&quot;Do nothing.&quot;</span>))</span></code></pre></div>
<p>We also need <code class="verbatim">eval-after-load</code>, so let’s just noop. It makes sense to discourage usage of <code class="verbatim">eval-after-load</code> in packages, but in Emacs configurations it doesn’t make sense.</p>
<p>And the last bit is <code class="verbatim">emacsql</code>. I use <code class="verbatim">emacsql-fix-vector-indentation</code> to format my SQL statements, and I want linter to be happy about it:</p>
<div class="sourceCode" id="cb22" data-org-language="emacs-lisp"><pre class="sourceCode commonlisp"><code class="sourceCode commonlisp"><span id="cb22-1"><a href="#cb22-1" aria-hidden="true" tabindex="-1"></a><span class="co">;; Teach linter how to properly indent emacsql vectors.</span></span>
<span id="cb22-2"><a href="#cb22-2" aria-hidden="true" tabindex="-1"></a>(eldev-add-extra-dependencies 'lint 'emacsql)</span>
<span id="cb22-3"><a href="#cb22-3" aria-hidden="true" tabindex="-1"></a>(add-hook 'eldev-lint-hook</span>
<span id="cb22-4"><a href="#cb22-4" aria-hidden="true" tabindex="-1"></a>          (<span class="kw">lambda</span> ()</span>
<span id="cb22-5"><a href="#cb22-5" aria-hidden="true" tabindex="-1"></a>            (eldev-load-project-dependencies 'lint <span class="kw">nil</span> <span class="kw">t</span>)</span>
<span id="cb22-6"><a href="#cb22-6" aria-hidden="true" tabindex="-1"></a>            (<span class="kw">require</span> 'emacsql)</span>
<span id="cb22-7"><a href="#cb22-7" aria-hidden="true" tabindex="-1"></a>            (call-interactively #'emacsql-fix-vector-indentation)))</span></code></pre></div>
<h1 id="autoloads">autoloads</h1>
<p>Now that everything is configured, we can use <code class="verbatim">eldev</code> to bootstrap, compile, lint and test our configurations. The first thing we do is autoloads generation, which is as simple as</p>
<div class="sourceCode" id="cb23"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb23-1"><a href="#cb23-1" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> eldev build :autoloads</span></code></pre></div>
<p>Though I prefer to clean autoloads before generating new ones.</p>
<div class="sourceCode" id="cb24"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb24-1"><a href="#cb24-1" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> eldev clean autoloads</span>
<span id="cb24-2"><a href="#cb24-2" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> eldev build :autoloads</span></code></pre></div>
<p>This generates <code class="verbatim">lisp/init-autoloads.el</code> file. And in case you were wondering bout its content, then it looks like this:</p>
<div class="sourceCode" id="cb25" data-org-language="emacs-lisp"><pre class="sourceCode commonlisp"><code class="sourceCode commonlisp"><span id="cb25-1"><a href="#cb25-1" aria-hidden="true" tabindex="-1"></a><span class="co">;;; init-autoloads.el --- automatically extracted autoloads  -*- lexical-binding: t -*-</span></span>
<span id="cb25-2"><a href="#cb25-2" aria-hidden="true" tabindex="-1"></a><span class="co">;;</span></span>
<span id="cb25-3"><a href="#cb25-3" aria-hidden="true" tabindex="-1"></a><span class="co">;;; Code:</span></span>
<span id="cb25-4"><a href="#cb25-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb25-5"><a href="#cb25-5" aria-hidden="true" tabindex="-1"></a>(add-to-list 'load-path (directory-file-name</span>
<span id="cb25-6"><a href="#cb25-6" aria-hidden="true" tabindex="-1"></a>                         (<span class="kw">or</span> (file-name-directory #$) (<span class="kw">car</span> load-path))))</span>
<span id="cb25-7"><a href="#cb25-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb25-8"><a href="#cb25-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb25-9"><a href="#cb25-9" aria-hidden="true" tabindex="-1"></a><span class="co">;;;</span><span class="al">###</span><span class="co"> (autoloads nil &quot;config-path&quot; &quot;config-path.el&quot; (0 0 0 0))</span></span>
<span id="cb25-10"><a href="#cb25-10" aria-hidden="true" tabindex="-1"></a><span class="co">;;; Generated autoloads from config-path.el</span></span>
<span id="cb25-11"><a href="#cb25-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb25-12"><a href="#cb25-12" aria-hidden="true" tabindex="-1"></a>(register-definition-prefixes <span class="st">&quot;config-path&quot;</span> '(<span class="st">&quot;path-&quot;</span>))</span>
<span id="cb25-13"><a href="#cb25-13" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb25-14"><a href="#cb25-14" aria-hidden="true" tabindex="-1"></a><span class="co">;;;***</span></span>
<span id="cb25-15"><a href="#cb25-15" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb25-16"><a href="#cb25-16" aria-hidden="true" tabindex="-1"></a><span class="co">;;; ...</span></span>
<span id="cb25-17"><a href="#cb25-17" aria-hidden="true" tabindex="-1"></a><span class="co">;;; ...</span></span>
<span id="cb25-18"><a href="#cb25-18" aria-hidden="true" tabindex="-1"></a><span class="co">;;; ...</span></span>
<span id="cb25-19"><a href="#cb25-19" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb25-20"><a href="#cb25-20" aria-hidden="true" tabindex="-1"></a><span class="co">;;;</span><span class="al">###</span><span class="co"> (autoloads nil &quot;lib-buffer&quot; &quot;lib-buffer.el&quot; (0 0 0 0))</span></span>
<span id="cb25-21"><a href="#cb25-21" aria-hidden="true" tabindex="-1"></a><span class="co">;;; Generated autoloads from lib-buffer.el</span></span>
<span id="cb25-22"><a href="#cb25-22" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb25-23"><a href="#cb25-23" aria-hidden="true" tabindex="-1"></a>(autoload 'buffer-lines <span class="st">&quot;lib-buffer&quot;</span> <span class="st">&quot;\</span></span>
<span id="cb25-24"><a href="#cb25-24" aria-hidden="true" tabindex="-1"></a><span class="st">Return lines of BUFFER-OR-NAME.</span></span>
<span id="cb25-25"><a href="#cb25-25" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb25-26"><a href="#cb25-26" aria-hidden="true" tabindex="-1"></a><span class="st">Each line is a string with properties. Trailing newline character</span></span>
<span id="cb25-27"><a href="#cb25-27" aria-hidden="true" tabindex="-1"></a><span class="st">is not present.</span></span>
<span id="cb25-28"><a href="#cb25-28" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb25-29"><a href="#cb25-29" aria-hidden="true" tabindex="-1"></a><span class="st">\(fn BUFFER-OR-NAME)&quot;</span> <span class="kw">nil</span> <span class="kw">nil</span>)</span>
<span id="cb25-30"><a href="#cb25-30" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb25-31"><a href="#cb25-31" aria-hidden="true" tabindex="-1"></a>(autoload 'buffer-lines-map <span class="st">&quot;lib-buffer&quot;</span> <span class="st">&quot;\</span></span>
<span id="cb25-32"><a href="#cb25-32" aria-hidden="true" tabindex="-1"></a><span class="st">Call FN on each line of BUFFER-OR-NAME and return resulting list.</span></span>
<span id="cb25-33"><a href="#cb25-33" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb25-34"><a href="#cb25-34" aria-hidden="true" tabindex="-1"></a><span class="st">As opposed to `buffer-lines-each', this function accumulates</span></span>
<span id="cb25-35"><a href="#cb25-35" aria-hidden="true" tabindex="-1"></a><span class="st">result.</span></span>
<span id="cb25-36"><a href="#cb25-36" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb25-37"><a href="#cb25-37" aria-hidden="true" tabindex="-1"></a><span class="st">Each line is a string with properties. Trailing newline character</span></span>
<span id="cb25-38"><a href="#cb25-38" aria-hidden="true" tabindex="-1"></a><span class="st">is not present.</span></span>
<span id="cb25-39"><a href="#cb25-39" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb25-40"><a href="#cb25-40" aria-hidden="true" tabindex="-1"></a><span class="st">\(fn BUFFER-OR-NAME FN)&quot;</span> <span class="kw">nil</span> <span class="kw">nil</span>)</span>
<span id="cb25-41"><a href="#cb25-41" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb25-42"><a href="#cb25-42" aria-hidden="true" tabindex="-1"></a>(function-put 'buffer-lines-map 'lisp-indent-function '<span class="dv">1</span>)</span>
<span id="cb25-43"><a href="#cb25-43" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb25-44"><a href="#cb25-44" aria-hidden="true" tabindex="-1"></a><span class="co">;; ...</span></span>
<span id="cb25-45"><a href="#cb25-45" aria-hidden="true" tabindex="-1"></a><span class="co">;; ...</span></span>
<span id="cb25-46"><a href="#cb25-46" aria-hidden="true" tabindex="-1"></a><span class="co">;; ...</span></span>
<span id="cb25-47"><a href="#cb25-47" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb25-48"><a href="#cb25-48" aria-hidden="true" tabindex="-1"></a><span class="co">;;;***</span></span>
<span id="cb25-49"><a href="#cb25-49" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb25-50"><a href="#cb25-50" aria-hidden="true" tabindex="-1"></a><span class="co">;;;</span><span class="al">###</span><span class="co"> (autoloads nil &quot;lib-vulpea-agenda&quot; &quot;lib-vulpea-agenda.el&quot;</span></span>
<span id="cb25-51"><a href="#cb25-51" aria-hidden="true" tabindex="-1"></a><span class="co">;;;;;;  (0 0 0 0))</span></span>
<span id="cb25-52"><a href="#cb25-52" aria-hidden="true" tabindex="-1"></a><span class="co">;;; Generated autoloads from lib-vulpea-agenda.el</span></span>
<span id="cb25-53"><a href="#cb25-53" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb25-54"><a href="#cb25-54" aria-hidden="true" tabindex="-1"></a>(autoload 'vulpea-agenda-main <span class="st">&quot;lib-vulpea-agenda&quot;</span> <span class="st">&quot;\</span></span>
<span id="cb25-55"><a href="#cb25-55" aria-hidden="true" tabindex="-1"></a><span class="st">Show main `org-agenda' view.&quot;</span> <span class="kw">t</span> <span class="kw">nil</span>)</span>
<span id="cb25-56"><a href="#cb25-56" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb25-57"><a href="#cb25-57" aria-hidden="true" tabindex="-1"></a>(autoload 'vulpea-agenda-person <span class="st">&quot;lib-vulpea-agenda&quot;</span> <span class="st">&quot;\</span></span>
<span id="cb25-58"><a href="#cb25-58" aria-hidden="true" tabindex="-1"></a><span class="st">Show main `org-agenda' view.&quot;</span> <span class="kw">t</span> <span class="kw">nil</span>)</span>
<span id="cb25-59"><a href="#cb25-59" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb25-60"><a href="#cb25-60" aria-hidden="true" tabindex="-1"></a>(defconst vulpea-agenda-cmd-refile '(tags <span class="st">&quot;REFILE&quot;</span> ((org-agenda-overriding-header <span class="st">&quot;To refile&quot;</span>) (org-tags-match-list-sublevels <span class="kw">nil</span>))))</span>
<span id="cb25-61"><a href="#cb25-61" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb25-62"><a href="#cb25-62" aria-hidden="true" tabindex="-1"></a>(defconst vulpea-agenda-cmd-today '(agenda <span class="st">&quot;&quot;</span> ((org-agenda-span 'day) (org-agenda-skip-deadline-prewarning-if-scheduled <span class="kw">t</span>) (org-agenda-sorting-strategy '(habit-down time-up category-keep todo-state-down priority-down)))))</span>
<span id="cb25-63"><a href="#cb25-63" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb25-64"><a href="#cb25-64" aria-hidden="true" tabindex="-1"></a><span class="co">;;; ...</span></span>
<span id="cb25-65"><a href="#cb25-65" aria-hidden="true" tabindex="-1"></a><span class="co">;;; ...</span></span>
<span id="cb25-66"><a href="#cb25-66" aria-hidden="true" tabindex="-1"></a><span class="co">;;; ...</span></span>
<span id="cb25-67"><a href="#cb25-67" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb25-68"><a href="#cb25-68" aria-hidden="true" tabindex="-1"></a><span class="co">;;;***</span></span>
<span id="cb25-69"><a href="#cb25-69" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb25-70"><a href="#cb25-70" aria-hidden="true" tabindex="-1"></a><span class="co">;; Local Variables:</span></span>
<span id="cb25-71"><a href="#cb25-71" aria-hidden="true" tabindex="-1"></a><span class="co">;; version-control: never</span></span>
<span id="cb25-72"><a href="#cb25-72" aria-hidden="true" tabindex="-1"></a><span class="co">;; no-byte-compile: t</span></span>
<span id="cb25-73"><a href="#cb25-73" aria-hidden="true" tabindex="-1"></a><span class="co">;; no-update-autoloads: t</span></span>
<span id="cb25-74"><a href="#cb25-74" aria-hidden="true" tabindex="-1"></a><span class="co">;; coding: utf-8</span></span>
<span id="cb25-75"><a href="#cb25-75" aria-hidden="true" tabindex="-1"></a><span class="co">;; End:</span></span>
<span id="cb25-76"><a href="#cb25-76" aria-hidden="true" tabindex="-1"></a><span class="co">;;; init-autoloads.el ends here</span></span></code></pre></div>
<p>As you can see, it uses <code class="verbatim">autoload</code> to define a symbol (function or variable) and where to load it from. It also sets up indentation based on <code class="verbatim">decalre</code> from the body of function. And all constants are embedded as is, they are not getting autoloaded.</p>
<p>Please note that <code class="verbatim">eldev</code> commands need to be run with working directory pointing to the directory containing <code class="verbatim">Eldev</code> file, e.g. from <code class="verbatim">$XDG_CONFIG_HOME/emacs</code> or <code class="verbatim">$HOME/.config/emacs</code>.</p>
<h1 id="compiling">Compiling</h1>
<p>The second operation in the bootstrap process is byte compilation. It is said that byte compiled lisp executes <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Speed-of-Byte_002dCode.html">faster</a>, but there is also an experimental branch for native compilation called <a href="https://akrl.sdf.org/gccemacs.html">gccemacs</a>, which is also available via <a href="https://github.com/d12frosted/homebrew-emacs-plus/#gccemacs">emacs-plus</a>. Another aspect of byte compilation is… well <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Compilation-Functions.html">compilation</a> which produces valuable <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Compiler-Errors.html">warnings and errors</a>. In our setup it is very easy to compile all our <code class="verbatim">.el</code> files.</p>
<div class="sourceCode" id="cb26"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb26-1"><a href="#cb26-1" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> eldev clean elc</span>
<span id="cb26-2"><a href="#cb26-2" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> eldev compile</span></code></pre></div>
<p>That’s it.</p>
<h1 id="linting">Linting</h1>
<p>The third step of the bootstrap process is linting. Once everything compiles we just need to check what linter has to say. Just to remind, we are using <a href="https://github.com/gonewest818/elisp-lint/">gonewest818/elisp-lint</a>. As you might already figured, with Eldev this step as trivial as</p>
<div class="sourceCode" id="cb27"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb27-1"><a href="#cb27-1" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> eldev lint</span></code></pre></div>
<h1 id="testing">Testing</h1>
<p>And the last step of the bootstrap process is testing, which has two steps. First we simply load our configurations and make sure that nothing errors out and then we run test cases, for which we are using <a href="https://github.com/jorgenschaefer/emacs-buttercup">jorgenschaefer/emacs-buttercup</a> test framework. Interaction with eldev is trivial, again.</p>
<div class="sourceCode" id="cb28" data-org-language="emacs-lisp"><pre class="sourceCode commonlisp"><code class="sourceCode commonlisp"><span id="cb28-1"><a href="#cb28-1" aria-hidden="true" tabindex="-1"></a>$ eldev exec <span class="kw">t</span></span>
<span id="cb28-2"><a href="#cb28-2" aria-hidden="true" tabindex="-1"></a>$ eldev test</span></code></pre></div>
<p>Example of the test:</p>
<div class="sourceCode" id="cb29" data-org-language="emacs-lisp"><pre class="sourceCode commonlisp"><code class="sourceCode commonlisp"><span id="cb29-1"><a href="#cb29-1" aria-hidden="true" tabindex="-1"></a>(<span class="kw">require</span> 'buttercup)</span>
<span id="cb29-2"><a href="#cb29-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb29-3"><a href="#cb29-3" aria-hidden="true" tabindex="-1"></a>(<span class="kw">describe</span> <span class="st">&quot;buffer-content&quot;</span></span>
<span id="cb29-4"><a href="#cb29-4" aria-hidden="true" tabindex="-1"></a>  (it <span class="st">&quot;returns an empty string in empty buffer&quot;</span></span>
<span id="cb29-5"><a href="#cb29-5" aria-hidden="true" tabindex="-1"></a>    (<span class="kw">let*</span> ((current-buffer (current-buffer))</span>
<span id="cb29-6"><a href="#cb29-6" aria-hidden="true" tabindex="-1"></a>           (buffer (generate-new-buffer <span class="st">&quot;test-buffer&quot;</span>))</span>
<span id="cb29-7"><a href="#cb29-7" aria-hidden="true" tabindex="-1"></a>           (name (buffer-name buffer)))</span>
<span id="cb29-8"><a href="#cb29-8" aria-hidden="true" tabindex="-1"></a>      <span class="co">;; we can get content of the buffer by name</span></span>
<span id="cb29-9"><a href="#cb29-9" aria-hidden="true" tabindex="-1"></a>      (expect (buffer-content name) :to-equal <span class="st">&quot;&quot;</span>)</span>
<span id="cb29-10"><a href="#cb29-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb29-11"><a href="#cb29-11" aria-hidden="true" tabindex="-1"></a>      <span class="co">;; we can get content of the buffer by object</span></span>
<span id="cb29-12"><a href="#cb29-12" aria-hidden="true" tabindex="-1"></a>      (expect (buffer-content buffer) :to-equal <span class="st">&quot;&quot;</span>)</span>
<span id="cb29-13"><a href="#cb29-13" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb29-14"><a href="#cb29-14" aria-hidden="true" tabindex="-1"></a>      <span class="co">;; current buffer is not modified</span></span>
<span id="cb29-15"><a href="#cb29-15" aria-hidden="true" tabindex="-1"></a>      (expect (current-buffer) :to-equal current-buffer)))</span>
<span id="cb29-16"><a href="#cb29-16" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb29-17"><a href="#cb29-17" aria-hidden="true" tabindex="-1"></a>  (it <span class="st">&quot;returns content of non-empty buffer&quot;</span></span>
<span id="cb29-18"><a href="#cb29-18" aria-hidden="true" tabindex="-1"></a>    (<span class="kw">let*</span> ((current-buffer (current-buffer))</span>
<span id="cb29-19"><a href="#cb29-19" aria-hidden="true" tabindex="-1"></a>           (buffer (generate-new-buffer <span class="st">&quot;test-buffer&quot;</span>))</span>
<span id="cb29-20"><a href="#cb29-20" aria-hidden="true" tabindex="-1"></a>           (name (buffer-name buffer))</span>
<span id="cb29-21"><a href="#cb29-21" aria-hidden="true" tabindex="-1"></a>           (expected <span class="st">&quot;hello</span><span class="sc">\n</span><span class="st">my dear</span><span class="sc">\n</span><span class="st">frodo</span><span class="sc">\n</span><span class="st">&quot;</span>))</span>
<span id="cb29-22"><a href="#cb29-22" aria-hidden="true" tabindex="-1"></a>      (with-current-buffer buffer</span>
<span id="cb29-23"><a href="#cb29-23" aria-hidden="true" tabindex="-1"></a>        (insert expected))</span>
<span id="cb29-24"><a href="#cb29-24" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb29-25"><a href="#cb29-25" aria-hidden="true" tabindex="-1"></a>      <span class="co">;; we can get content of the buffer by name</span></span>
<span id="cb29-26"><a href="#cb29-26" aria-hidden="true" tabindex="-1"></a>      (expect (buffer-content name) :to-equal expected)</span>
<span id="cb29-27"><a href="#cb29-27" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb29-28"><a href="#cb29-28" aria-hidden="true" tabindex="-1"></a>      <span class="co">;; we can get content of the buffer by object</span></span>
<span id="cb29-29"><a href="#cb29-29" aria-hidden="true" tabindex="-1"></a>      (expect (buffer-content buffer) :to-equal expected)</span>
<span id="cb29-30"><a href="#cb29-30" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb29-31"><a href="#cb29-31" aria-hidden="true" tabindex="-1"></a>      <span class="co">;; current buffer is not modified</span></span>
<span id="cb29-32"><a href="#cb29-32" aria-hidden="true" tabindex="-1"></a>      (expect (current-buffer) :to-equal current-buffer))))</span></code></pre></div>
<p>And the output of testing might look like this:</p>
<pre class="example"><code>Running 2 specs.

buffer-content
  returns an empty string in empty buffer (27.47ms)
  returns content of non-empty buffer (0.38ms)

Ran 2 specs, 0 failed, in 37.85ms.
</code></pre>
<h1 id="upgrading">Upgrading</h1>
<p>Since we explicitly defined an upgrade command in Eldev, we can execute it as any other command:</p>
<div class="sourceCode" id="cb31"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb31-1"><a href="#cb31-1" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> eldev upgrade</span></code></pre></div>
<h1 id="makefile">Makefile</h1>
<p>Since certain operations consist of two steps (e.g. clean followed by build) and I also want to always pass extra arguments to <code class="verbatim">eldev</code> for verbosity and debuggability, I have a <code class="verbatim">Makefile</code> with all available commands.</p>
<div class="sourceCode" id="cb32"><pre class="sourceCode makefile"><code class="sourceCode makefile"><span id="cb32-1"><a href="#cb32-1" aria-hidden="true" tabindex="-1"></a><span class="ot">.PHONY:</span><span class="dt"> clean</span></span>
<span id="cb32-2"><a href="#cb32-2" aria-hidden="true" tabindex="-1"></a><span class="dv">clean:</span></span>
<span id="cb32-3"><a href="#cb32-3" aria-hidden="true" tabindex="-1"></a>  eldev clean all</span>
<span id="cb32-4"><a href="#cb32-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb32-5"><a href="#cb32-5" aria-hidden="true" tabindex="-1"></a><span class="ot">.PHONY:</span><span class="dt"> bootstrap</span></span>
<span id="cb32-6"><a href="#cb32-6" aria-hidden="true" tabindex="-1"></a><span class="dv">bootstrap:</span></span>
<span id="cb32-7"><a href="#cb32-7" aria-hidden="true" tabindex="-1"></a>  eldev clean autoloads</span>
<span id="cb32-8"><a href="#cb32-8" aria-hidden="true" tabindex="-1"></a>  eldev -C --unstable -a -dtT build :autoloads</span>
<span id="cb32-9"><a href="#cb32-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb32-10"><a href="#cb32-10" aria-hidden="true" tabindex="-1"></a><span class="ot">.PHONY:</span><span class="dt"> upgrade</span></span>
<span id="cb32-11"><a href="#cb32-11" aria-hidden="true" tabindex="-1"></a><span class="dv">upgrade:</span></span>
<span id="cb32-12"><a href="#cb32-12" aria-hidden="true" tabindex="-1"></a>  eldev -C --unstable -a -dtT upgrade</span>
<span id="cb32-13"><a href="#cb32-13" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb32-14"><a href="#cb32-14" aria-hidden="true" tabindex="-1"></a><span class="ot">.PHONY:</span><span class="dt"> compile</span></span>
<span id="cb32-15"><a href="#cb32-15" aria-hidden="true" tabindex="-1"></a><span class="dv">compile:</span></span>
<span id="cb32-16"><a href="#cb32-16" aria-hidden="true" tabindex="-1"></a>  eldev clean elc</span>
<span id="cb32-17"><a href="#cb32-17" aria-hidden="true" tabindex="-1"></a>  eldev -C --unstable -a -dtT compile</span>
<span id="cb32-18"><a href="#cb32-18" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb32-19"><a href="#cb32-19" aria-hidden="true" tabindex="-1"></a><span class="ot">.PHONY:</span><span class="dt"> lint</span></span>
<span id="cb32-20"><a href="#cb32-20" aria-hidden="true" tabindex="-1"></a><span class="dv">lint:</span></span>
<span id="cb32-21"><a href="#cb32-21" aria-hidden="true" tabindex="-1"></a>  eldev -C --unstable -a -dtT lint</span>
<span id="cb32-22"><a href="#cb32-22" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb32-23"><a href="#cb32-23" aria-hidden="true" tabindex="-1"></a><span class="ot">.PHONY:</span><span class="dt"> test</span></span>
<span id="cb32-24"><a href="#cb32-24" aria-hidden="true" tabindex="-1"></a><span class="dv">test:</span></span>
<span id="cb32-25"><a href="#cb32-25" aria-hidden="true" tabindex="-1"></a>  eldev exec t</span>
<span id="cb32-26"><a href="#cb32-26" aria-hidden="true" tabindex="-1"></a>  eldev -C --unstable -a -dtT test</span></code></pre></div>
<h1 id="org-roam">org-roam</h1>
<p>In addition, I love to build <a href="https://github.com/org-roam/org-roam/">org-roam</a> and <a href="https://github.com/d12frosted/vino">vino</a> databases during bootstrap process, so I don’t spend time on this when I use Emacs. For this I have defined the following function in my <code class="verbatim">lib-vulpea</code> file.</p>
<div class="sourceCode" id="cb33" data-org-language="emacs-lisp"><pre class="sourceCode commonlisp"><code class="sourceCode commonlisp"><span id="cb33-1"><a href="#cb33-1" aria-hidden="true" tabindex="-1"></a><span class="co">;;;###autoload</span></span>
<span id="cb33-2"><a href="#cb33-2" aria-hidden="true" tabindex="-1"></a>(<span class="kw">defun</span><span class="fu"> vulpea-db-build </span>()</span>
<span id="cb33-3"><a href="#cb33-3" aria-hidden="true" tabindex="-1"></a>  <span class="st">&quot;Update notes database.&quot;</span></span>
<span id="cb33-4"><a href="#cb33-4" aria-hidden="true" tabindex="-1"></a>  (<span class="kw">when</span> (file-directory-p vulpea-directory)</span>
<span id="cb33-5"><a href="#cb33-5" aria-hidden="true" tabindex="-1"></a>    (org-roam-db-build-cache)))</span></code></pre></div>
<p>Now we can evaluate this function from command line via <code class="verbatim">eldev</code>:</p>
<div class="sourceCode" id="cb34"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb34-1"><a href="#cb34-1" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> eldev exec <span class="st">&quot;(vulpea-db-build)&quot;</span></span></code></pre></div>
<p>If you are using <a href="https://github.com/d12frosted/vino">vino</a>, then <code class="verbatim">vulpea-db-build</code> also triggers vino database update, but since it <code class="verbatim">vino-setup</code> happens in <code class="verbatim">after-init-hook</code>, we need to run it before executing <code class="verbatim">vulpea-db-build</code>.</p>
<div class="sourceCode" id="cb35" data-org-language="emacs-lisp"><pre class="sourceCode commonlisp"><code class="sourceCode commonlisp"><span id="cb35-1"><a href="#cb35-1" aria-hidden="true" tabindex="-1"></a>(<span class="kw">use-package</span> vino</span>
<span id="cb35-2"><a href="#cb35-2" aria-hidden="true" tabindex="-1"></a>  <span class="co">;; unrelated code</span></span>
<span id="cb35-3"><a href="#cb35-3" aria-hidden="true" tabindex="-1"></a>  :hook ((after-init . vino-setup))</span>
<span id="cb35-4"><a href="#cb35-4" aria-hidden="true" tabindex="-1"></a>  <span class="co">;; unrelated code</span></span>
<span id="cb35-5"><a href="#cb35-5" aria-hidden="true" tabindex="-1"></a>  )</span></code></pre></div>
<p>So we change our <code class="verbatim">eldev</code> command a little bit.</p>
<div class="sourceCode" id="cb36"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb36-1"><a href="#cb36-1" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> eldev exec <span class="st">&quot;(progn (run-hooks 'after-init-hook) (vulpea-db-build))&quot;</span></span></code></pre></div>
<p>And we can put that into <code class="verbatim">Makefile</code>.</p>
<div class="sourceCode" id="cb37"><pre class="sourceCode makefile"><code class="sourceCode makefile"><span id="cb37-1"><a href="#cb37-1" aria-hidden="true" tabindex="-1"></a><span class="ot">.PHONY:</span><span class="dt"> roam</span></span>
<span id="cb37-2"><a href="#cb37-2" aria-hidden="true" tabindex="-1"></a><span class="dv">roam:</span></span>
<span id="cb37-3"><a href="#cb37-3" aria-hidden="true" tabindex="-1"></a>  eldev exec <span class="st">&quot;(progn (run-hooks 'after-init-hook) (vulpea-db-build))&quot;</span></span></code></pre></div>
<h1 id="eru">eru</h1>
<p>And the last yet optional bit of the whole puzzle is <a href="https://github.com/d12frosted/environment#eru-domain">Eru</a>, a script I use to setup and maintain my environment. I have it in my <code class="verbatim">PATH</code>, so I can rely on its might whenever I am. In short, I have the following commands:</p>
<div class="sourceCode" id="cb38"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb38-1"><a href="#cb38-1" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> eru install emacs <span class="co"># autoloads, compile, lint, roam</span></span>
<span id="cb38-2"><a href="#cb38-2" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> eru upgrade emacs</span>
<span id="cb38-3"><a href="#cb38-3" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> eru test emacs</span></code></pre></div>
<p>Since Eru is a beast, you might not want to use it, but the core idea here is that you can create an executable that will glue all things together for you.</p>
<div class="sourceCode" id="cb39"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb39-1"><a href="#cb39-1" aria-hidden="true" tabindex="-1"></a><span class="co">#!/usr/bin/env bash</span></span>
<span id="cb39-2"><a href="#cb39-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb39-3"><a href="#cb39-3" aria-hidden="true" tabindex="-1"></a><span class="bu">set</span> <span class="at">-e</span></span>
<span id="cb39-4"><a href="#cb39-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb39-5"><a href="#cb39-5" aria-hidden="true" tabindex="-1"></a><span class="va">ACTION</span><span class="op">=</span><span class="va">$1</span></span>
<span id="cb39-6"><a href="#cb39-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb39-7"><a href="#cb39-7" aria-hidden="true" tabindex="-1"></a><span class="va">emacs_d</span><span class="op">=</span><span class="va">$HOME</span>/.config/emacs</span>
<span id="cb39-8"><a href="#cb39-8" aria-hidden="true" tabindex="-1"></a><span class="cf">if</span> <span class="kw">[[</span> <span class="ot">-d</span> <span class="st">&quot;</span><span class="va">$XDG_CONFIG_HOME</span><span class="st">&quot;</span> <span class="kw">]];</span> <span class="cf">then</span></span>
<span id="cb39-9"><a href="#cb39-9" aria-hidden="true" tabindex="-1"></a>  <span class="va">emacs_d</span><span class="op">=</span><span class="st">&quot;</span><span class="va">$XDG_CONFIG_HOME</span><span class="st">/emacs&quot;</span></span>
<span id="cb39-10"><a href="#cb39-10" aria-hidden="true" tabindex="-1"></a><span class="cf">fi</span></span>
<span id="cb39-11"><a href="#cb39-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb39-12"><a href="#cb39-12" aria-hidden="true" tabindex="-1"></a><span class="kw">function</span><span class="fu"> print_usage()</span> <span class="kw">{</span></span>
<span id="cb39-13"><a href="#cb39-13" aria-hidden="true" tabindex="-1"></a>  <span class="bu">echo</span> <span class="st">&quot;Usage:</span></span>
<span id="cb39-14"><a href="#cb39-14" aria-hidden="true" tabindex="-1"></a><span class="st">  emacs-eru ACTION</span></span>
<span id="cb39-15"><a href="#cb39-15" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb39-16"><a href="#cb39-16" aria-hidden="true" tabindex="-1"></a><span class="st">Actions:</span></span>
<span id="cb39-17"><a href="#cb39-17" aria-hidden="true" tabindex="-1"></a><span class="st">  install               Install dependencies, compile and lint configurations</span></span>
<span id="cb39-18"><a href="#cb39-18" aria-hidden="true" tabindex="-1"></a><span class="st">  upgrade               Upgrade dependencies</span></span>
<span id="cb39-19"><a href="#cb39-19" aria-hidden="true" tabindex="-1"></a><span class="st">  test                  Test configurations</span></span>
<span id="cb39-20"><a href="#cb39-20" aria-hidden="true" tabindex="-1"></a><span class="st">&quot;</span></span>
<span id="cb39-21"><a href="#cb39-21" aria-hidden="true" tabindex="-1"></a><span class="kw">}</span></span>
<span id="cb39-22"><a href="#cb39-22" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb39-23"><a href="#cb39-23" aria-hidden="true" tabindex="-1"></a><span class="cf">if</span> <span class="bu">[</span> <span class="ot">-z</span> <span class="st">&quot;</span><span class="va">$ACTION</span><span class="st">&quot;</span> <span class="bu">]</span><span class="kw">;</span> <span class="cf">then</span></span>
<span id="cb39-24"><a href="#cb39-24" aria-hidden="true" tabindex="-1"></a>  <span class="bu">echo</span> <span class="st">&quot;No ACTION is provided&quot;</span></span>
<span id="cb39-25"><a href="#cb39-25" aria-hidden="true" tabindex="-1"></a>  <span class="ex">print_usage</span></span>
<span id="cb39-26"><a href="#cb39-26" aria-hidden="true" tabindex="-1"></a>  <span class="bu">exit</span> 1</span>
<span id="cb39-27"><a href="#cb39-27" aria-hidden="true" tabindex="-1"></a><span class="cf">fi</span></span>
<span id="cb39-28"><a href="#cb39-28" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb39-29"><a href="#cb39-29" aria-hidden="true" tabindex="-1"></a><span class="cf">case</span> <span class="st">&quot;</span><span class="va">$ACTION</span><span class="st">&quot;</span> <span class="kw">in</span></span>
<span id="cb39-30"><a href="#cb39-30" aria-hidden="true" tabindex="-1"></a>  <span class="ss">install</span><span class="kw">)</span></span>
<span id="cb39-31"><a href="#cb39-31" aria-hidden="true" tabindex="-1"></a>    <span class="bu">cd</span> <span class="st">&quot;</span><span class="va">$emacs_d</span><span class="st">&quot;</span> <span class="kw">&amp;&amp;</span> <span class="kw">{</span></span>
<span id="cb39-32"><a href="#cb39-32" aria-hidden="true" tabindex="-1"></a>      <span class="fu">make</span> bootstrap compile lint roam</span>
<span id="cb39-33"><a href="#cb39-33" aria-hidden="true" tabindex="-1"></a>    <span class="kw">}</span></span>
<span id="cb39-34"><a href="#cb39-34" aria-hidden="true" tabindex="-1"></a>    <span class="cf">;;</span></span>
<span id="cb39-35"><a href="#cb39-35" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb39-36"><a href="#cb39-36" aria-hidden="true" tabindex="-1"></a>  <span class="ss">upgrade</span><span class="kw">)</span></span>
<span id="cb39-37"><a href="#cb39-37" aria-hidden="true" tabindex="-1"></a>    <span class="bu">cd</span> <span class="st">&quot;</span><span class="va">$emacs_d</span><span class="st">&quot;</span> <span class="kw">&amp;&amp;</span> <span class="kw">{</span></span>
<span id="cb39-38"><a href="#cb39-38" aria-hidden="true" tabindex="-1"></a>      <span class="fu">make</span> upgrade compile lint</span>
<span id="cb39-39"><a href="#cb39-39" aria-hidden="true" tabindex="-1"></a>    <span class="kw">}</span></span>
<span id="cb39-40"><a href="#cb39-40" aria-hidden="true" tabindex="-1"></a>    <span class="cf">;;</span></span>
<span id="cb39-41"><a href="#cb39-41" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb39-42"><a href="#cb39-42" aria-hidden="true" tabindex="-1"></a>  <span class="ss">test</span><span class="kw">)</span></span>
<span id="cb39-43"><a href="#cb39-43" aria-hidden="true" tabindex="-1"></a>    <span class="bu">cd</span> <span class="st">&quot;</span><span class="va">$emacs_d</span><span class="st">&quot;</span> <span class="kw">&amp;&amp;</span> <span class="kw">{</span></span>
<span id="cb39-44"><a href="#cb39-44" aria-hidden="true" tabindex="-1"></a>      <span class="fu">make</span> test</span>
<span id="cb39-45"><a href="#cb39-45" aria-hidden="true" tabindex="-1"></a>    <span class="kw">}</span></span>
<span id="cb39-46"><a href="#cb39-46" aria-hidden="true" tabindex="-1"></a>    <span class="cf">;;</span></span>
<span id="cb39-47"><a href="#cb39-47" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb39-48"><a href="#cb39-48" aria-hidden="true" tabindex="-1"></a>  <span class="pp">*</span><span class="kw">)</span></span>
<span id="cb39-49"><a href="#cb39-49" aria-hidden="true" tabindex="-1"></a>    <span class="bu">echo</span> <span class="st">&quot;Unrecognized ACTION </span><span class="va">$ACTION</span><span class="st">&quot;</span></span>
<span id="cb39-50"><a href="#cb39-50" aria-hidden="true" tabindex="-1"></a>    <span class="ex">print_usage</span></span>
<span id="cb39-51"><a href="#cb39-51" aria-hidden="true" tabindex="-1"></a>    <span class="cf">;;</span></span>
<span id="cb39-52"><a href="#cb39-52" aria-hidden="true" tabindex="-1"></a><span class="cf">esac</span></span></code></pre></div>
<p>For convenience, this script is available as a <a href="https://gist.github.com/d12frosted/b150fcaaf2de06b1b29af487ebbbf9c1">GitHub Gist</a>, so you can download it, save in somewhere in your <code class="verbatim">PATH</code>, <code class="verbatim">chmod</code> it and use.</p>
<div class="sourceCode" id="cb40"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb40-1"><a href="#cb40-1" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> curl <span class="at">-o</span> ~/.local/bin/emacs-eru https://gist.githubusercontent.com/d12frosted/b150fcaaf2de06b1b29af487ebbbf9c1/raw/6fc70215afce2472e4f289c2c8500fbfc9a3f001/emacs-eru</span>
<span id="cb40-2"><a href="#cb40-2" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> chmod +x ~/.local/bin/emacs-eru</span></code></pre></div>
<h1 id="whats-next">What’s next</h1>
<p>Tinkering with Emacs, of course! This is an endless effort, constant struggle but most importantly, divine pleasure. On a serious note, I would love to cover most critical parts with tests and integrate <a href="https://github.com/emacs-elsa/Elsa">emacs-elsa/Elsa</a> into my flow. And I would love to hear from you, how do you approach safety problem of your <code class="verbatim">emacs.d</code>?</p>
<p>Safe travels!</p>
      </section>
    </article>

    <div class="footer-separator"></div>
    <div class="footer">
      <a target="_blank" class="post-footer-sources" href="https://github.com/d12frosted/d12frosted.io/blob/master/posts/2021-04-09-emacs-d.org">Sources <i class="fa fa-code fa-lg"></i></a>
    </div>
    <script src="https://utteranc.es/client.js" repo="d12frosted/d12frosted.io" issue-term="pathname" label="comments" theme="github-light" crossorigin="anonymous" async>
    </script>

    <footer>
  <div>
      <p>
        Follow me on <a class="fa fa-github" href="https://github.com/d12frosted" title="GitHub profile">&nbsp GitHub</a>
      </p>
  </div>
</footer>

  </body>
</html>
]]></summary>
</entry>
<entry>
    <title>Retries with straight.el</title>
    <link href="https://d12frosted.io/posts/2021-04-08-straight-el-retries.html" />
    <id>https://d12frosted.io/posts/2021-04-08-straight-el-retries.html</id>
    <published>2021-04-08T00:00:00Z</published>
    <updated>2021-04-08T00:00:00Z</updated>
    <summary type="html"><![CDATA[<!doctype html>
<html lang="en">
  <head>
    <title>Retries with straight.el</title>
    <link rel="stylesheet" href="../css/post-bundle.css" />
    <meta charset="utf-8">
<meta http-equiv="x-ua-compatible" content="ie=edge">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="keywords" content="blog,programming,Haskell,Emacs,fish,bash">
<meta property="og:title" content="Boris Buliga">
<meta property="og:locale" content="es_US">
<meta property="og:url" content="https://d12frosted.io">

<link rel="apple-touch-icon" sizes="180x180" href="../apple-touch-icon.png">
<link rel="icon" type="image/png" sizes="32x32" href="../favicon-32x32.png">
<link rel="icon" type="image/png" sizes="16x16" href="../favicon-16x16.png">
<link rel="manifest" href="../site.webmanifest">

<link href="https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css" rel="stylesheet">
<script>
  MathJax = {
    svg: {
      fontCache: 'global'
    }
  };
</script>
<script type="text/javascript" id="MathJax-script" async src="../library/mathjax/es5/tex-svg.js">
</script>
<script src="../library/chart.js/dist/Chart.min.js"></script>
<script data-goatcounter="https://d12frosted.goatcounter.com/count" async src="//gc.zgo.at/count.js"></script>

    <meta name="description" content="Snippet adding retries to network operations of straight.el - Emacs package manager" />
    <meta name="twitter:card" content="summary">
    <meta name="twitter:description" content="Snippet adding retries to network operations of straight.el - Emacs package manager">
    <meta property="og:description" content="Snippet adding retries to network operations of straight.el - Emacs package manager">
  </head>
  <body>
    <header>
      <nav>
  <ul>
    <li><a class="fa fa-home" href="../" title="Home">&nbsp Home</a></li>
    <li><a class="fa fa-suitcase" href="../projects.html" title="Projects">&nbsp Projects</a></li>
    <li><a class="fa fa-rss" href="../atom.xml" title="RSS">&nbsp RSS</a></li>
    <li><a class="fa fa-github" href="https://github.com/d12frosted" title="GitHub profile">&nbsp GitHub</a></li>
  </ul>
</nav>

    </header>

    <h1 class="post-title">Retries with straight.el</h1>
    <div class="date"><span>April  8, 2021</span></div>
    <div class="tags"><span>(<a title="All pages tagged 'emacs'." href="../tags/emacs.html">emacs</a>)</span></div>
    <article>
      <section>
        <p>We all know, network is unreliable. I love those moments when I decide to upgrade all my Emacs packages while connected via 3G. And since I am using <a href="https://github.com/raxod502/straight.el/">raxod502/straight.el</a>, the process requires to process each repository one by one. Now imagine my frustration, when due to unstable connection it fails on one of the repositories and I need to start the process again… from the beginning.</p>
<p>So I say, no more, <a href="https://github.com/raxod502/straight.el/">raxod502/straight.el</a> should retry read operations over network! Unfortunately, there is no such option out of box (or at least I could not find it). Luckily, it’s Emacs!</p>
<!--more-->

<p>First, we want to configure how many times we want to retry before actually failing.</p>
<div class="sourceCode" id="cb1" data-org-language="emacs-lisp"><pre class="sourceCode commonlisp"><code class="sourceCode commonlisp"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a>(<span class="kw">defvar</span><span class="fu"> elpa-straight-retry-count </span><span class="dv">3</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>  <span class="st">&quot;Amount of retries for `straight' operations.&quot;</span>)</span></code></pre></div>
<p>Secondly, we write a ‘generic’ function that simply retries some <code class="verbatim">orig-fn</code>. It simply evaluates a function, and if it fails, tries again in a <code class="verbatim">while</code> loop. It doesn’t report intermediate failures, if you wish to, it’s easy to do. But once it gets to the final error, it signals it back to the user.</p>
<div class="sourceCode" id="cb2" data-org-language="emacs-lisp"><pre class="sourceCode commonlisp"><code class="sourceCode commonlisp"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a>(<span class="kw">defun</span><span class="fu"> elpa-straight-with-retry </span>(orig-fn &amp;<span class="kw">rest</span> args)</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>  <span class="st">&quot;Wrapper around ORIG-FN supporting retries.</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a><span class="st">ORIG-FN is called with ARGS and retried</span></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a><span class="st">`elpa-straight-retry-count' times.&quot;</span></span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a>  (<span class="kw">let</span> ((n elpa-straight-retry-count)</span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a>        (res <span class="kw">nil</span>))</span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a>    (while (<span class="op">&gt;</span> n <span class="dv">0</span>)</span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a>      (condition-case err</span>
<span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a>          (<span class="kw">progn</span></span>
<span id="cb2-11"><a href="#cb2-11" aria-hidden="true" tabindex="-1"></a>            (<span class="kw">setq</span> res (<span class="kw">apply</span> orig-fn args)</span>
<span id="cb2-12"><a href="#cb2-12" aria-hidden="true" tabindex="-1"></a>                  n <span class="dv">0</span>)</span>
<span id="cb2-13"><a href="#cb2-13" aria-hidden="true" tabindex="-1"></a>            res)</span>
<span id="cb2-14"><a href="#cb2-14" aria-hidden="true" tabindex="-1"></a>        (<span class="kw">error</span></span>
<span id="cb2-15"><a href="#cb2-15" aria-hidden="true" tabindex="-1"></a>         (<span class="kw">setq</span> n (<span class="op">-</span> n <span class="dv">1</span>))</span>
<span id="cb2-16"><a href="#cb2-16" aria-hidden="true" tabindex="-1"></a>         (<span class="kw">unless</span> (<span class="op">&gt;</span> n <span class="dv">0</span>)</span>
<span id="cb2-17"><a href="#cb2-17" aria-hidden="true" tabindex="-1"></a>           (<span class="kw">signal</span> (<span class="kw">car</span> err) (<span class="kw">cdr</span> err))))))))</span></code></pre></div>
<p>Lastly, we need to wrap functions that do some networking. You see, thanks to <code class="verbatim">advice-add</code>, it’s so easy to do!</p>
<div class="sourceCode" id="cb3" data-org-language="emacs-lisp"><pre class="sourceCode commonlisp"><code class="sourceCode commonlisp"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a>(advice-add #'straight-fetch-package</span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a>            :around</span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a>            #'elpa-straight-with-retry)</span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a>(advice-add #'straight--clone-repository</span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a>            :around</span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a>            #'elpa-straight-with-retry)</span></code></pre></div>
<p>Now you might wonder, is it possible to apply <code class="verbatim">elpa-straight-with-retry</code> to other functions? Of course! Just give it a better name and enjoy your Emacs life full of retries.</p>
<p>Safe travels!</p>
      </section>
    </article>

    <div class="footer-separator"></div>
    <div class="footer">
      <a target="_blank" class="post-footer-sources" href="https://github.com/d12frosted/d12frosted.io/blob/master/posts/2021-04-08-straight-el-retries.org">Sources <i class="fa fa-code fa-lg"></i></a>
    </div>
    <script src="https://utteranc.es/client.js" repo="d12frosted/d12frosted.io" issue-term="pathname" label="comments" theme="github-light" crossorigin="anonymous" async>
    </script>

    <footer>
  <div>
      <p>
        Follow me on <a class="fa fa-github" href="https://github.com/d12frosted" title="GitHub profile">&nbsp GitHub</a>
      </p>
  </div>
</footer>

  </body>
</html>
]]></summary>
</entry>
<entry>
    <title>Task management with org-roam Vol. 6: Select a person and view related tasks</title>
    <link href="https://d12frosted.io/posts/2021-01-24-task-management-with-roam-vol6.html" />
    <id>https://d12frosted.io/posts/2021-01-24-task-management-with-roam-vol6.html</id>
    <published>2021-01-24T00:00:00Z</published>
    <updated>2021-01-24T00:00:00Z</updated>
    <summary type="html"><![CDATA[<!doctype html>
<html lang="en">
  <head>
    <title>Task management with org-roam Vol. 6: Select a person and view related tasks</title>
    <link rel="stylesheet" href="../css/post-bundle.css" />
    <meta charset="utf-8">
<meta http-equiv="x-ua-compatible" content="ie=edge">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="keywords" content="blog,programming,Haskell,Emacs,fish,bash">
<meta property="og:title" content="Boris Buliga">
<meta property="og:locale" content="es_US">
<meta property="og:url" content="https://d12frosted.io">

<link rel="apple-touch-icon" sizes="180x180" href="../apple-touch-icon.png">
<link rel="icon" type="image/png" sizes="32x32" href="../favicon-32x32.png">
<link rel="icon" type="image/png" sizes="16x16" href="../favicon-16x16.png">
<link rel="manifest" href="../site.webmanifest">

<link href="https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css" rel="stylesheet">
<script>
  MathJax = {
    svg: {
      fontCache: 'global'
    }
  };
</script>
<script type="text/javascript" id="MathJax-script" async src="../library/mathjax/es5/tex-svg.js">
</script>
<script src="../library/chart.js/dist/Chart.min.js"></script>
<script data-goatcounter="https://d12frosted.goatcounter.com/count" async src="//gc.zgo.at/count.js"></script>

    <meta name="description" content="How to select a person and list all related tasks" />
    <meta name="twitter:card" content="summary">
    <meta name="twitter:description" content="How to select a person and list all related tasks">
    <meta property="og:description" content="How to select a person and list all related tasks">
  </head>
  <body>
    <header>
      <nav>
  <ul>
    <li><a class="fa fa-home" href="../" title="Home">&nbsp Home</a></li>
    <li><a class="fa fa-suitcase" href="../projects.html" title="Projects">&nbsp Projects</a></li>
    <li><a class="fa fa-rss" href="../atom.xml" title="RSS">&nbsp RSS</a></li>
    <li><a class="fa fa-github" href="https://github.com/d12frosted" title="GitHub profile">&nbsp GitHub</a></li>
  </ul>
</nav>

    </header>

    <h1 class="post-title">Task management with org-roam Vol. 6: Select a person and view related tasks</h1>
    <div class="date"><span>January 24, 2021</span></div>
    <div class="tags"><span>(<a title="All pages tagged 'emacs'." href="../tags/emacs.html">emacs</a>, <a title="All pages tagged 'org-roam'." href="../tags/org-roam.html">org-roam</a>, <a title="All pages tagged 'org-mode'." href="../tags/org-mode.html">org-mode</a>)</span></div>
    <article>
      <section>
        <p>In one of the previous articles (<a href="https://d12frosted.io/posts/2020-06-25-task-management-with-roam-vol3.html">Vol 3</a> to be precise) we talked about automatic setup of <code class="verbatim">filetags</code>, so each of the task in note related to a person is automatically tagged thanks to <a href="https://orgmode.org/manual/Tag-Inheritance.html">tag inheritance</a>. Then, in <a href="https://d12frosted.io/posts/2020-07-07-task-management-with-roam-vol4.html">Vol 4</a> we talked about automatic tagging of tasks whenever a person is mentioned either in the title or the body of some task. This all makes <code class="verbatim">org-agenda</code> <a href="https://orgmode.org/manual/Matching-tags-and-properties.html#Matching-tags-and-properties">matching capabilities</a> really useful for when we want to see the list of all tasks related to specific person.</p>
<p>In this article, we are going to write a small utility function that asks user to select a person and then presents and <code class="verbatim">org-agenda</code> buffer with tasks related to selected person.</p>
<p>Believe me, intro is longer than the content!</p>
<div class="post-video">
<video autoplay loop>
  <source src="../images/org-notes-person-agenda.mp4" type="video/mp4">
  Your browser does not support the video tag.
</video>
</div>

<p><strong>Change Log:</strong></p>
<ul>
<li><code>[2021-03-02 Tue]</code>: Update naming convention to match <a href="https://github.com/d12frosted/environment/tree/master/emacs">personal configurations</a>.</li>
<li><code>[2021-05-10 Mon]</code>: Update post to reflect changes in <a href="https://github.com/org-roam/org-roam/pull/1401">org-roam v2</a>. Previous version of this article is available on <a href="https://github.com/d12frosted/d12frosted.io/blob/c16870cab6ebbaafdf73c7c3589abbd27c20ac52/posts/2021-01-24-task-management-with-roam-vol6.org">GitHub</a>.</li>
</ul>
<!--more-->

<p>Long story short, here is the function you can bind or call by name using <code class="verbatim">M-x</code>:</p>
<div class="sourceCode" id="cb1" data-org-language="emacs-lisp"><pre class="sourceCode commonlisp"><code class="sourceCode commonlisp"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a>(<span class="kw">defun</span><span class="fu"> vulpea-agenda-person </span>()</span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>  <span class="st">&quot;Show main `org-agenda' view.&quot;</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>  (interactive)</span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>  (<span class="kw">let*</span> ((person (vulpea-select</span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>                  <span class="st">&quot;Person&quot;</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>                  :filter-fn</span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a>                  (<span class="kw">lambda</span> (note)</span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a>                    (seq-contains-p (vulpea-note-tags note)</span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a>                                    <span class="st">&quot;people&quot;</span>))))</span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a>         (node (org-roam-node-from-id (vulpea-note-id person)))</span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a>         (names (<span class="kw">cons</span> (org-roam-node-title node)</span>
<span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a>                      (org-roam-node-aliases node)))</span>
<span id="cb1-13"><a href="#cb1-13" aria-hidden="true" tabindex="-1"></a>         (tags (seq-map #'vulpea--title-to-tag names))</span>
<span id="cb1-14"><a href="#cb1-14" aria-hidden="true" tabindex="-1"></a>         (query (string-join tags <span class="st">&quot;|&quot;</span>)))</span>
<span id="cb1-15"><a href="#cb1-15" aria-hidden="true" tabindex="-1"></a>    (dlet ((org-agenda-overriding-arguments (<span class="kw">list</span> <span class="kw">t</span> query)))</span>
<span id="cb1-16"><a href="#cb1-16" aria-hidden="true" tabindex="-1"></a>      (org-agenda <span class="kw">nil</span> <span class="st">&quot;M&quot;</span>))))</span></code></pre></div>
<p>Now some explanations.</p>
<ol>
<li>This code uses <a href="https://github.com/d12frosted/vulpea">vulpea</a> library<a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a> to select a person. You can achieve the same result without <code class="verbatim">vulpea</code>, of course, but it saves some effort. <code class="verbatim">vulpea-select</code> asks the user to select a note and accepts a predicate to show only subset of <code class="verbatim">org-roam</code> notes. In this case, we simply present only people notes.</li>
<li>Once we have a selected <code class="verbatim">vulpea-note</code>, we can get all titles on that file (e.g. main title and aliases). This is important for alias users. For example, in some notes I want use Mr. Frodo instead of Frodo Baggins, but I want to see tasks tagged as <code class="verbatim">@Mr.Forod</code> and <code class="verbatim">@FrodoBaggins</code> at the same time. It’s the same person after all (don’t ask me about Gollum, better use <code class="verbatim">M-x
  doctor</code>)!</li>
<li>Now we simply convert those names into tags using <code class="verbatim">vulpea--title-to-tag</code> from <a href="https://d12frosted.io/posts/2020-07-07-task-management-with-roam-vol4.html">Vol 4</a>.</li>
<li>Then we join the tags using <code class="verbatim">|</code> separator into single query string.</li>
<li>The last step is to execute <code class="verbatim">org-agenda</code> with <code class="verbatim">M</code> argument (match for tags, but list only <code class="verbatim">TODO</code> items). In order to pass a query to relevant agenda function, we use <code class="verbatim">org-agenda-overriding-arguments</code>. Not sure if it’s documented anywhere, but you can read the sources of <code class="verbatim">org-agenda</code> to figure out how to use it. <code class="verbatim">dlet</code> here is used for dynamic binding. If you are not using lexical scope, you can use regular <code class="verbatim">let</code> here.</li>
</ol>
<p>That’s it! Now see it in action, again.</p>
<div class="post-video">
<video autoplay loop>
  <source src="../images/org-notes-person-agenda.mp4" type="video/mp4">
  Your browser does not support the video tag.
</video>
</div>

<h1 id="task-management-with-org-roam-series">Task Management with org-roam Series</h1>
<ol>
<li><a href="https://d12frosted.io/posts/2020-06-23-task-management-with-roam-vol1.html">Path to Roam</a></li>
<li><a href="https://d12frosted.io/posts/2020-06-24-task-management-with-roam-vol2.html">Categories</a></li>
<li><a href="https://d12frosted.io/posts/2020-06-25-task-management-with-roam-vol3.html">FILETAGS</a></li>
<li><a href="https://d12frosted.io/posts/2020-07-07-task-management-with-roam-vol4.html">Automatic tagging</a></li>
<li><a href="https://d12frosted.io/posts/2021-01-16-task-management-with-roam-vol5.html">Dynamic and fast agenda</a></li>
<li><a href="https://d12frosted.io/posts/2021-01-24-task-management-with-roam-vol6.html">Select a person and view related tasks</a></li>
<li><a href="https://d12frosted.io/posts/2021-05-21-task-management-with-roam-vol7.html">Capture</a></li>
</ol>
<h1 id="references">References</h1>
<ul>
<li><a href="https://orgmode.org/worg/dev/org-element-api.html">Org Element API</a></li>
<li><a href="https://github.com/skeeto/emacsql">skeeto/emacsql</a></li>
<li>Code from this article is available as <a href="https://gist.github.com/d12frosted/a60e8ccb9aceba031af243dff0d19b2e">GitHub Gist</a></li>
</ul>
<section class="footnotes" role="doc-endnotes">
<hr />
<ol>
<li id="fn1" role="doc-endnote"><p>Yikes, I advertise my own libraries on this blog!<a href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>
      </section>
    </article>

    <div class="footer-separator"></div>
    <div class="footer">
      <a target="_blank" class="post-footer-sources" href="https://github.com/d12frosted/d12frosted.io/blob/master/posts/2021-01-24-task-management-with-roam-vol6.org">Sources <i class="fa fa-code fa-lg"></i></a>
    </div>
    <script src="https://utteranc.es/client.js" repo="d12frosted/d12frosted.io" issue-term="pathname" label="comments" theme="github-light" crossorigin="anonymous" async>
    </script>

    <footer>
  <div>
      <p>
        Follow me on <a class="fa fa-github" href="https://github.com/d12frosted" title="GitHub profile">&nbsp GitHub</a>
      </p>
  </div>
</footer>

  </body>
</html>
]]></summary>
</entry>
<entry>
    <title>Task management with org-roam Vol. 5: Dynamic and fast agenda</title>
    <link href="https://d12frosted.io/posts/2021-01-16-task-management-with-roam-vol5.html" />
    <id>https://d12frosted.io/posts/2021-01-16-task-management-with-roam-vol5.html</id>
    <published>2021-01-16T00:00:00Z</published>
    <updated>2021-01-16T00:00:00Z</updated>
    <summary type="html"><![CDATA[<!doctype html>
<html lang="en">
  <head>
    <title>Task management with org-roam Vol. 5: Dynamic and fast agenda</title>
    <link rel="stylesheet" href="../css/post-bundle.css" />
    <meta charset="utf-8">
<meta http-equiv="x-ua-compatible" content="ie=edge">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="keywords" content="blog,programming,Haskell,Emacs,fish,bash">
<meta property="og:title" content="Boris Buliga">
<meta property="og:locale" content="es_US">
<meta property="og:url" content="https://d12frosted.io">

<link rel="apple-touch-icon" sizes="180x180" href="../apple-touch-icon.png">
<link rel="icon" type="image/png" sizes="32x32" href="../favicon-32x32.png">
<link rel="icon" type="image/png" sizes="16x16" href="../favicon-16x16.png">
<link rel="manifest" href="../site.webmanifest">

<link href="https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css" rel="stylesheet">
<script>
  MathJax = {
    svg: {
      fontCache: 'global'
    }
  };
</script>
<script type="text/javascript" id="MathJax-script" async src="../library/mathjax/es5/tex-svg.js">
</script>
<script src="../library/chart.js/dist/Chart.min.js"></script>
<script data-goatcounter="https://d12frosted.goatcounter.com/count" async src="//gc.zgo.at/count.js"></script>

    <meta name="description" content="Dynamically building org-agenda-files with only relevant files" />
    <meta name="twitter:card" content="summary">
    <meta name="twitter:description" content="Dynamically building org-agenda-files with only relevant files">
    <meta property="og:description" content="Dynamically building org-agenda-files with only relevant files">
  </head>
  <body>
    <header>
      <nav>
  <ul>
    <li><a class="fa fa-home" href="../" title="Home">&nbsp Home</a></li>
    <li><a class="fa fa-suitcase" href="../projects.html" title="Projects">&nbsp Projects</a></li>
    <li><a class="fa fa-rss" href="../atom.xml" title="RSS">&nbsp RSS</a></li>
    <li><a class="fa fa-github" href="https://github.com/d12frosted" title="GitHub profile">&nbsp GitHub</a></li>
  </ul>
</nav>

    </header>

    <h1 class="post-title">Task management with org-roam Vol. 5: Dynamic and fast agenda</h1>
    <div class="date"><span>January 16, 2021</span></div>
    <div class="tags"><span>(<a title="All pages tagged 'emacs'." href="../tags/emacs.html">emacs</a>, <a title="All pages tagged 'org-roam'." href="../tags/org-roam.html">org-roam</a>, <a title="All pages tagged 'org-mode'." href="../tags/org-mode.html">org-mode</a>)</span></div>
    <article>
      <section>
        <p>In previous articles (<a href="https://d12frosted.io/posts/2020-06-23-task-management-with-roam-vol1.html">Vol 1</a> and <a href="https://d12frosted.io/posts/2020-06-24-task-management-with-roam-vol2.html">Vol 2</a>) we talked about moving tasks from regular <code class="verbatim">org-mode</code> files to <code class="verbatim">org-roam</code> notes. This relied upon adding all <code class="verbatim">org-roam</code> files to <code class="verbatim">org-agenda-files</code>, which doesn’t scale well, as when you build an agenda buffer, it needs to traverse each file. Once you have more than 1k notes, things become sluggish.</p>
<p>In my experience, once I reached 1200 note files, <code class="verbatim">org-agenda</code> constantly took more than 50 seconds to build, rendering this tool completely useless. But then I realised that only 3% of those files actually contain any <code class="verbatim">TODO</code> entries, so there is no need to traverse whole <code class="verbatim">org-roam-directory</code>!</p>
<p>In this article we are going to optimise <code class="verbatim">org-agenda</code> back to less than 1 second by dynamically building <code class="verbatim">org-agenda-files</code> list to include only files with <code class="verbatim">TODO</code> entries. All thanks to the power of <code class="verbatim">org-roam</code> and some hooks I am going to describe.</p>
<p><strong>Change Log:</strong></p>
<ul>
<li><code>[2021-03-02 Tue]</code>: Update naming convention to match <a href="https://github.com/d12frosted/environment/tree/master/emacs">personal configurations</a>.</li>
<li><code>[2021-03-08 Mon]</code>: <a href="https://github.com/Whil-">Gustav</a> shared that <code class="verbatim">org-element-map</code> has an optional parameter <code class="verbatim">first-match</code> that works like <code class="verbatim">seq-find</code>, meaning that <code class="verbatim">vulpea-project-p</code> can be optimised.</li>
<li><code>[2021-05-10 Mon]</code>: Update post to reflect changes in <a href="https://github.com/org-roam/org-roam/pull/1401">org-roam v2</a>. Previous version of this article is available on <a href="https://github.com/d12frosted/d12frosted.io/blob/c16870cab6ebbaafdf73c7c3589abbd27c20ac52/posts/2021-01-16-task-management-with-roam-vol5.org">GitHub</a>.</li>
<li><code>[2021-08-19 Thu]</code>: <a href="https://github.com/Whil-">Gustav</a> proposed to modify buffer only when tags have changed. Code was updated accordingly (both in the post and on <a href="https://gist.github.com/d12frosted/a60e8ccb9aceba031af243dff0d19b2e">GitHub Gist</a>).</li>
</ul>
<!--more-->

<p>The core idea is very simple - optimising reads during writes. So every time a file is modified, we check if it contains any <code class="verbatim">TODO</code> entries, and depending on that we either add or remove a <code class="verbatim">project</code> tag from <code class="verbatim">filetags</code> property. And then, before calling <code class="verbatim">org-agenda</code>, we simply <code class="verbatim">org-roam-db-query</code> for files that have a <code class="verbatim">project</code> tag.</p>
<p>Since <code class="verbatim">filetags</code> are <a href="https://orgmode.org/manual/Tag-Inheritance.html">inherited</a> by default (see the value of <code class="verbatim">org-use-tag-inheritance</code>), every heading in your file will inherit <code class="verbatim">project</code> tag, which is not desirable. Since tag inheritance is useful in general, my advice is to disable inheritance specifically for <code class="verbatim">project</code> tag by adding it to <code class="verbatim">org-tags-exclude-from-inheritance</code>:</p>
<div class="sourceCode" id="cb1" data-org-language="emacs-lisp"><pre class="sourceCode commonlisp"><code class="sourceCode commonlisp"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a>(add-to-list 'org-tags-exclude-from-inheritance <span class="st">&quot;project&quot;</span>)</span></code></pre></div>
<div class="post-image">
<img src="../images/org-notes-project-tag-update.gif" />
</div>

<h1 id="marking-a-project">Marking a Project</h1>
<p>In order to mark a note as a <code class="verbatim">project</code>, we need to check if it contains any <code class="verbatim">TODO</code> entries. One of the way to do it is to use <a href="https://orgmode.org/worg/dev/org-element-api.html">Org Element API</a>, a set of parsing functions.</p>
<div class="sourceCode" id="cb2" data-org-language="emacs-lisp"><pre class="sourceCode commonlisp"><code class="sourceCode commonlisp"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a>(<span class="kw">defun</span><span class="fu"> vulpea-project-p </span>()</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>  <span class="st">&quot;Return non-nil if current buffer has any todo entry.</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a><span class="st">TODO entries marked as done are ignored, meaning the this</span></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a><span class="st">function returns nil if current buffer contains only completed</span></span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a><span class="st">tasks.&quot;</span></span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a>  (org-element-map                          <span class="co">; (2)</span></span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a>       (org-element-parse-buffer 'headline) <span class="co">; (1)</span></span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a>       'headline</span>
<span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a>     (<span class="kw">lambda</span> (h)</span>
<span id="cb2-11"><a href="#cb2-11" aria-hidden="true" tabindex="-1"></a>       (<span class="kw">eq</span> (org-element-property :todo-type h)</span>
<span id="cb2-12"><a href="#cb2-12" aria-hidden="true" tabindex="-1"></a>           'todo))</span>
<span id="cb2-13"><a href="#cb2-13" aria-hidden="true" tabindex="-1"></a>     <span class="kw">nil</span> 'first-match))                     <span class="co">; (3)</span></span></code></pre></div>
<p>This might look a little bit too much, so let me explain the code step by step.</p>
<ol>
<li>We parse the buffer using <code class="verbatim">org-element-parse-buffer</code>. It returns an abstract syntax tree of the current Org buffer. But sine we care only about headings, we ask it to return only them by passing a <code class="verbatim">GRANULARITY</code> parameter - <code class="verbatim">'headline</code>. This makes things faster.</li>
<li>Then we extract information about <code class="verbatim">TODO</code> keyword from <code class="verbatim">headline</code> AST, which <a href="https://orgmode.org/worg/dev/org-element-api.html#org658999f">contains a property</a> we are interested in - <code class="verbatim">:todo-type</code>, which returns the type of <code class="verbatim">TODO</code> keyword according to <code class="verbatim">org-todo-keywords</code> - <code class="verbatim">'done</code>, <code class="verbatim">'todo</code> or <code class="verbatim">nil</code> (when keyword is not present).</li>
<li>Now all we have to do is to check if the buffer list contains at least one keyword with <code class="verbatim">'todo</code> type. We could use <code class="verbatim">seq=find</code> on the result of <code class="verbatim">org-element-map</code>, but it turns out that it provides an optional <code class="verbatim">first-match</code> argument that can be used for our needs. Thanks <a href="https://github.com/Whil-">Gustav</a> for pointing that out.</li>
</ol>
<p>Now we need to use this function to add or to remove <code class="verbatim">project</code> tag from a note. I think that it should be done in two places - when visiting a note and in <code class="verbatim">before-save-hook</code>. This way you leave no room for missing a file with <code class="verbatim">TODO</code> entries. It uses <a href="https://github.com/d12frosted/vulpea/blob/6a735c34f1f64e1f70da77989e9ce8da7864e5ff/vulpea-buffer.el#L69">vulpea-buffer-tags-get</a> and <a href="https://github.com/d12frosted/vulpea/blob/6a735c34f1f64e1f70da77989e9ce8da7864e5ff/vulpea-buffer.el#L79">vulpea-buffer-tags-add</a> from <a href="https://github.com/d12frosted/vulpea">vulpea</a> library (for now you should use <a href="https://github.com/d12frosted/vulpea/pull/92">org-roam-v2 branch</a>).</p>
<div class="sourceCode" id="cb3" data-org-language="emacs-lisp"><pre class="sourceCode commonlisp"><code class="sourceCode commonlisp"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a>(add-hook 'find-file-hook #'vulpea-project-update-tag)</span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a>(add-hook 'before-save-hook #'vulpea-project-update-tag)</span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a>(<span class="kw">defun</span><span class="fu"> vulpea-project-update-tag </span>()</span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a>      <span class="st">&quot;Update PROJECT tag in the current buffer.&quot;</span></span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a>      (<span class="kw">when</span> (<span class="kw">and</span> (<span class="kw">not</span> (active-minibuffer-window))</span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a>                 (vulpea-buffer-p))</span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a>        (save-excursion</span>
<span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a>          (goto-char (point-min))</span>
<span id="cb3-10"><a href="#cb3-10" aria-hidden="true" tabindex="-1"></a>          (<span class="kw">let*</span> ((tags (vulpea-buffer-tags-get))</span>
<span id="cb3-11"><a href="#cb3-11" aria-hidden="true" tabindex="-1"></a>                 (original-tags tags))</span>
<span id="cb3-12"><a href="#cb3-12" aria-hidden="true" tabindex="-1"></a>            (<span class="kw">if</span> (vulpea-project-p)</span>
<span id="cb3-13"><a href="#cb3-13" aria-hidden="true" tabindex="-1"></a>                (<span class="kw">setq</span> tags (<span class="kw">cons</span> <span class="st">&quot;project&quot;</span> tags))</span>
<span id="cb3-14"><a href="#cb3-14" aria-hidden="true" tabindex="-1"></a>              (<span class="kw">setq</span> tags (<span class="kw">remove</span> <span class="st">&quot;project&quot;</span> tags)))</span>
<span id="cb3-15"><a href="#cb3-15" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-16"><a href="#cb3-16" aria-hidden="true" tabindex="-1"></a>            <span class="co">;; cleanup duplicates</span></span>
<span id="cb3-17"><a href="#cb3-17" aria-hidden="true" tabindex="-1"></a>            (<span class="kw">setq</span> tags (seq-uniq tags))</span>
<span id="cb3-18"><a href="#cb3-18" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-19"><a href="#cb3-19" aria-hidden="true" tabindex="-1"></a>            <span class="co">;; update tags if changed</span></span>
<span id="cb3-20"><a href="#cb3-20" aria-hidden="true" tabindex="-1"></a>            (<span class="kw">when</span> (<span class="kw">or</span> (seq-difference tags original-tags)</span>
<span id="cb3-21"><a href="#cb3-21" aria-hidden="true" tabindex="-1"></a>                      (seq-difference original-tags tags))</span>
<span id="cb3-22"><a href="#cb3-22" aria-hidden="true" tabindex="-1"></a>              (<span class="kw">apply</span> #'vulpea-buffer-tags-set tags))))))</span>
<span id="cb3-23"><a href="#cb3-23" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-24"><a href="#cb3-24" aria-hidden="true" tabindex="-1"></a>(<span class="kw">defun</span><span class="fu"> vulpea-buffer-p </span>()</span>
<span id="cb3-25"><a href="#cb3-25" aria-hidden="true" tabindex="-1"></a>  <span class="st">&quot;Return non-nil if the currently visited buffer is a note.&quot;</span></span>
<span id="cb3-26"><a href="#cb3-26" aria-hidden="true" tabindex="-1"></a>  (<span class="kw">and</span> buffer-file-name</span>
<span id="cb3-27"><a href="#cb3-27" aria-hidden="true" tabindex="-1"></a>       (string-prefix-p</span>
<span id="cb3-28"><a href="#cb3-28" aria-hidden="true" tabindex="-1"></a>        (expand-file-name (file-name-as-directory org-roam-directory))</span>
<span id="cb3-29"><a href="#cb3-29" aria-hidden="true" tabindex="-1"></a>        (file-name-directory buffer-file-name))))</span></code></pre></div>
<p>That’s it. Now whenever we modify or visit a notes buffer, this code will update the presence of <code class="verbatim">project</code> tag. See it in action:</p>
<div class="post-image">
<img src="../images/org-notes-project-tag-update.gif" />
</div>

<h1 id="1388e376-45f5-4b43-b172-52e98b240732" id="building-agenda">Building agenda</h1>
<p>In order to dynamically build <code class="verbatim">org-agenda-files</code>, we need to query all files containing <code class="verbatim">project</code> tag. <code class="verbatim">org-roam</code> uses uses <a href="https://github.com/skeeto/emacsql">skeeto/emacsql</a>, and provides a convenient function <code class="verbatim">org-roam-db-query</code> to execute SQL statements against <code class="verbatim">org-roam-db-location</code> file.</p>
<div class="sourceCode" id="cb4" data-org-language="emacs-lisp"><pre class="sourceCode commonlisp"><code class="sourceCode commonlisp"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a>(<span class="kw">defun</span><span class="fu"> vulpea-project-files </span>()</span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a>  <span class="st">&quot;Return a list of note files containing 'project' tag.&quot;</span> <span class="co">;</span></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a>  (seq-uniq</span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a>   (seq-map</span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a>    #'car</span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a>    (org-roam-db-query</span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a>     [:select [nodes:file]</span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true" tabindex="-1"></a>      :from tags</span>
<span id="cb4-9"><a href="#cb4-9" aria-hidden="true" tabindex="-1"></a>      :left-join nodes</span>
<span id="cb4-10"><a href="#cb4-10" aria-hidden="true" tabindex="-1"></a>      :on (<span class="op">=</span> tags:node-id nodes:id)</span>
<span id="cb4-11"><a href="#cb4-11" aria-hidden="true" tabindex="-1"></a>      :where (like tag (<span class="kw">quote</span> <span class="st">&quot;%</span><span class="sc">\&quot;</span><span class="st">project</span><span class="sc">\&quot;</span><span class="st">%&quot;</span>))]))))</span></code></pre></div>
<p>This function simply returns a list of files containing <code class="verbatim">project</code> tag. Sure enough it can be generalised for other needs, but it’s good enough for our simple use case. The query is run against the following schemes:</p>
<div class="sourceCode" id="cb5" data-org-language="emacs-lisp"><pre class="sourceCode commonlisp"><code class="sourceCode commonlisp"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a>(nodes</span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a> ([(id :not-null :primary-key)</span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a>   (file :not-null)</span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a>   (level :not-null)</span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a>   (pos :not-null)</span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a>   todo</span>
<span id="cb5-7"><a href="#cb5-7" aria-hidden="true" tabindex="-1"></a>   priority</span>
<span id="cb5-8"><a href="#cb5-8" aria-hidden="true" tabindex="-1"></a>   (scheduled text)</span>
<span id="cb5-9"><a href="#cb5-9" aria-hidden="true" tabindex="-1"></a>   (deadline text)</span>
<span id="cb5-10"><a href="#cb5-10" aria-hidden="true" tabindex="-1"></a>   title</span>
<span id="cb5-11"><a href="#cb5-11" aria-hidden="true" tabindex="-1"></a>   properties</span>
<span id="cb5-12"><a href="#cb5-12" aria-hidden="true" tabindex="-1"></a>   olp]</span>
<span id="cb5-13"><a href="#cb5-13" aria-hidden="true" tabindex="-1"></a>  (:foreign-key [file] :references files [file] :on-delete :cascade)))</span>
<span id="cb5-14"><a href="#cb5-14" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-15"><a href="#cb5-15" aria-hidden="true" tabindex="-1"></a>(tags</span>
<span id="cb5-16"><a href="#cb5-16" aria-hidden="true" tabindex="-1"></a> ([(node-id :not-null)</span>
<span id="cb5-17"><a href="#cb5-17" aria-hidden="true" tabindex="-1"></a>   tag]</span>
<span id="cb5-18"><a href="#cb5-18" aria-hidden="true" tabindex="-1"></a>  (:foreign-key [node-id] :references nodes [id] :on-delete :cascade)))</span></code></pre></div>
<p>Now we can set the list of agenda files:</p>
<div class="sourceCode" id="cb6" data-org-language="emacs-lisp"><pre class="sourceCode commonlisp"><code class="sourceCode commonlisp"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a>(<span class="kw">setq</span> org-agenda-files (vulpea-project-files))</span></code></pre></div>
<p>But the real question is - when to do it? Some might put it in the <code class="verbatim">init.el</code> file and call it a day, but unless you are restarting Emacs like crazy, I would argue that it’s not the best place to do it. Because we need an up to date list of files exactly when we build agenda.</p>
<div class="sourceCode" id="cb7" data-org-language="emacs-lisp"><pre class="sourceCode commonlisp"><code class="sourceCode commonlisp"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a>(<span class="kw">defun</span><span class="fu"> vulpea-agenda-files-update </span>(&amp;<span class="kw">rest</span> _)</span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a>  <span class="st">&quot;Update the value of `org-agenda-files'.&quot;</span></span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a>  (<span class="kw">setq</span> org-agenda-files (vulpea-project-files)))</span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-5"><a href="#cb7-5" aria-hidden="true" tabindex="-1"></a>(advice-add 'org-agenda :before #'vulpea-agenda-files-update)</span></code></pre></div>
<p>And that’s all. You <code class="verbatim">org-agenda</code> is up to date and fast again!</p>
<h1 id="migration">Migration</h1>
<p>So far we covered what to do with notes we edit. But when you have more than 10 notes it becomes tedious to visit each of them and make sure that they have update state of <code class="verbatim">Project</code> tag. Fortunately, this task is easily automated.</p>
<div class="sourceCode" id="cb8" data-org-language="emacs-lisp"><pre class="sourceCode commonlisp"><code class="sourceCode commonlisp"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a>(<span class="kw">dolist</span> (file (org-roam--list-all-files))</span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a>  (message <span class="st">&quot;processing %s&quot;</span> file)</span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a>  (with-current-buffer (<span class="kw">or</span> (find-buffer-visiting file)</span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a>                           (find-file-noselect file))</span>
<span id="cb8-5"><a href="#cb8-5" aria-hidden="true" tabindex="-1"></a>    (vulpea-project-update-tag)</span>
<span id="cb8-6"><a href="#cb8-6" aria-hidden="true" tabindex="-1"></a>    (save-buffer)))</span></code></pre></div>
<p>This will visit each of your files and update the presence of <code class="verbatim">Project</code> tag according to presence of <code class="verbatim">TODO</code> entry. Now you are ready to go.</p>
<h1 id="result">Result</h1>
<p>With little amount of <code class="verbatim">emacs-lisp</code> code we dramatically optimized <code class="verbatim">org-agenda</code> loading from <span class="math inline">\(&gt; 50\)</span> seconds to <span class="math inline">\(&lt; 1\)</span> second. Effectiveness of this approach depends on amount of files with <code class="verbatim">TODO</code> entries (the more you have, the less effective this approach becomes). One of the drawbacks is small (in my experience, neglectable) performance degradation of note visiting and note saving. Obviously, if a file contains thousands of headings, it affects performance. In defence, I would argue that such files are against the philosophy of <code class="verbatim">org-roam</code>, where you keep lots of small files as opposed to few huge files.</p>
<p>For you convenience, the full code is displayed below. It is also available as <a href="https://gist.github.com/d12frosted/a60e8ccb9aceba031af243dff0d19b2e">GitHub Gist</a>.</p>
<div class="sourceCode" id="cb9" data-org-language="emacs-lisp"><pre class="sourceCode commonlisp"><code class="sourceCode commonlisp"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a>(<span class="kw">defun</span><span class="fu"> vulpea-project-p </span>()</span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a>  <span class="st">&quot;Return non-nil if current buffer has any todo entry.</span></span>
<span id="cb9-3"><a href="#cb9-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-4"><a href="#cb9-4" aria-hidden="true" tabindex="-1"></a><span class="st">TODO entries marked as done are ignored, meaning the this</span></span>
<span id="cb9-5"><a href="#cb9-5" aria-hidden="true" tabindex="-1"></a><span class="st">function returns nil if current buffer contains only completed</span></span>
<span id="cb9-6"><a href="#cb9-6" aria-hidden="true" tabindex="-1"></a><span class="st">tasks.&quot;</span></span>
<span id="cb9-7"><a href="#cb9-7" aria-hidden="true" tabindex="-1"></a>  (seq-find                                 <span class="co">; (3)</span></span>
<span id="cb9-8"><a href="#cb9-8" aria-hidden="true" tabindex="-1"></a>   (<span class="kw">lambda</span> (<span class="kw">type</span>)</span>
<span id="cb9-9"><a href="#cb9-9" aria-hidden="true" tabindex="-1"></a>     (<span class="kw">eq</span> <span class="kw">type</span> 'todo))</span>
<span id="cb9-10"><a href="#cb9-10" aria-hidden="true" tabindex="-1"></a>   (org-element-map                         <span class="co">; (2)</span></span>
<span id="cb9-11"><a href="#cb9-11" aria-hidden="true" tabindex="-1"></a>       (org-element-parse-buffer 'headline) <span class="co">; (1)</span></span>
<span id="cb9-12"><a href="#cb9-12" aria-hidden="true" tabindex="-1"></a>       'headline</span>
<span id="cb9-13"><a href="#cb9-13" aria-hidden="true" tabindex="-1"></a>     (<span class="kw">lambda</span> (h)</span>
<span id="cb9-14"><a href="#cb9-14" aria-hidden="true" tabindex="-1"></a>       (org-element-property :todo-type h)))))</span>
<span id="cb9-15"><a href="#cb9-15" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-16"><a href="#cb9-16" aria-hidden="true" tabindex="-1"></a>(<span class="kw">defun</span><span class="fu"> vulpea-project-update-tag </span>()</span>
<span id="cb9-17"><a href="#cb9-17" aria-hidden="true" tabindex="-1"></a>    <span class="st">&quot;Update PROJECT tag in the current buffer.&quot;</span></span>
<span id="cb9-18"><a href="#cb9-18" aria-hidden="true" tabindex="-1"></a>    (<span class="kw">when</span> (<span class="kw">and</span> (<span class="kw">not</span> (active-minibuffer-window))</span>
<span id="cb9-19"><a href="#cb9-19" aria-hidden="true" tabindex="-1"></a>               (vulpea-buffer-p))</span>
<span id="cb9-20"><a href="#cb9-20" aria-hidden="true" tabindex="-1"></a>      (save-excursion</span>
<span id="cb9-21"><a href="#cb9-21" aria-hidden="true" tabindex="-1"></a>        (goto-char (point-min))</span>
<span id="cb9-22"><a href="#cb9-22" aria-hidden="true" tabindex="-1"></a>        (<span class="kw">let*</span> ((tags (vulpea-buffer-tags-get))</span>
<span id="cb9-23"><a href="#cb9-23" aria-hidden="true" tabindex="-1"></a>               (original-tags tags))</span>
<span id="cb9-24"><a href="#cb9-24" aria-hidden="true" tabindex="-1"></a>          (<span class="kw">if</span> (vulpea-project-p)</span>
<span id="cb9-25"><a href="#cb9-25" aria-hidden="true" tabindex="-1"></a>              (<span class="kw">setq</span> tags (<span class="kw">cons</span> <span class="st">&quot;project&quot;</span> tags))</span>
<span id="cb9-26"><a href="#cb9-26" aria-hidden="true" tabindex="-1"></a>            (<span class="kw">setq</span> tags (<span class="kw">remove</span> <span class="st">&quot;project&quot;</span> tags)))</span>
<span id="cb9-27"><a href="#cb9-27" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-28"><a href="#cb9-28" aria-hidden="true" tabindex="-1"></a>          <span class="co">;; cleanup duplicates</span></span>
<span id="cb9-29"><a href="#cb9-29" aria-hidden="true" tabindex="-1"></a>          (<span class="kw">setq</span> tags (seq-uniq tags))</span>
<span id="cb9-30"><a href="#cb9-30" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-31"><a href="#cb9-31" aria-hidden="true" tabindex="-1"></a>          <span class="co">;; update tags if changed</span></span>
<span id="cb9-32"><a href="#cb9-32" aria-hidden="true" tabindex="-1"></a>          (<span class="kw">when</span> (<span class="kw">or</span> (seq-difference tags original-tags)</span>
<span id="cb9-33"><a href="#cb9-33" aria-hidden="true" tabindex="-1"></a>                    (seq-difference original-tags tags))</span>
<span id="cb9-34"><a href="#cb9-34" aria-hidden="true" tabindex="-1"></a>            (<span class="kw">apply</span> #'vulpea-buffer-tags-set tags))))))</span>
<span id="cb9-35"><a href="#cb9-35" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-36"><a href="#cb9-36" aria-hidden="true" tabindex="-1"></a>(<span class="kw">defun</span><span class="fu"> vulpea-buffer-p </span>()</span>
<span id="cb9-37"><a href="#cb9-37" aria-hidden="true" tabindex="-1"></a>  <span class="st">&quot;Return non-nil if the currently visited buffer is a note.&quot;</span></span>
<span id="cb9-38"><a href="#cb9-38" aria-hidden="true" tabindex="-1"></a>  (<span class="kw">and</span> buffer-file-name</span>
<span id="cb9-39"><a href="#cb9-39" aria-hidden="true" tabindex="-1"></a>       (string-prefix-p</span>
<span id="cb9-40"><a href="#cb9-40" aria-hidden="true" tabindex="-1"></a>        (expand-file-name (file-name-as-directory org-roam-directory))</span>
<span id="cb9-41"><a href="#cb9-41" aria-hidden="true" tabindex="-1"></a>        (file-name-directory buffer-file-name))))</span>
<span id="cb9-42"><a href="#cb9-42" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-43"><a href="#cb9-43" aria-hidden="true" tabindex="-1"></a>(<span class="kw">defun</span><span class="fu"> vulpea-project-files </span>()</span>
<span id="cb9-44"><a href="#cb9-44" aria-hidden="true" tabindex="-1"></a>    <span class="st">&quot;Return a list of note files containing 'project' tag.&quot;</span> <span class="co">;</span></span>
<span id="cb9-45"><a href="#cb9-45" aria-hidden="true" tabindex="-1"></a>    (seq-uniq</span>
<span id="cb9-46"><a href="#cb9-46" aria-hidden="true" tabindex="-1"></a>     (seq-map</span>
<span id="cb9-47"><a href="#cb9-47" aria-hidden="true" tabindex="-1"></a>      #'car</span>
<span id="cb9-48"><a href="#cb9-48" aria-hidden="true" tabindex="-1"></a>      (org-roam-db-query</span>
<span id="cb9-49"><a href="#cb9-49" aria-hidden="true" tabindex="-1"></a>       [:select [nodes:file]</span>
<span id="cb9-50"><a href="#cb9-50" aria-hidden="true" tabindex="-1"></a>        :from tags</span>
<span id="cb9-51"><a href="#cb9-51" aria-hidden="true" tabindex="-1"></a>        :left-join nodes</span>
<span id="cb9-52"><a href="#cb9-52" aria-hidden="true" tabindex="-1"></a>        :on (<span class="op">=</span> tags:node-id nodes:id)</span>
<span id="cb9-53"><a href="#cb9-53" aria-hidden="true" tabindex="-1"></a>        :where (like tag (<span class="kw">quote</span> <span class="st">&quot;%</span><span class="sc">\&quot;</span><span class="st">project</span><span class="sc">\&quot;</span><span class="st">%&quot;</span>))]))))</span>
<span id="cb9-54"><a href="#cb9-54" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-55"><a href="#cb9-55" aria-hidden="true" tabindex="-1"></a>(<span class="kw">defun</span><span class="fu"> vulpea-agenda-files-update </span>(&amp;<span class="kw">rest</span> _)</span>
<span id="cb9-56"><a href="#cb9-56" aria-hidden="true" tabindex="-1"></a>  <span class="st">&quot;Update the value of `org-agenda-files'.&quot;</span></span>
<span id="cb9-57"><a href="#cb9-57" aria-hidden="true" tabindex="-1"></a>  (<span class="kw">setq</span> org-agenda-files (vulpea-project-files)))</span>
<span id="cb9-58"><a href="#cb9-58" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-59"><a href="#cb9-59" aria-hidden="true" tabindex="-1"></a>(add-hook 'find-file-hook #'vulpea-project-update-tag)</span>
<span id="cb9-60"><a href="#cb9-60" aria-hidden="true" tabindex="-1"></a>(add-hook 'before-save-hook #'vulpea-project-update-tag)</span>
<span id="cb9-61"><a href="#cb9-61" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-62"><a href="#cb9-62" aria-hidden="true" tabindex="-1"></a>(advice-add 'org-agenda :before #'vulpea-agenda-files-update)</span></code></pre></div>
<p>Thank you for your patience.</p>
<h1 id="task-management-with-org-roam-series">Task Management with org-roam Series</h1>
<ol>
<li><a href="https://d12frosted.io/posts/2020-06-23-task-management-with-roam-vol1.html">Path to Roam</a></li>
<li><a href="https://d12frosted.io/posts/2020-06-24-task-management-with-roam-vol2.html">Categories</a></li>
<li><a href="https://d12frosted.io/posts/2020-06-25-task-management-with-roam-vol3.html">FILETAGS</a></li>
<li><a href="https://d12frosted.io/posts/2020-07-07-task-management-with-roam-vol4.html">Automatic tagging</a></li>
<li><a href="https://d12frosted.io/posts/2021-01-16-task-management-with-roam-vol5.html">Dynamic and fast agenda</a></li>
<li><a href="https://d12frosted.io/posts/2021-01-24-task-management-with-roam-vol6.html">Select a person and view related tasks</a></li>
<li><a href="https://d12frosted.io/posts/2021-05-21-task-management-with-roam-vol7.html">Capture</a></li>
</ol>
<h1 id="references">References</h1>
<ul>
<li><a href="https://orgmode.org/worg/dev/org-element-api.html">Org Element API</a></li>
<li><a href="https://github.com/skeeto/emacsql">skeeto/emacsql</a></li>
<li>Code from this article is available as <a href="https://gist.github.com/d12frosted/a60e8ccb9aceba031af243dff0d19b2e">GitHub Gist</a></li>
</ul>
      </section>
    </article>

    <div class="footer-separator"></div>
    <div class="footer">
      <a target="_blank" class="post-footer-sources" href="https://github.com/d12frosted/d12frosted.io/blob/master/posts/2021-01-16-task-management-with-roam-vol5.org">Sources <i class="fa fa-code fa-lg"></i></a>
    </div>
    <script src="https://utteranc.es/client.js" repo="d12frosted/d12frosted.io" issue-term="pathname" label="comments" theme="github-light" crossorigin="anonymous" async>
    </script>

    <footer>
  <div>
      <p>
        Follow me on <a class="fa fa-github" href="https://github.com/d12frosted" title="GitHub profile">&nbsp GitHub</a>
      </p>
  </div>
</footer>

  </body>
</html>
]]></summary>
</entry>
<entry>
    <title>Task management with org-roam Vol. 4: Automatic tagging</title>
    <link href="https://d12frosted.io/posts/2020-07-07-task-management-with-roam-vol4.html" />
    <id>https://d12frosted.io/posts/2020-07-07-task-management-with-roam-vol4.html</id>
    <published>2020-07-07T00:00:00Z</published>
    <updated>2020-07-07T00:00:00Z</updated>
    <summary type="html"><![CDATA[<!doctype html>
<html lang="en">
  <head>
    <title>Task management with org-roam Vol. 4: Automatic tagging</title>
    <link rel="stylesheet" href="../css/post-bundle.css" />
    <meta charset="utf-8">
<meta http-equiv="x-ua-compatible" content="ie=edge">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="keywords" content="blog,programming,Haskell,Emacs,fish,bash">
<meta property="og:title" content="Boris Buliga">
<meta property="og:locale" content="es_US">
<meta property="og:url" content="https://d12frosted.io">

<link rel="apple-touch-icon" sizes="180x180" href="../apple-touch-icon.png">
<link rel="icon" type="image/png" sizes="32x32" href="../favicon-32x32.png">
<link rel="icon" type="image/png" sizes="16x16" href="../favicon-16x16.png">
<link rel="manifest" href="../site.webmanifest">

<link href="https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css" rel="stylesheet">
<script>
  MathJax = {
    svg: {
      fontCache: 'global'
    }
  };
</script>
<script type="text/javascript" id="MathJax-script" async src="../library/mathjax/es5/tex-svg.js">
</script>
<script src="../library/chart.js/dist/Chart.min.js"></script>
<script data-goatcounter="https://d12frosted.goatcounter.com/count" async src="//gc.zgo.at/count.js"></script>

    <meta name="description" content="Automatic tagging upon link insertion" />
    <meta name="twitter:card" content="summary">
    <meta name="twitter:description" content="Automatic tagging upon link insertion">
    <meta property="og:description" content="Automatic tagging upon link insertion">
  </head>
  <body>
    <header>
      <nav>
  <ul>
    <li><a class="fa fa-home" href="../" title="Home">&nbsp Home</a></li>
    <li><a class="fa fa-suitcase" href="../projects.html" title="Projects">&nbsp Projects</a></li>
    <li><a class="fa fa-rss" href="../atom.xml" title="RSS">&nbsp RSS</a></li>
    <li><a class="fa fa-github" href="https://github.com/d12frosted" title="GitHub profile">&nbsp GitHub</a></li>
  </ul>
</nav>

    </header>

    <h1 class="post-title">Task management with org-roam Vol. 4: Automatic tagging</h1>
    <div class="date"><span>July  7, 2020</span></div>
    <div class="tags"><span>(<a title="All pages tagged 'emacs'." href="../tags/emacs.html">emacs</a>, <a title="All pages tagged 'org-roam'." href="../tags/org-roam.html">org-roam</a>, <a title="All pages tagged 'org-mode'." href="../tags/org-mode.html">org-mode</a>)</span></div>
    <article>
      <section>
        <p>In the <a href="https://d12frosted.io/posts/2020-06-25-task-management-with-roam-vol3.html">previous article</a> we covered automatic tagging of notes related to a specific person, and today we are going to cover automatic tagging of an org-mode heading upon insertion of link related to a person. To put it simple, when I mention someone in the task, I would love this task to be automatically tagged with that persons name. As they say, it’s better to see once, than imagine multiple times, so here is a screencast.</p>
<div class="post-image">
<img src="../images/org-notes-insert.gif" />
</div>

<p><strong>Change Log:</strong></p>
<ul>
<li><code>[2021-01-24 Sun]</code>: Since some of the functionality mentioned in the original article was merged to <code class="verbatim">org-roam</code>, all code is updated to reflect the current state of affairs.</li>
<li><code>[2021-03-02 Tue]</code>: Update naming convention to match <a href="https://github.com/d12frosted/environment/tree/master/emacs">personal configurations</a>.</li>
<li><code>[2021-05-10 Mon]</code>: Update post to reflect changes in <a href="https://github.com/org-roam/org-roam/pull/1401">org-roam v2</a>. Previous version of this article is available on <a href="https://github.com/d12frosted/d12frosted.io/blob/c16870cab6ebbaafdf73c7c3589abbd27c20ac52/posts/2020-07-07-task-management-with-roam-vol4.org">GitHub</a>.</li>
</ul>
<!--more-->

<p>The solution is based on the relatively recent <a href="https://github.com/org-roam/org-roam/pull/839">pull request</a> to the org-roam. Instead of using <code class="verbatim">org-roam-node-insert</code> directly, we can write a wrapper for it leveraging the return value, name manipulation from the <a href="https://d12frosted.io/posts/2020-06-25-task-management-with-roam-vol3.html">previous article</a> and tags lookup from <a href="https://d12frosted.io/posts/2020-06-10-org-roam-tags.html">Org-roam tags</a> article.</p>
<div class="sourceCode" id="cb1" data-org-language="emacs-lisp"><pre class="sourceCode commonlisp"><code class="sourceCode commonlisp"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a>(<span class="kw">defun</span><span class="fu"> vulpea-insert </span>()</span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>  <span class="st">&quot;Insert a link to the note.&quot;</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>  (interactive)</span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>  (when-let*</span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>      ((node (org-roam-node-insert))</span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>       (title (org-roam-node-title node))</span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a>       (tags (org-roam-node-tags node)))</span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a>    (<span class="kw">when</span> (seq-contains-p tags <span class="st">&quot;people&quot;</span>)</span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a>      (save-excursion</span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a>        (<span class="kw">ignore-errors</span></span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a>          (org-back-to-heading)</span>
<span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a>          (org-set-tags</span>
<span id="cb1-13"><a href="#cb1-13" aria-hidden="true" tabindex="-1"></a>           (seq-uniq</span>
<span id="cb1-14"><a href="#cb1-14" aria-hidden="true" tabindex="-1"></a>            (<span class="kw">cons</span></span>
<span id="cb1-15"><a href="#cb1-15" aria-hidden="true" tabindex="-1"></a>             (vulpea--title-to-tag title)</span>
<span id="cb1-16"><a href="#cb1-16" aria-hidden="true" tabindex="-1"></a>             (org-get-tags <span class="kw">nil</span> <span class="kw">t</span>)))))))))</span></code></pre></div>
<p>The implementation is straight-forward. We start with calling <code class="verbatim">org-roam-node-insert</code> that asks for the note to insert. Then we parse result and query the roam tags to understand if the inserted note is related to a person. And if the answer is yes, we use <code class="verbatim">org-set-tags</code> to automatically tag the heading.</p>
<p>In my case, implementation of <code class="verbatim">vulpea--title-to-tag</code> is the following.</p>
<div class="sourceCode" id="cb2" data-org-language="emacs-lisp"><pre class="sourceCode commonlisp"><code class="sourceCode commonlisp"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a>(<span class="kw">defun</span><span class="fu"> vulpea--title-to-tag </span>(title)</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>  <span class="st">&quot;Convert TITLE to tag.&quot;</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>  (concat <span class="st">&quot;@&quot;</span> (s-replace <span class="st">&quot; &quot;</span> <span class="st">&quot;&quot;</span> title)))</span></code></pre></div>
<p>And that’s it! Keep in mind, that with this approach automatic tagging does not happen when mentioning people using company interface (e.g. using <code class="verbatim">org-roam-company</code>) and when using <code class="verbatim">vulpea-insert</code> to mention someone unknown to your system (e.g. when you create a new file). Both of the ‘features’ can be implemented using hooks.</p>
<p>P.S. <code class="verbatim">vulpea-insert</code> can be modified to skip tagging when called with universal argument. Feel free to reach me if you need help with that!</p>
<h1 id="task-management-with-org-roam-series">Task Management with org-roam Series</h1>
<ol>
<li><a href="https://d12frosted.io/posts/2020-06-23-task-management-with-roam-vol1.html">Path to Roam</a></li>
<li><a href="https://d12frosted.io/posts/2020-06-24-task-management-with-roam-vol2.html">Categories</a></li>
<li><a href="https://d12frosted.io/posts/2020-06-25-task-management-with-roam-vol3.html">FILETAGS</a></li>
<li><a href="https://d12frosted.io/posts/2020-07-07-task-management-with-roam-vol4.html">Automatic tagging</a></li>
<li><a href="https://d12frosted.io/posts/2021-01-16-task-management-with-roam-vol5.html">Dynamic and fast agenda</a></li>
<li><a href="https://d12frosted.io/posts/2021-01-24-task-management-with-roam-vol6.html">Select a person and view related tasks</a></li>
<li><a href="https://d12frosted.io/posts/2021-05-21-task-management-with-roam-vol7.html">Capture</a></li>
</ol>
<h1 id="references">References</h1>
<ul>
<li><code class="verbatim">org-roam</code> documentation on <a href="https://github.com/org-roam/org-roam">GitHub</a>.</li>
<li><code class="verbatim">org-mode</code> documentation on the <a href="https://orgmode.org">official site</a>.</li>
<li>Org-roam tags on <a href="https://d12frosted.io/posts/2020-06-10-org-roam-tags.html">d12frosted.io</a>.</li>
<li>personal configurations on <a href="https://github.com/d12frosted/environment/blob/master/emacs/lisp/%2Borg-notes.el">GitHub</a>.</li>
</ul>
      </section>
    </article>

    <div class="footer-separator"></div>
    <div class="footer">
      <a target="_blank" class="post-footer-sources" href="https://github.com/d12frosted/d12frosted.io/blob/master/posts/2020-07-07-task-management-with-roam-vol4.org">Sources <i class="fa fa-code fa-lg"></i></a>
    </div>
    <script src="https://utteranc.es/client.js" repo="d12frosted/d12frosted.io" issue-term="pathname" label="comments" theme="github-light" crossorigin="anonymous" async>
    </script>

    <footer>
  <div>
      <p>
        Follow me on <a class="fa fa-github" href="https://github.com/d12frosted" title="GitHub profile">&nbsp GitHub</a>
      </p>
  </div>
</footer>

  </body>
</html>
]]></summary>
</entry>
<entry>
    <title>Task management with org-roam Vol. 3: FILETAGS</title>
    <link href="https://d12frosted.io/posts/2020-06-25-task-management-with-roam-vol3.html" />
    <id>https://d12frosted.io/posts/2020-06-25-task-management-with-roam-vol3.html</id>
    <published>2020-06-25T00:00:00Z</published>
    <updated>2020-06-25T00:00:00Z</updated>
    <summary type="html"><![CDATA[<!doctype html>
<html lang="en">
  <head>
    <title>Task management with org-roam Vol. 3: FILETAGS</title>
    <link rel="stylesheet" href="../css/post-bundle.css" />
    <meta charset="utf-8">
<meta http-equiv="x-ua-compatible" content="ie=edge">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="keywords" content="blog,programming,Haskell,Emacs,fish,bash">
<meta property="og:title" content="Boris Buliga">
<meta property="og:locale" content="es_US">
<meta property="og:url" content="https://d12frosted.io">

<link rel="apple-touch-icon" sizes="180x180" href="../apple-touch-icon.png">
<link rel="icon" type="image/png" sizes="32x32" href="../favicon-32x32.png">
<link rel="icon" type="image/png" sizes="16x16" href="../favicon-16x16.png">
<link rel="manifest" href="../site.webmanifest">

<link href="https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css" rel="stylesheet">
<script>
  MathJax = {
    svg: {
      fontCache: 'global'
    }
  };
</script>
<script type="text/javascript" id="MathJax-script" async src="../library/mathjax/es5/tex-svg.js">
</script>
<script src="../library/chart.js/dist/Chart.min.js"></script>
<script data-goatcounter="https://d12frosted.goatcounter.com/count" async src="//gc.zgo.at/count.js"></script>

    <meta name="description" content="Automatic FILETAGS application in org-roam" />
    <meta name="twitter:card" content="summary">
    <meta name="twitter:description" content="Automatic FILETAGS application in org-roam">
    <meta property="og:description" content="Automatic FILETAGS application in org-roam">
  </head>
  <body>
    <header>
      <nav>
  <ul>
    <li><a class="fa fa-home" href="../" title="Home">&nbsp Home</a></li>
    <li><a class="fa fa-suitcase" href="../projects.html" title="Projects">&nbsp Projects</a></li>
    <li><a class="fa fa-rss" href="../atom.xml" title="RSS">&nbsp RSS</a></li>
    <li><a class="fa fa-github" href="https://github.com/d12frosted" title="GitHub profile">&nbsp GitHub</a></li>
  </ul>
</nav>

    </header>

    <h1 class="post-title">Task management with org-roam Vol. 3: FILETAGS</h1>
    <div class="date"><span>June 25, 2020</span></div>
    <div class="tags"><span>(<a title="All pages tagged 'emacs'." href="../tags/emacs.html">emacs</a>, <a title="All pages tagged 'org-roam'." href="../tags/org-roam.html">org-roam</a>, <a title="All pages tagged 'org-mode'." href="../tags/org-mode.html">org-mode</a>)</span></div>
    <article>
      <section>
        <p>In the previous articles (<a href="https://d12frosted.io/posts/2020-06-23-task-management-with-roam-vol1.html">vol1</a> and <a href="https://d12frosted.io/posts/2020-06-24-task-management-with-roam-vol2.html">vol2</a>) we walked the path to <a href="https://github.com/org-roam/org-roam">org-roam</a> and solved the issue with garbage in the category column of agenda. Today we are going to explore meta projects dedicated to specific person, tag inheritance and moving such projects to separate <code class="verbatim">org-roam</code> files. As result, we will have code for automatic tagging based on the title.</p>
<p>Aside from regular meta projects (like personal blog) I also create meta projects for people and locations. This is helpful, because some of the tasks are really related to someone specifically. For example, when I need to return a borrowed book, I just create a task for this.</p>
<pre class="org"><code>* Frodo Baggins                                               :@FrodoBaggins:

** TODO Return 'The Lord of the Rings' book

** TODO Farewell party                                             :PROJECT:

It feels like Mr. Frodo is about to live Shire. So we are going to setup a
farewell party for him.

*** TODO Talk to Samwise Gamgee                            :@SamwiseGamgee:

*** TODO Talk to Meriadoc Brandybuck                  :@MeriadocBrandybuck:

*** TODO Talk to Peregrin Took                              :@PeregrinTook:

*** TODO Tie a pair of wool socks

I am not sure where he is going, so a pair of warm wool socks should be good.
At least they can be used to protect bottles of wine during journey. That is in
case Frodo doesn't wear socks. But how could it be? Everyone does!
</code></pre>
<p><strong>Change Log:</strong></p>
<ul>
<li><code>[2021-01-24 Sun]</code>: Since some of the functionality mentioned in the original article was merged to <code class="verbatim">org-roam</code>, all code is updated to reflect the current state of affairs.</li>
<li><code>[2021-03-02 Tue]</code>: Update naming convention to match <a href="https://github.com/d12frosted/environment/tree/master/emacs">personal configurations</a>.</li>
<li><code>[2021-05-10 Mon]</code>: Update post to reflect changes in <a href="https://github.com/org-roam/org-roam/pull/1401">org-roam v2</a>. Previous version of this article is available on <a href="https://github.com/d12frosted/d12frosted.io/blob/c16870cab6ebbaafdf73c7c3589abbd27c20ac52/posts/2020-06-25-task-management-with-roam-vol3.org">GitHub</a>.</li>
</ul>
<!--more-->

<p>Now, apart from some misconception about hobbits, there are few important points to note.</p>
<ol>
<li>Due to <a href="https://orgmode.org/manual/Tag-Inheritance.html">tags inheritance</a>, all of the subheadings of <code class="verbatim">Frodo Baggins</code> have <code class="verbatim">@FrodoBaggins</code> tag.</li>
<li>Tasks tagged with other people also have the <code class="verbatim">@FrodoBaggins</code> tag.</li>
</ol>
<p>Thanks to inheritance, it’s easy to find all tasks related to Frodo Baggins via <code class="verbatim">org-agenda</code>. It even enables the search of overlapping tasks. For example, tasks related to Frodo and Samwise. For more information, take a look at the <a href="https://orgmode.org/manual/Matching-tags-and-properties.html#Matching-tags-and-properties">matching tags and properties</a> section of the manual.</p>
<div class="post-image post-image-split">
<img src="../images/org-roam-task-management-vol3-1.png" /><img src="../images/org-roam-task-management-vol3-2.png" />
</div>

<p>With <code class="verbatim">org-roam</code>, each person has its own file.</p>
<pre class="org"><code>#+title: Frodo Baggins
#+filetags: @FrodoBaggins people

* Tasks
** TODO Return 'The Lord of the Rings' book

** TODO Farewell party                                             :PROJECT:

It feels like Mr. Frodo is about to live Shire. So we are going to setup a
farewell party for him.

*** TODO Talk to Samwise Gamgee                            :@SamwiseGamgee:

*** TODO Talk to Meriadoc Brandybuck                  :@MeriadocBrandybuck:

*** TODO Talk to Peregrin Took                              :@PeregrinTook:

*** TODO Tie a pair of wool socks

I am not sure where he is going, so a pair of warm wool socks should be good.
At least they can be used to protect bottles of wine during journey. That is in
case Frodo doesn't wear socks. But how could it be? Everyone does!
</code></pre>
<p>In order to maintain the feature where <code class="verbatim">@FrodoBaggins</code> tag is applied to all TODO items we have to use <code class="verbatim">filetags</code> property. I am also using id to mark Frodo Baggins as a person (even though he is a hobbit!). This helps me in two ways. First of all, it gives me clear understanding that this entity is a person (some people do have strange names). Secondly, it serves me in automation and filtering (as example, checkout <a href="https://d12frosted.io/posts/2021-01-24-task-management-with-roam-vol6.html">Select a person and view related tasks</a> post).</p>
<p>Now, when I see a headline with title and tag being literally the same (with few programmable exceptions) or the file with <code class="verbatim">title</code> and <code class="verbatim">filetags</code> being the same (with few programmable exceptions), I am feeling nervous. Especially since I am prone to mistakes.</p>
<p>So what I do - I automate <code class="verbatim">filetags</code>. I have a function <code class="verbatim">vulpea-ensure-filetag</code> which automatically sets the <code class="verbatim">filetags</code> buffer property for <code class="verbatim">org-roam</code> entries tagged as <code class="verbatim">people</code>. It uses <a href="https://github.com/d12frosted/vulpea/blob/feature/org-roam-v2/vulpea.el#L183">vulpea-buffer-tags-get</a> and <a href="https://github.com/d12frosted/vulpea/blob/feature/org-roam-v2/vulpea.el#L193">vulpea-buffer-tags-add</a> from <a href="https://github.com/d12frosted/vulpea">vulpea</a> library.</p>
<div class="sourceCode" id="cb3" data-org-language="emacs-lisp"><pre class="sourceCode commonlisp"><code class="sourceCode commonlisp"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a>(<span class="kw">defun</span><span class="fu"> vulpea-ensure-filetag </span>()</span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a>  <span class="st">&quot;Add respective file tag if it's missing in the current note.&quot;</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a>  (interactive)</span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a>  (<span class="kw">let</span> ((tags (vulpea-buffer-tags-get))</span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a>        (tag (vulpea--title-as-tag)))</span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a>    (<span class="kw">when</span> (<span class="kw">and</span> (seq-contains-p tags <span class="st">&quot;people&quot;</span>)</span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a>               (<span class="kw">not</span> (seq-contains-p tags tag)))</span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a>      (vulpea-buffer-tags-add tag))))</span>
<span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-10"><a href="#cb3-10" aria-hidden="true" tabindex="-1"></a>(<span class="kw">defun</span><span class="fu"> vulpea--title-to-tag </span>(title)</span>
<span id="cb3-11"><a href="#cb3-11" aria-hidden="true" tabindex="-1"></a>  <span class="st">&quot;Convert TITLE to tag.&quot;</span></span>
<span id="cb3-12"><a href="#cb3-12" aria-hidden="true" tabindex="-1"></a>  (concat <span class="st">&quot;@&quot;</span> (s-replace <span class="st">&quot; &quot;</span> <span class="st">&quot;&quot;</span> title)))</span></code></pre></div>
<p>This function can be called interactively, but since I usually place the tag using <code class="verbatim">vulpea-tags-add</code>, I just add the <code class="verbatim">vulpea-ensure-filetag</code> to the end of that function.</p>
<div class="sourceCode" id="cb4" data-org-language="emacs-lisp"><pre class="sourceCode commonlisp"><code class="sourceCode commonlisp"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a>(<span class="kw">defun</span><span class="fu"> vulpea-tags-add </span>()</span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a>  <span class="st">&quot;Add a tag to current note.&quot;</span></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a>  (interactive)</span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a>  <span class="co">;; since https://github.com/org-roam/org-roam/pull/1515</span></span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a>  <span class="co">;; `org-roam-tag-add' returns added tag, we could avoid reading tags</span></span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a>  <span class="co">;; in `vulpea-ensure-filetag', but this way it can be used in</span></span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a>  <span class="co">;; different contexts while having simple implementation.</span></span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true" tabindex="-1"></a>  (<span class="kw">when</span> (call-interactively #'org-roam-tag-add)</span>
<span id="cb4-9"><a href="#cb4-9" aria-hidden="true" tabindex="-1"></a>    (vulpea-ensure-filetag)))</span></code></pre></div>
<p>Though for other purposes one can put this function to the file visit hook. But hooks are sensitive, so I am going to stop here.</p>
<p>In the <a href="https://d12frosted.io/posts/2020-07-07-task-management-with-roam-vol4.html">next article</a> we are going to talk about automatic insertion of person tag (e.g. <code class="verbatim">@FrodoBaggins</code>) when mentioning this person in other task.</p>
<h1 id="task-management-with-org-roam-series">Task Management with org-roam Series</h1>
<ol>
<li><a href="http://localhost:8000/posts/2020-06-23-task-management-with-roam-vol1.html">Path to Roam</a></li>
<li><a href="https://d12frosted.io/posts/2020-06-24-task-management-with-roam-vol2.html">Categories</a></li>
<li><a href="https://d12frosted.io/posts/2020-06-25-task-management-with-roam-vol3.html">FILETAGS</a></li>
<li><a href="https://d12frosted.io/posts/2020-07-07-task-management-with-roam-vol4.html">Automatic tagging</a></li>
<li><a href="https://d12frosted.io/posts/2021-01-16-task-management-with-roam-vol5.html">Dynamic and fast agenda</a></li>
<li><a href="https://d12frosted.io/posts/2021-01-24-task-management-with-roam-vol6.html">Select a person and view related tasks</a></li>
<li><a href="https://d12frosted.io/posts/2021-05-21-task-management-with-roam-vol7.html">Capture</a></li>
</ol>
<h1 id="references">References</h1>
<ul>
<li><code class="verbatim">org-roam</code> documentation on <a href="https://github.com/org-roam/org-roam">GitHub</a>.</li>
<li><code class="verbatim">org-mode</code> documentation on the <a href="https://orgmode.org">official site</a>.</li>
<li>Org-roam tags on <a href="https://d12frosted.io/posts/2020-06-10-org-roam-tags.html">d12frosted.io</a>.</li>
<li>personal configurations on <a href="https://github.com/d12frosted/environment/blob/master/emacs/lisp/%2Borg-notes.el">GitHub</a>.</li>
</ul>
      </section>
    </article>

    <div class="footer-separator"></div>
    <div class="footer">
      <a target="_blank" class="post-footer-sources" href="https://github.com/d12frosted/d12frosted.io/blob/master/posts/2020-06-25-task-management-with-roam-vol3.org">Sources <i class="fa fa-code fa-lg"></i></a>
    </div>
    <script src="https://utteranc.es/client.js" repo="d12frosted/d12frosted.io" issue-term="pathname" label="comments" theme="github-light" crossorigin="anonymous" async>
    </script>

    <footer>
  <div>
      <p>
        Follow me on <a class="fa fa-github" href="https://github.com/d12frosted" title="GitHub profile">&nbsp GitHub</a>
      </p>
  </div>
</footer>

  </body>
</html>
]]></summary>
</entry>
<entry>
    <title>Task management with org-roam Vol. 2: Categories</title>
    <link href="https://d12frosted.io/posts/2020-06-24-task-management-with-roam-vol2.html" />
    <id>https://d12frosted.io/posts/2020-06-24-task-management-with-roam-vol2.html</id>
    <published>2020-06-24T00:00:00Z</published>
    <updated>2020-06-24T00:00:00Z</updated>
    <summary type="html"><![CDATA[<!doctype html>
<html lang="en">
  <head>
    <title>Task management with org-roam Vol. 2: Categories</title>
    <link rel="stylesheet" href="../css/post-bundle.css" />
    <meta charset="utf-8">
<meta http-equiv="x-ua-compatible" content="ie=edge">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="keywords" content="blog,programming,Haskell,Emacs,fish,bash">
<meta property="og:title" content="Boris Buliga">
<meta property="og:locale" content="es_US">
<meta property="og:url" content="https://d12frosted.io">

<link rel="apple-touch-icon" sizes="180x180" href="../apple-touch-icon.png">
<link rel="icon" type="image/png" sizes="32x32" href="../favicon-32x32.png">
<link rel="icon" type="image/png" sizes="16x16" href="../favicon-16x16.png">
<link rel="manifest" href="../site.webmanifest">

<link href="https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css" rel="stylesheet">
<script>
  MathJax = {
    svg: {
      fontCache: 'global'
    }
  };
</script>
<script type="text/javascript" id="MathJax-script" async src="../library/mathjax/es5/tex-svg.js">
</script>
<script src="../library/chart.js/dist/Chart.min.js"></script>
<script data-goatcounter="https://d12frosted.goatcounter.com/count" async src="//gc.zgo.at/count.js"></script>

    <meta name="description" content="Automatic category extraction from org-roam" />
    <meta name="twitter:card" content="summary">
    <meta name="twitter:description" content="Automatic category extraction from org-roam">
    <meta property="og:description" content="Automatic category extraction from org-roam">
  </head>
  <body>
    <header>
      <nav>
  <ul>
    <li><a class="fa fa-home" href="../" title="Home">&nbsp Home</a></li>
    <li><a class="fa fa-suitcase" href="../projects.html" title="Projects">&nbsp Projects</a></li>
    <li><a class="fa fa-rss" href="../atom.xml" title="RSS">&nbsp RSS</a></li>
    <li><a class="fa fa-github" href="https://github.com/d12frosted" title="GitHub profile">&nbsp GitHub</a></li>
  </ul>
</nav>

    </header>

    <h1 class="post-title">Task management with org-roam Vol. 2: Categories</h1>
    <div class="date"><span>June 24, 2020</span></div>
    <div class="tags"><span>(<a title="All pages tagged 'emacs'." href="../tags/emacs.html">emacs</a>, <a title="All pages tagged 'org-roam'." href="../tags/org-roam.html">org-roam</a>, <a title="All pages tagged 'org-mode'." href="../tags/org-mode.html">org-mode</a>)</span></div>
    <article>
      <section>
        <p>In the <a href="https://d12frosted.io/posts/2020-06-23-task-management-with-roam-vol1.html">previous article</a> we set a ground for moving tasks to <a href="https://github.com/org-roam/org-roam">org-roam</a>, and encountered an issue with visual garbage in the agenda buffer. Namely, <code class="verbatim">org-roam</code> file id as part of the category. In this article, we are going to explore the means to overcome this issue.</p>
<div class="post-image post-image-split">
<img src="../images/org-roam-task-management-vol2-1.png" /><img src="../images/org-roam-task-management-vol2-2.png" />
</div>

<p><strong>Change Log:</strong></p>
<ul>
<li><code>[2021-03-02 Tue]</code>: Update category extraction function to use <code class="verbatim">TITLE</code> of the note and enforce length limit. Kudos to <a href="https://github.com/real-or-random/">Tim Ruffing</a> for the idea.</li>
<li><code>[2021-03-02 Tue]</code>: Update naming convention to match <a href="https://github.com/d12frosted/environment/tree/master/emacs">personal configurations</a>.</li>
<li><code>[2021-05-10 Mon]</code>: Update post to reflect changes in <a href="https://github.com/org-roam/org-roam/pull/1401">org-roam v2</a>. Previous version of this article is available on <a href="https://github.com/d12frosted/d12frosted.io/blob/c16870cab6ebbaafdf73c7c3589abbd27c20ac52/posts/2020-06-24-task-management-with-roam-vol2.org">GitHub</a>.</li>
</ul>
<!--more-->

<p>On of the simplest solutions is to mimic solution for headlines by setting <code class="verbatim">CATEGORY</code> property on the file level (manually or by using <code class="verbatim">org-set-property</code>).</p>
<pre class="org"><code>:PROPERTIES:
:CATEGORY:               emacs-plus
:END:
#+title: emacs-plus

...
</code></pre>
<pre class="org"><code>:PROPERTIES:
:CATEGORY:               blog
:END:
#+title: Blog

...
</code></pre>
<div class="post-image">
<img src="../images/org-roam-task-management-vol2-2.png" />
</div>

<p>While this works, it is a manual labor. And in most cases we want to use <code class="verbatim">TITLE</code> as <code class="verbatim">CATEGORY</code>, at least for agenda buffer. Fortunately, we can help agenda to properly parse the category by modifying the value of <code class="verbatim">org-agenda-prefix-format</code>, which allows to specify how to render each line in the different agenda buffers (e.g. regular agenda, in the list of todo tasks etc). We are looking for the capability to evaluate arbitrary lisp expressions. The default value of this variable is</p>
<div class="sourceCode" id="cb3" data-org-language="emacs-lisp"><pre class="sourceCode commonlisp"><code class="sourceCode commonlisp"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a>((agenda . <span class="st">&quot; %i %-12:c%?-12t% s&quot;</span>)</span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a> (todo . <span class="st">&quot; %i %-12:c&quot;</span>)</span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a> (tags . <span class="st">&quot; %i %-12:c&quot;</span>)</span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a> (<span class="kw">search</span> . <span class="st">&quot; %i %-12:c&quot;</span>))</span></code></pre></div>
<p>The interesting part is <code class="verbatim">%-12:c</code> which means:</p>
<ul>
<li>Give the category (because of <code class="verbatim">c</code>) a 12 chars wide field, padded with whitespace on the right (because of <code class="verbatim">-</code>).</li>
<li>Append a colon if there is a category (because of <code class="verbatim">:</code>).</li>
<li>Finally, append the category of the item, or as given by the <code class="verbatim">CATEGORY</code> property, or derived from the file name.</li>
</ul>
<p>Instead of <code class="verbatim">c</code> we can use any expression.</p>
<div class="sourceCode" id="cb4" data-org-language="emacs-lisp"><pre class="sourceCode commonlisp"><code class="sourceCode commonlisp"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a>(<span class="kw">setq</span> org-agenda-prefix-format</span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a>      '((agenda . <span class="st">&quot; %i %-12(vulpea-agenda-category)%?-12t% s&quot;</span>)</span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a>        (todo . <span class="st">&quot; %i %-12(vulpea-agenda-category) &quot;</span>)</span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a>        (tags . <span class="st">&quot; %i %-12(vulpea-agenda-category) &quot;</span>)</span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a>        (<span class="kw">search</span> . <span class="st">&quot; %i %-12(vaulpea-agenda-category) &quot;</span>)))</span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a>(<span class="kw">defun</span><span class="fu"> vulpea-agenda-category </span>()</span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true" tabindex="-1"></a>  <span class="st">&quot;Get category of item at point for agenda.</span></span>
<span id="cb4-9"><a href="#cb4-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-10"><a href="#cb4-10" aria-hidden="true" tabindex="-1"></a><span class="st">Category is defined by one of the following items:</span></span>
<span id="cb4-11"><a href="#cb4-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-12"><a href="#cb4-12" aria-hidden="true" tabindex="-1"></a><span class="st">- CATEGORY property</span></span>
<span id="cb4-13"><a href="#cb4-13" aria-hidden="true" tabindex="-1"></a><span class="st">- TITLE keyword</span></span>
<span id="cb4-14"><a href="#cb4-14" aria-hidden="true" tabindex="-1"></a><span class="st">- TITLE property</span></span>
<span id="cb4-15"><a href="#cb4-15" aria-hidden="true" tabindex="-1"></a><span class="st">- filename without directory and extension</span></span>
<span id="cb4-16"><a href="#cb4-16" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-17"><a href="#cb4-17" aria-hidden="true" tabindex="-1"></a><span class="st">Usage example:</span></span>
<span id="cb4-18"><a href="#cb4-18" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-19"><a href="#cb4-19" aria-hidden="true" tabindex="-1"></a><span class="st">  (setq org-agenda-prefix-format</span></span>
<span id="cb4-20"><a href="#cb4-20" aria-hidden="true" tabindex="-1"></a><span class="st">        '((agenda . </span><span class="sc">\&quot;</span><span class="st"> %(vulpea-agenda-category) %?-12t %12s</span><span class="sc">\&quot;</span><span class="st">)))</span></span>
<span id="cb4-21"><a href="#cb4-21" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-22"><a href="#cb4-22" aria-hidden="true" tabindex="-1"></a><span class="st">Refer to `org-agenda-prefix-format' for more information.&quot;</span></span>
<span id="cb4-23"><a href="#cb4-23" aria-hidden="true" tabindex="-1"></a>  (<span class="kw">let*</span> ((file-name (<span class="kw">when</span> buffer-file-name</span>
<span id="cb4-24"><a href="#cb4-24" aria-hidden="true" tabindex="-1"></a>                      (file-name-sans-extension</span>
<span id="cb4-25"><a href="#cb4-25" aria-hidden="true" tabindex="-1"></a>                       (file-name-nondirectory buffer-file-name))))</span>
<span id="cb4-26"><a href="#cb4-26" aria-hidden="true" tabindex="-1"></a>         (title (vulpea-buffer-prop-get <span class="st">&quot;title&quot;</span>))</span>
<span id="cb4-27"><a href="#cb4-27" aria-hidden="true" tabindex="-1"></a>         (category (org-get-category)))</span>
<span id="cb4-28"><a href="#cb4-28" aria-hidden="true" tabindex="-1"></a>    (<span class="kw">or</span> (<span class="kw">if</span> (<span class="kw">and</span></span>
<span id="cb4-29"><a href="#cb4-29" aria-hidden="true" tabindex="-1"></a>             title</span>
<span id="cb4-30"><a href="#cb4-30" aria-hidden="true" tabindex="-1"></a>             (<span class="kw">string-equal</span> category file-name))</span>
<span id="cb4-31"><a href="#cb4-31" aria-hidden="true" tabindex="-1"></a>            title</span>
<span id="cb4-32"><a href="#cb4-32" aria-hidden="true" tabindex="-1"></a>          category)</span>
<span id="cb4-33"><a href="#cb4-33" aria-hidden="true" tabindex="-1"></a>        <span class="st">&quot;&quot;</span>)))</span></code></pre></div>
<p>In order to extract title, I am using <code class="verbatim">vulpea-buffer-prop-get</code> from <a href="https://github.com/d12frosted/vulpea">vulpea</a> library. It’s <a href="https://github.com/d12frosted/vulpea/blob/feature/org-roam-v2/vulpea.el#L239">defined</a> as:</p>
<div class="sourceCode" id="cb5" data-org-language="emacs-lisp"><pre class="sourceCode commonlisp"><code class="sourceCode commonlisp"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a>(<span class="kw">defun</span><span class="fu"> vulpea-buffer-prop-get </span>(name)</span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a>  <span class="st">&quot;Get a buffer property called NAME as a string.&quot;</span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a>  (org-with-point-at <span class="dv">1</span></span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a>    (<span class="kw">when</span> (re-search-forward (concat <span class="st">&quot;^</span><span class="ch">#\\</span><span class="st">+&quot;</span> name <span class="st">&quot;: </span><span class="sc">\\</span><span class="st">(.*</span><span class="sc">\\</span><span class="st">)&quot;</span>)</span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a>                             (point-max) <span class="kw">t</span>)</span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a>      (buffer-substring-no-properties</span>
<span id="cb5-7"><a href="#cb5-7" aria-hidden="true" tabindex="-1"></a>       (match-beginning <span class="dv">1</span>)</span>
<span id="cb5-8"><a href="#cb5-8" aria-hidden="true" tabindex="-1"></a>       (match-end <span class="dv">1</span>)))))</span></code></pre></div>
<div class="post-image">
<img src="../images/org-roam-task-management-vol2-3.png" />
</div>

<p>Now if we remove the manually set <code class="verbatim">CATEGORY</code> property from both files we will get the same result with nicely parsed categories. Please note that these two approaches can be mixed. For example, if you wish to override the category, just set this property explicitly and call it a day.</p>
<p>Additionally, it’s easy to extend this function to truncate overly long categories (in the screenshot above, <code class="verbatim">Some project with ridiculously long title</code> and <code class="verbatim">Frodo Baggins</code> are examples of long categories). We will use <a href="https://github.com/magnars/s.el">s.el</a> library to achieve this.</p>
<div class="sourceCode" id="cb6" data-org-language="emacs-lisp"><pre class="sourceCode commonlisp"><code class="sourceCode commonlisp"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a>(<span class="kw">setq</span> org-agenda-prefix-format</span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a>      '((agenda . <span class="st">&quot; %i %(vulpea-agenda-category 12)%?-12t% s&quot;</span>)</span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a>        (todo . <span class="st">&quot; %i %(vulpea-agenda-category 12) &quot;</span>)</span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a>        (tags . <span class="st">&quot; %i %(vulpea-agenda-category 12) &quot;</span>)</span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a>        (<span class="kw">search</span> . <span class="st">&quot; %i %(vaulpea-agenda-category 12) &quot;</span>)))</span>
<span id="cb6-6"><a href="#cb6-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-7"><a href="#cb6-7" aria-hidden="true" tabindex="-1"></a>(<span class="kw">defun</span><span class="fu"> vulpea-agenda-category </span>(&amp;optional len)</span>
<span id="cb6-8"><a href="#cb6-8" aria-hidden="true" tabindex="-1"></a>  <span class="st">&quot;Get category of item at point for agenda.</span></span>
<span id="cb6-9"><a href="#cb6-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-10"><a href="#cb6-10" aria-hidden="true" tabindex="-1"></a><span class="st">Category is defined by one of the following items:</span></span>
<span id="cb6-11"><a href="#cb6-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-12"><a href="#cb6-12" aria-hidden="true" tabindex="-1"></a><span class="st">- CATEGORY property</span></span>
<span id="cb6-13"><a href="#cb6-13" aria-hidden="true" tabindex="-1"></a><span class="st">- TITLE keyword</span></span>
<span id="cb6-14"><a href="#cb6-14" aria-hidden="true" tabindex="-1"></a><span class="st">- TITLE property</span></span>
<span id="cb6-15"><a href="#cb6-15" aria-hidden="true" tabindex="-1"></a><span class="st">- filename without directory and extension</span></span>
<span id="cb6-16"><a href="#cb6-16" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-17"><a href="#cb6-17" aria-hidden="true" tabindex="-1"></a><span class="st">When LEN is a number, resulting string is padded right with</span></span>
<span id="cb6-18"><a href="#cb6-18" aria-hidden="true" tabindex="-1"></a><span class="st">spaces and then truncated with ... on the right if result is</span></span>
<span id="cb6-19"><a href="#cb6-19" aria-hidden="true" tabindex="-1"></a><span class="st">longer than LEN.</span></span>
<span id="cb6-20"><a href="#cb6-20" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-21"><a href="#cb6-21" aria-hidden="true" tabindex="-1"></a><span class="st">Usage example:</span></span>
<span id="cb6-22"><a href="#cb6-22" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-23"><a href="#cb6-23" aria-hidden="true" tabindex="-1"></a><span class="st">  (setq org-agenda-prefix-format</span></span>
<span id="cb6-24"><a href="#cb6-24" aria-hidden="true" tabindex="-1"></a><span class="st">        '((agenda . </span><span class="sc">\&quot;</span><span class="st"> %(vulpea-agenda-category) %?-12t %12s</span><span class="sc">\&quot;</span><span class="st">)))</span></span>
<span id="cb6-25"><a href="#cb6-25" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-26"><a href="#cb6-26" aria-hidden="true" tabindex="-1"></a><span class="st">Refer to `org-agenda-prefix-format' for more information.&quot;</span></span>
<span id="cb6-27"><a href="#cb6-27" aria-hidden="true" tabindex="-1"></a>  (<span class="kw">let*</span> ((file-name (<span class="kw">when</span> buffer-file-name</span>
<span id="cb6-28"><a href="#cb6-28" aria-hidden="true" tabindex="-1"></a>                      (file-name-sans-extension</span>
<span id="cb6-29"><a href="#cb6-29" aria-hidden="true" tabindex="-1"></a>                       (file-name-nondirectory buffer-file-name))))</span>
<span id="cb6-30"><a href="#cb6-30" aria-hidden="true" tabindex="-1"></a>         (title (vulpea-buffer-prop-get <span class="st">&quot;title&quot;</span>))</span>
<span id="cb6-31"><a href="#cb6-31" aria-hidden="true" tabindex="-1"></a>         (category (org-get-category))</span>
<span id="cb6-32"><a href="#cb6-32" aria-hidden="true" tabindex="-1"></a>         (result</span>
<span id="cb6-33"><a href="#cb6-33" aria-hidden="true" tabindex="-1"></a>          (<span class="kw">or</span> (<span class="kw">if</span> (<span class="kw">and</span></span>
<span id="cb6-34"><a href="#cb6-34" aria-hidden="true" tabindex="-1"></a>                   title</span>
<span id="cb6-35"><a href="#cb6-35" aria-hidden="true" tabindex="-1"></a>                   (<span class="kw">string-equal</span> category file-name))</span>
<span id="cb6-36"><a href="#cb6-36" aria-hidden="true" tabindex="-1"></a>                  title</span>
<span id="cb6-37"><a href="#cb6-37" aria-hidden="true" tabindex="-1"></a>                category)</span>
<span id="cb6-38"><a href="#cb6-38" aria-hidden="true" tabindex="-1"></a>              <span class="st">&quot;&quot;</span>)))</span>
<span id="cb6-39"><a href="#cb6-39" aria-hidden="true" tabindex="-1"></a>    (<span class="kw">if</span> (<span class="kw">numberp</span> len)</span>
<span id="cb6-40"><a href="#cb6-40" aria-hidden="true" tabindex="-1"></a>        (s-truncate len (s-pad-right len <span class="st">&quot; &quot;</span> result))</span>
<span id="cb6-41"><a href="#cb6-41" aria-hidden="true" tabindex="-1"></a>      result)))</span></code></pre></div>
<div class="post-image">
<img src="../images/org-roam-task-management-vol2-4.png" />
</div>

<p>Now the agenda is clean.</p>
<p>In the <a href="https://d12frosted.io/posts/2020-06-25-task-management-with-roam-vol3.html">next article</a> we are going to talk about tagging tasks related to a person. Stay tuned and keep roaming!</p>
<h1 id="task-management-with-org-roam-series">Task Management with org-roam Series</h1>
<ol>
<li><a href="http://d12frosted.io/posts/2020-06-23-task-management-with-roam-vol1.html">Path to Roam</a></li>
<li><a href="https://d12frosted.io/posts/2020-06-24-task-management-with-roam-vol2.html">Categories</a></li>
<li><a href="https://d12frosted.io/posts/2020-06-25-task-management-with-roam-vol3.html">FILETAGS</a></li>
<li><a href="https://d12frosted.io/posts/2020-07-07-task-management-with-roam-vol4.html">Automatic tagging</a></li>
<li><a href="https://d12frosted.io/posts/2021-01-16-task-management-with-roam-vol5.html">Dynamic and fast agenda</a></li>
<li><a href="https://d12frosted.io/posts/2021-01-24-task-management-with-roam-vol6.html">Select a person and view related tasks</a></li>
<li><a href="https://d12frosted.io/posts/2021-05-21-task-management-with-roam-vol7.html">Capture</a></li>
</ol>
<h1 id="references">References</h1>
<ul>
<li><code class="verbatim">org-roam</code> documentation on <a href="https://github.com/org-roam/org-roam">GitHub</a>.</li>
<li><code class="verbatim">org-mode</code> documentation on the <a href="https://orgmode.org">official site</a>.</li>
<li>personal configurations on <a href="https://github.com/d12frosted/environment/blob/master/emacs/lisp/%2Borg-notes.el">GitHub</a>.</li>
</ul>
      </section>
    </article>

    <div class="footer-separator"></div>
    <div class="footer">
      <a target="_blank" class="post-footer-sources" href="https://github.com/d12frosted/d12frosted.io/blob/master/posts/2020-06-24-task-management-with-roam-vol2.org">Sources <i class="fa fa-code fa-lg"></i></a>
    </div>
    <script src="https://utteranc.es/client.js" repo="d12frosted/d12frosted.io" issue-term="pathname" label="comments" theme="github-light" crossorigin="anonymous" async>
    </script>

    <footer>
  <div>
      <p>
        Follow me on <a class="fa fa-github" href="https://github.com/d12frosted" title="GitHub profile">&nbsp GitHub</a>
      </p>
  </div>
</footer>

  </body>
</html>
]]></summary>
</entry>
<entry>
    <title>Task management with org-roam Vol. 1: Path to Roam</title>
    <link href="https://d12frosted.io/posts/2020-06-23-task-management-with-roam-vol1.html" />
    <id>https://d12frosted.io/posts/2020-06-23-task-management-with-roam-vol1.html</id>
    <published>2020-06-23T00:00:00Z</published>
    <updated>2020-06-23T00:00:00Z</updated>
    <summary type="html"><![CDATA[<!doctype html>
<html lang="en">
  <head>
    <title>Task management with org-roam Vol. 1: Path to Roam</title>
    <link rel="stylesheet" href="../css/post-bundle.css" />
    <meta charset="utf-8">
<meta http-equiv="x-ua-compatible" content="ie=edge">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="keywords" content="blog,programming,Haskell,Emacs,fish,bash">
<meta property="og:title" content="Boris Buliga">
<meta property="og:locale" content="es_US">
<meta property="og:url" content="https://d12frosted.io">

<link rel="apple-touch-icon" sizes="180x180" href="../apple-touch-icon.png">
<link rel="icon" type="image/png" sizes="32x32" href="../favicon-32x32.png">
<link rel="icon" type="image/png" sizes="16x16" href="../favicon-16x16.png">
<link rel="manifest" href="../site.webmanifest">

<link href="https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css" rel="stylesheet">
<script>
  MathJax = {
    svg: {
      fontCache: 'global'
    }
  };
</script>
<script type="text/javascript" id="MathJax-script" async src="../library/mathjax/es5/tex-svg.js">
</script>
<script src="../library/chart.js/dist/Chart.min.js"></script>
<script data-goatcounter="https://d12frosted.goatcounter.com/count" async src="//gc.zgo.at/count.js"></script>

    <meta name="description" content="Moving tasks to org-roam" />
    <meta name="twitter:card" content="summary">
    <meta name="twitter:description" content="Moving tasks to org-roam">
    <meta property="og:description" content="Moving tasks to org-roam">
  </head>
  <body>
    <header>
      <nav>
  <ul>
    <li><a class="fa fa-home" href="../" title="Home">&nbsp Home</a></li>
    <li><a class="fa fa-suitcase" href="../projects.html" title="Projects">&nbsp Projects</a></li>
    <li><a class="fa fa-rss" href="../atom.xml" title="RSS">&nbsp RSS</a></li>
    <li><a class="fa fa-github" href="https://github.com/d12frosted" title="GitHub profile">&nbsp GitHub</a></li>
  </ul>
</nav>

    </header>

    <h1 class="post-title">Task management with org-roam Vol. 1: Path to Roam</h1>
    <div class="date"><span>June 23, 2020</span></div>
    <div class="tags"><span>(<a title="All pages tagged 'emacs'." href="../tags/emacs.html">emacs</a>, <a title="All pages tagged 'org-roam'." href="../tags/org-roam.html">org-roam</a>, <a title="All pages tagged 'org-mode'." href="../tags/org-mode.html">org-mode</a>)</span></div>
    <article>
      <section>
        <p><a href="https://orgmode.org">org-mode</a> is a simple outliner for note taking and list management. It <a href="https://d12frosted.io/posts/2016-12-20-Being-an-org-mode-addict.html">doesn’t impose</a> any complex features on users. This is something users excel at by themselves. My suggestion is to continue this tradition and discover task management capabilities in <a href="https://github.com/org-roam/org-roam">org-roam</a>, an <a href="https://orgmode.org">org-mode</a> extension for non-hierarchical notes management.</p>
<div class="post-image">
<img src="../images/org-roam-task-management-vol1-3.png" />
</div>

<p><strong>Change Log:</strong></p>
<ul>
<li><code>[2021-05-10 Mon]</code>: Update post to reflect changes in <a href="https://github.com/org-roam/org-roam/pull/1401">org-roam v2</a>. Previous version of this article is available on <a href="https://github.com/d12frosted/d12frosted.io/blob/c16870cab6ebbaafdf73c7c3589abbd27c20ac52/posts/2020-06-23-task-management-with-roam-vol1.org">GitHub</a>.</li>
</ul>
<!--more-->

<p>Since org-mode gives a lot of freedom, everyone implements tasks management system differently. In the nutshell, most of the implementations I’ve seen consist of the following elements.</p>
<ul>
<li>Task - the simplest actionable item with some <code class="verbatim">TODO</code> state.</li>
<li>Project - a <code class="verbatim">TODO</code> item with outcome requiring multiple steps to achieve it.</li>
<li>Meta project - long lasting project without a final outcome. It consists of projects or tasks. Think of it as of an area or a category. For example, personal blog is a meta project, as it doesn’t have any terminating outcome. It does have projects with specific outcome (like setting up your blog or writing a post) or simple tasks (like renewing SSL certificate), but the blog itself doesn’t have an outcome.</li>
<li>Resource - a person, a tool, a location or whatever possibly related to a task. In plain org-mode usually implemented as a tag.</li>
</ul>
<p>Take a look at the following example of <code class="verbatim">org-mode</code> file with all these elements.</p>
<pre class="org"><code>#+title: Work

* emacs-plus
:PROPERTIES:
:CATEGORY:               emacs-plus
:END:

Emacs Plus is [[https://www.gnu.org/software/emacs/emacs.html][→ GNU Emacs]]
formulae for macOS [[https://brew.sh][→ Homebrew]] package manager. It offers a
wide rage of extra functionality over regular
[[https://formulae.brew.sh/formula/emacs#default][→ Emacs]] package. Emacs Plus
intent is to give the most of 'plus' stuff by default, leaving only
controversial options as opt-in.

** TODO Restore icons selection for =emacs-plus@26=          :@FrodoBaggins:
Frodo Baggins volunteered to help with this.

** TODO [0/3] Automate bottle producing                            :PROJECT:
*** TODO Create a project on Bintray
*** TODO Investigate if =brew test-bot= can be used for =emacs-plus=
*** TODO Write a CI job that creates and uploads bottles

* Blog
:PROPERTIES:
:CATEGORY:               blog
:END:

https://d12frosted.io

** TODO Write a post about org-roam and agenda
** TODO [0/2] Get rid of embedded HTML for images in posts         :PROJECT:
*** TODO Write a custom handler of image links
This should transform link to images into proper HTML.

#+begin_example
  &lt;div class=&quot;post-image post-image&quot;&gt;
  &lt;img src=&quot;/images/some-image.png&quot; /&gt;
  &lt;/div&gt;
#+end_example

*** TODO Replace all image exports by regular org links
</code></pre>
<div class="post-image post-image-split">
<img src="../images/org-roam-task-management-vol1-1.png" /><img src="../images/org-roam-task-management-vol1-2.png" />
</div>

<p>As you can see, it has 2 meta projects: <code class="verbatim">emacs-plus</code> and personal blog, each containing a task and a project. Meta projects have their own category property (set by hand or using <code class="verbatim">org-set-property</code> which is bound to <code class="verbatim">C-c C-x p</code> by default), so in agenda view one can quickly distinguish (and filter) tasks from different meta projects (for example, using <code class="verbatim">org-agenda-filter-by-category</code> which is bound to <code class="verbatim">&lt;</code> by default).</p>
<div class="post-image">
<img src="../images/org-agenda-filter-by-category.gif" />
</div>

<p>Formally (and technically) projects might be defined as a <a href="http://doc.norang.ca/org-mode.html#Projects">task having sub-tasks</a>, but in this rare case I vote for simplicity - project is a task tagged as <code class="verbatim">PROJECT</code>.</p>
<p>When a task relates to a person or some location, I tag it respectively, just use <code class="verbatim">@</code> symbol as a prefix to distinguish from utilitarian tags. Agenda helps to quickly find all tasks with specific tag. Use <code class="verbatim">M-x org-agenda m</code> or <code class="verbatim">M-x
org-agenda M</code> (to list only TODO items).</p>
<div class="post-image">
<img src="../images/org-agenda-filter-by-tags.gif" />
</div>

<p>With <code class="verbatim">org-roam</code> it makes sense to create a separate file for each meta project. In the endless debate ‘many small’ vs ‘few big’ org files, <code class="verbatim">org-roam</code> favours the former approach (though even this is debatable).</p>
<pre class="org"><code>#+title: emacs-plus

Emacs Plus is [[https://www.gnu.org/software/emacs/emacs.html][→ GNU Emacs]] formulae for macOS [[https://brew.sh][→ Homebrew]] package manager. It
offers a wide rage of extra functionality over regular [[https://formulae.brew.sh/formula/emacs#default][→ Emacs]] package. Emacs
Plus intent is to give the most of 'plus' stuff by default, leaving only
controversial options as opt-in.

* Tasks
** TODO Restore icons selection for =emacs-plus@26=          :@FrodoBaggins:
Frodo Baggins volunteered to help with this.

** TODO [0/3] Automate bottle producing                            :PROJECT:
*** TODO Create a project on Bintray
*** TODO Investigate if =brew test-bot= can be used for =emacs-plus=
*** TODO Write a CI job that creates and uploads bottles
</code></pre>
<pre class="org"><code>#+TITLE: Blog

https://d12frosted.io

* Tasks
** TODO Write a post about org-roam and agenda
** TODO [0/2] Get rid of embedded HTML for images in posts         :PROJECT:
*** TODO Write a custom handler of image links
This should transform link to images into proper HTML.

#+begin_example
  &lt;div class=&quot;post-image post-image&quot;&gt;
  &lt;img src=&quot;/images/some-image.png&quot; /&gt;
  &lt;/div&gt;
#+end_example

*** TODO Replace all image exports by regular org links
</code></pre>
<div class="post-image post-image-split">
<img src="../images/org-roam-task-management-vol1-3.png" /><img src="../images/org-roam-task-management-vol1-4.png" />
</div>

<div class="post-image">
<img src="../images/org-roam-task-management-vol1-5.png" />
</div>

<p>So far the transition was simple. However as you can see, in agenda buffer the inferred category contains garbage - note id.</p>
<p>In the <a href="https://d12frosted.io/posts/2020-06-24-task-management-with-roam-vol2.html">next article</a> we are going to explore the means to fix the agenda buffer from the unwanted visual garbage. Stay tuned!</p>
<h1 id="task-management-with-org-roam-series">Task Management with org-roam Series</h1>
<ol>
<li><a href="https://d12frosted.io/posts/2020-06-23-task-management-with-roam-vol1.html">Path to Roam</a></li>
<li><a href="https://d12frosted.io/posts/2020-06-24-task-management-with-roam-vol2.html">Categories</a></li>
<li><a href="https://d12frosted.io/posts/2020-06-25-task-management-with-roam-vol3.html">FILETAGS</a></li>
<li><a href="https://d12frosted.io/posts/2020-07-07-task-management-with-roam-vol4.html">Automatic tagging</a></li>
<li><a href="https://d12frosted.io/posts/2021-01-16-task-management-with-roam-vol5.html">Dynamic and fast agenda</a></li>
<li><a href="https://d12frosted.io/posts/2021-01-24-task-management-with-roam-vol6.html">Select a person and view related tasks</a></li>
<li><a href="https://d12frosted.io/posts/2021-05-21-task-management-with-roam-vol7.html">Capture</a></li>
</ol>
<h1 id="references">References</h1>
<ul>
<li><code class="verbatim">org-roam</code> documentation on <a href="https://github.com/org-roam/org-roam">GitHub</a>.</li>
<li><code class="verbatim">org-mode</code> documentation on the <a href="https://orgmode.org">official site</a>.</li>
<li><a href="http://doc.norang.ca/org-mode.html#Projects">Org Mode - Organize Your Life In Plain Text!</a> by Bernt Hansen.</li>
</ul>
      </section>
    </article>

    <div class="footer-separator"></div>
    <div class="footer">
      <a target="_blank" class="post-footer-sources" href="https://github.com/d12frosted/d12frosted.io/blob/master/posts/2020-06-23-task-management-with-roam-vol1.org">Sources <i class="fa fa-code fa-lg"></i></a>
    </div>
    <script src="https://utteranc.es/client.js" repo="d12frosted/d12frosted.io" issue-term="pathname" label="comments" theme="github-light" crossorigin="anonymous" async>
    </script>

    <footer>
  <div>
      <p>
        Follow me on <a class="fa fa-github" href="https://github.com/d12frosted" title="GitHub profile">&nbsp GitHub</a>
      </p>
  </div>
</footer>

  </body>
</html>
]]></summary>
</entry>
<entry>
    <title>Org-roam tags</title>
    <link href="https://d12frosted.io/posts/2020-06-10-org-roam-tags.html" />
    <id>https://d12frosted.io/posts/2020-06-10-org-roam-tags.html</id>
    <published>2020-06-10T00:00:00Z</published>
    <updated>2020-06-10T00:00:00Z</updated>
    <summary type="html"><![CDATA[<!doctype html>
<html lang="en">
  <head>
    <title>Org-roam tags</title>
    <link rel="stylesheet" href="../css/post-bundle.css" />
    <meta charset="utf-8">
<meta http-equiv="x-ua-compatible" content="ie=edge">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="keywords" content="blog,programming,Haskell,Emacs,fish,bash">
<meta property="og:title" content="Boris Buliga">
<meta property="og:locale" content="es_US">
<meta property="og:url" content="https://d12frosted.io">

<link rel="apple-touch-icon" sizes="180x180" href="../apple-touch-icon.png">
<link rel="icon" type="image/png" sizes="32x32" href="../favicon-32x32.png">
<link rel="icon" type="image/png" sizes="16x16" href="../favicon-16x16.png">
<link rel="manifest" href="../site.webmanifest">

<link href="https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css" rel="stylesheet">
<script>
  MathJax = {
    svg: {
      fontCache: 'global'
    }
  };
</script>
<script type="text/javascript" id="MathJax-script" async src="../library/mathjax/es5/tex-svg.js">
</script>
<script src="../library/chart.js/dist/Chart.min.js"></script>
<script data-goatcounter="https://d12frosted.goatcounter.com/count" async src="//gc.zgo.at/count.js"></script>

    <meta name="description" content="Utility functions to manage org-roam tags" />
    <meta name="twitter:card" content="summary">
    <meta name="twitter:description" content="Utility functions to manage org-roam tags">
    <meta property="og:description" content="Utility functions to manage org-roam tags">
  </head>
  <body>
    <header>
      <nav>
  <ul>
    <li><a class="fa fa-home" href="../" title="Home">&nbsp Home</a></li>
    <li><a class="fa fa-suitcase" href="../projects.html" title="Projects">&nbsp Projects</a></li>
    <li><a class="fa fa-rss" href="../atom.xml" title="RSS">&nbsp RSS</a></li>
    <li><a class="fa fa-github" href="https://github.com/d12frosted" title="GitHub profile">&nbsp GitHub</a></li>
  </ul>
</nav>

    </header>

    <h1 class="post-title">Org-roam tags</h1>
    <div class="date"><span>June 10, 2020</span></div>
    <div class="tags"><span>(<a title="All pages tagged 'emacs'." href="../tags/emacs.html">emacs</a>, <a title="All pages tagged 'org-roam'." href="../tags/org-roam.html">org-roam</a>)</span></div>
    <article>
      <section>
        <p><a href="https://github.com/org-roam/org-roam">Org-roam</a> is a note-taking tool built on top of Emacs and Org. Essentially, it’s a replica of <a href="https://roamresearch.com">Roam Research</a>. These tools provide an easy way to create and manage non-hierarchical notes. If you wish to learn more, just take a look at the <a href="https://org-roam.github.io/org-roam/manual/">Org-roam manual</a> or watch <a href="https://www.youtube.com/watch?v=Lg61ocfxk3c">Making Connections in your Notes</a> video by Matt Williams. Believe me, Org-roam and Roam Research are game-changers. Or even better, don’t believe me and validate my claim by yourself.</p>
<p>Since I am already <a href="https://d12frosted.io/posts/2016-12-20-Being-an-org-mode-addict.html">addicted</a>, it was only natural to prefer <code class="verbatim">org-roam</code> over some web application. Apart from being developed on top of mature Org ecosystem, Emacs brings many merits and extensibility is one of them. Once <code class="verbatim">org-roam</code> introduced tags system in <a href="https://github.com/org-roam/org-roam/blob/master/CHANGELOG.md#111-18-05-2020">v1.1.1</a> I felt the lack of functions to manage them. Adding and removing them by hand is not nice. So in this article I am sharing a snippet that I’ve forged to ease the unbearable lightness of being.</p>
<p><strong>Change Log:</strong></p>
<ul>
<li><code>[2020-10-12 Mon]</code>: Functionality described in this post (and similar functionality to manage aliases) is <a href="https://github.com/org-roam/org-roam/pull/1183">merged to the upstream</a>. Now simply use one of the following functions:
<ul>
<li><code class="verbatim">org-roam-tag-add</code></li>
<li><code class="verbatim">org-roam-tag-delete</code></li>
<li><code class="verbatim">org-roam-alias-add</code></li>
<li><code class="verbatim">org-roam-alias-delete</code></li>
</ul></li>
<li><code>[2021-07-31 Sat]</code>: With <a href="https://github.com/org-roam/org-roam/releases/tag/v2.0.0">release of org-roam v2</a> you should use the following functions:
<ul>
<li><code class="verbatim">org-roam-tag-add</code></li>
<li><code class="verbatim">org-roam-tag-remove</code></li>
<li><code class="verbatim">org-roam-alias-add</code></li>
<li><code class="verbatim">org-roam-alias-remove</code></li>
</ul></li>
</ul>
<!--more-->

<div class="post-image post-image">
<img src="../images/org-roam-tags-demo.gif" />
</div>

<p>When it comes to tags removal, I just want to have a list of tags set in the current buffer and chose one of them to remove. Important thing here is that it should not allow me to remove tag set by directories (see <code class="verbatim">org-roam-tag-sources</code>).</p>
<p>On the other hand, when I add a tag, I want to see the list of all tags set either by buffer property or by directory. I can chose one of them (otherwise I tend to mistype) or add a completely new one.</p>
<p>So let’s implement these two functions. But before that, we need to have a function to get the list of buffer wide tags. For this we can write some simple helper (that uses regexps) or reuse internal API from <code class="verbatim">org-roam</code> (that does all the dirty work for us).</p>
<div class="sourceCode" id="cb1" data-org-language="emacs-lisp"><pre class="sourceCode commonlisp"><code class="sourceCode commonlisp"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a>(<span class="kw">defun</span><span class="fu"> +org-notes-tags-read </span>()</span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>  <span class="st">&quot;Return list of tags as set in the buffer.&quot;</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>  (org-roam--extract-tags-prop (buffer-file-name (buffer-base-buffer))))</span></code></pre></div>
<p>Now it’s easy to implement the function to delete one of the buffer tags.</p>
<div class="sourceCode" id="cb2" data-org-language="emacs-lisp"><pre class="sourceCode commonlisp"><code class="sourceCode commonlisp"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a>(<span class="kw">defun</span><span class="fu"> +org-notes-tags-delete </span>()</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>  <span class="st">&quot;Delete a tag from current note.&quot;</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>  (interactive)</span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>  (<span class="kw">unless</span> (+org-notes-buffer-p)</span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>    (user-error <span class="st">&quot;Current buffer is not a note&quot;</span>))</span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a>  (<span class="kw">let*</span> ((tags (+org-notes-tags-read))</span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a>         (tag (completing-read <span class="st">&quot;Tag: &quot;</span> tags <span class="kw">nil</span> 'require-match)))</span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a>    (+org-buffer-prop-set</span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a>     <span class="st">&quot;ROAM_TAGS&quot;</span></span>
<span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a>     (combine-and-quote-strings (<span class="kw">delete</span> tag tags)))</span>
<span id="cb2-11"><a href="#cb2-11" aria-hidden="true" tabindex="-1"></a>    (org-roam-db--update-tags)))</span></code></pre></div>
<p>Since it works only in the context of <code class="verbatim">org-roam</code> it’s good to have a meaningful error when this function used in the invalid context. Next we read the buffer tags and select one of them using <code class="verbatim">completing-read</code>. The <code class="verbatim">'require-match</code> is just a dummy non-nil value used instead of <code class="verbatim">t</code> as it improves readability.</p>
<p>Next we remove the selected tag from tags and set the result to the buffer property <code class="verbatim">ROAM_TAGS</code>, each tag quoted. Simple as that. I will provide implementation of <code class="verbatim">+org-notes-buffer-p</code> and <code class="verbatim">+org-buffer-prop-set</code> later on.</p>
<p>And the most important function is for adding tags.</p>
<div class="sourceCode" id="cb3" data-org-language="emacs-lisp"><pre class="sourceCode commonlisp"><code class="sourceCode commonlisp"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a>(<span class="kw">defun</span><span class="fu"> +org-notes-tags-add </span>()</span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a>  <span class="st">&quot;Add a tag to current note.&quot;</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a>  (interactive)</span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a>  (<span class="kw">unless</span> (+org-notes-buffer-p)</span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a>    (user-error <span class="st">&quot;Current buffer is not a note&quot;</span>))</span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a>  (<span class="kw">let*</span> ((tags (seq-uniq</span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a>                (+seq-flatten</span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a>                 (+seq-flatten</span>
<span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a>                  (org-roam-db-query [:select tags :from tags])))))</span>
<span id="cb3-10"><a href="#cb3-10" aria-hidden="true" tabindex="-1"></a>         (tag (completing-read <span class="st">&quot;Tag: &quot;</span> tags)))</span>
<span id="cb3-11"><a href="#cb3-11" aria-hidden="true" tabindex="-1"></a>    (<span class="kw">when</span> (string-empty-p tag)</span>
<span id="cb3-12"><a href="#cb3-12" aria-hidden="true" tabindex="-1"></a>      (user-error <span class="st">&quot;Tag can't be empty&quot;</span>))</span>
<span id="cb3-13"><a href="#cb3-13" aria-hidden="true" tabindex="-1"></a>    (+org-buffer-prop-set</span>
<span id="cb3-14"><a href="#cb3-14" aria-hidden="true" tabindex="-1"></a>     <span class="st">&quot;ROAM_TAGS&quot;</span></span>
<span id="cb3-15"><a href="#cb3-15" aria-hidden="true" tabindex="-1"></a>     (combine-and-quote-strings (seq-uniq (<span class="kw">cons</span> tag (+org-notes-tags-read)))))</span>
<span id="cb3-16"><a href="#cb3-16" aria-hidden="true" tabindex="-1"></a>    (org-roam-db--update-tags)))</span></code></pre></div>
<p>It also errors out when called outside of <code class="verbatim">org-roam</code> buffer. Then we query all tags from the <code class="verbatim">org-roam-db</code>. Since this is the list of lists of lists, we have two double flatten the result and then leave only unique entries. After that everything is straightforward.</p>
<p>Now the missing functions.</p>
<div class="sourceCode" id="cb4" data-org-language="emacs-lisp"><pre class="sourceCode commonlisp"><code class="sourceCode commonlisp"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a>(<span class="kw">defun</span><span class="fu"> +org-notes-buffer-p </span>()</span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a>  <span class="st">&quot;Return non-nil if the currently visited buffer is a note.&quot;</span></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a>  (<span class="kw">and</span> buffer-file-name</span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a>       (<span class="kw">string-equal</span> (file-name-as-directory org-roam-directory)</span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a>                     (file-name-directory buffer-file-name))))</span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a>(<span class="kw">defun</span><span class="fu"> +seq-flatten </span>(list-of-lists)</span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true" tabindex="-1"></a>  <span class="st">&quot;Flatten LIST-OF-LISTS.&quot;</span></span>
<span id="cb4-9"><a href="#cb4-9" aria-hidden="true" tabindex="-1"></a>  (<span class="kw">apply</span> #'append list-of-lists))</span>
<span id="cb4-10"><a href="#cb4-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-11"><a href="#cb4-11" aria-hidden="true" tabindex="-1"></a>(<span class="kw">defun</span><span class="fu"> +org-buffer-prop-set </span>(name value)</span>
<span id="cb4-12"><a href="#cb4-12" aria-hidden="true" tabindex="-1"></a>  <span class="st">&quot;Set a buffer property called NAME to VALUE.&quot;</span></span>
<span id="cb4-13"><a href="#cb4-13" aria-hidden="true" tabindex="-1"></a>  (save-excursion</span>
<span id="cb4-14"><a href="#cb4-14" aria-hidden="true" tabindex="-1"></a>    (widen)</span>
<span id="cb4-15"><a href="#cb4-15" aria-hidden="true" tabindex="-1"></a>    (goto-char (point-min))</span>
<span id="cb4-16"><a href="#cb4-16" aria-hidden="true" tabindex="-1"></a>    (<span class="kw">if</span> (re-search-forward (concat <span class="st">&quot;^</span><span class="ch">#\\</span><span class="st">+&quot;</span> name <span class="st">&quot;: </span><span class="sc">\\</span><span class="st">(.*</span><span class="sc">\\</span><span class="st">)&quot;</span>) (point-max) <span class="kw">t</span>)</span>
<span id="cb4-17"><a href="#cb4-17" aria-hidden="true" tabindex="-1"></a>        (replace-match (concat <span class="st">&quot;#+&quot;</span> name <span class="st">&quot;: &quot;</span> value))</span>
<span id="cb4-18"><a href="#cb4-18" aria-hidden="true" tabindex="-1"></a>      <span class="co">;; find the first line that doesn't begin with ':' or '#'</span></span>
<span id="cb4-19"><a href="#cb4-19" aria-hidden="true" tabindex="-1"></a>      (<span class="kw">let</span> ((found))</span>
<span id="cb4-20"><a href="#cb4-20" aria-hidden="true" tabindex="-1"></a>        (while (<span class="kw">not</span> (<span class="kw">or</span> found (eobp)))</span>
<span id="cb4-21"><a href="#cb4-21" aria-hidden="true" tabindex="-1"></a>          (beginning-of-line)</span>
<span id="cb4-22"><a href="#cb4-22" aria-hidden="true" tabindex="-1"></a>          (<span class="kw">if</span> (<span class="kw">or</span> (looking-at <span class="st">&quot;^#&quot;</span>)</span>
<span id="cb4-23"><a href="#cb4-23" aria-hidden="true" tabindex="-1"></a>                  (looking-at <span class="st">&quot;^:&quot;</span>))</span>
<span id="cb4-24"><a href="#cb4-24" aria-hidden="true" tabindex="-1"></a>              (line-move <span class="dv">1</span> <span class="kw">t</span>)</span>
<span id="cb4-25"><a href="#cb4-25" aria-hidden="true" tabindex="-1"></a>            (<span class="kw">setq</span> found <span class="kw">t</span>)))</span>
<span id="cb4-26"><a href="#cb4-26" aria-hidden="true" tabindex="-1"></a>        (insert <span class="st">&quot;#+&quot;</span> name <span class="st">&quot;: &quot;</span> value <span class="st">&quot;</span><span class="sc">\n</span><span class="st">&quot;</span>)))))</span></code></pre></div>
<p>That’s it. You can find all solution as a gist on <a href="https://gist.github.com/d12frosted/4a55f3d072a813159c1d7b31c21bac9a">GitHub</a>. Have fun!</p>
      </section>
    </article>

    <div class="footer-separator"></div>
    <div class="footer">
      <a target="_blank" class="post-footer-sources" href="https://github.com/d12frosted/d12frosted.io/blob/master/posts/2020-06-10-org-roam-tags.org">Sources <i class="fa fa-code fa-lg"></i></a>
    </div>
    <script src="https://utteranc.es/client.js" repo="d12frosted/d12frosted.io" issue-term="pathname" label="comments" theme="github-light" crossorigin="anonymous" async>
    </script>

    <footer>
  <div>
      <p>
        Follow me on <a class="fa fa-github" href="https://github.com/d12frosted" title="GitHub profile">&nbsp GitHub</a>
      </p>
  </div>
</footer>

  </body>
</html>
]]></summary>
</entry>
<entry>
    <title>Emacs: moving to beginning of line</title>
    <link href="https://d12frosted.io/posts/2020-06-04-beginning-of-line.html" />
    <id>https://d12frosted.io/posts/2020-06-04-beginning-of-line.html</id>
    <published>2020-06-04T00:00:00Z</published>
    <updated>2020-06-04T00:00:00Z</updated>
    <summary type="html"><![CDATA[<!doctype html>
<html lang="en">
  <head>
    <title>Emacs: moving to beginning of line</title>
    <link rel="stylesheet" href="../css/post-bundle.css" />
    <meta charset="utf-8">
<meta http-equiv="x-ua-compatible" content="ie=edge">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="keywords" content="blog,programming,Haskell,Emacs,fish,bash">
<meta property="og:title" content="Boris Buliga">
<meta property="og:locale" content="es_US">
<meta property="og:url" content="https://d12frosted.io">

<link rel="apple-touch-icon" sizes="180x180" href="../apple-touch-icon.png">
<link rel="icon" type="image/png" sizes="32x32" href="../favicon-32x32.png">
<link rel="icon" type="image/png" sizes="16x16" href="../favicon-16x16.png">
<link rel="manifest" href="../site.webmanifest">

<link href="https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css" rel="stylesheet">
<script>
  MathJax = {
    svg: {
      fontCache: 'global'
    }
  };
</script>
<script type="text/javascript" id="MathJax-script" async src="../library/mathjax/es5/tex-svg.js">
</script>
<script src="../library/chart.js/dist/Chart.min.js"></script>
<script data-goatcounter="https://d12frosted.goatcounter.com/count" async src="//gc.zgo.at/count.js"></script>

    <meta name="description" content="Convenient functions to move cursor" />
    <meta name="twitter:card" content="summary">
    <meta name="twitter:description" content="Convenient functions to move cursor">
    <meta property="og:description" content="Convenient functions to move cursor">
  </head>
  <body>
    <header>
      <nav>
  <ul>
    <li><a class="fa fa-home" href="../" title="Home">&nbsp Home</a></li>
    <li><a class="fa fa-suitcase" href="../projects.html" title="Projects">&nbsp Projects</a></li>
    <li><a class="fa fa-rss" href="../atom.xml" title="RSS">&nbsp RSS</a></li>
    <li><a class="fa fa-github" href="https://github.com/d12frosted" title="GitHub profile">&nbsp GitHub</a></li>
  </ul>
</nav>

    </header>

    <h1 class="post-title">Emacs: moving to beginning of line</h1>
    <div class="date"><span>June  4, 2020</span></div>
    <div class="tags"><span>(<a title="All pages tagged 'emacs'." href="../tags/emacs.html">emacs</a>)</span></div>
    <article>
      <section>
        <p>In stocks Emacs there is a function <code class="verbatim">move-to-beginning-of-line</code> which is bound to <code class="verbatim">C-a</code> by default. It does exactly what its name implies - moves the cursor to the beginning of line. In case of indented code this is usually not what I want, but instead I would love to move the first visible character of line.</p>
<div class="post-image post-image-half">
<img src="../images/beginning-of-line-haskell.gif" />
</div>

<p>There are packages that does this and even more (for example, <a href="https://github.com/alezost/mwim.el">mwim</a>), but if for some reason you don’t want to add one more package to your dependencies, or you care only about moving to the beginning of line, then you might grab the code that I share in the details. There is a version that also knows how to work with org mode headers and lists.</p>
<div class="post-image post-image-half">
<img src="../images/beginning-of-line-org.gif" />
</div>

<!--more-->

<p>The implementation is pretty straight-forward. We just disable visual movement and jump to first visible character using <code class="verbatim">back-to-indentation</code> and if we didn’t change our location, then we move the beginning of line.</p>
<div class="sourceCode" id="cb1" data-org-language="emacs-lisp"><pre class="sourceCode commonlisp"><code class="sourceCode commonlisp"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a>(<span class="kw">defun</span><span class="fu"> +beginning-of-line </span>(arg)</span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>  <span class="st">&quot;Move point back to indentation of beginning of line.</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a><span class="st">Move point to the first non-whitespace character on this line. If</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a><span class="st">point is already there, move to the beginning of the line.</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a><span class="st">Effectively toggle between the first non-whitespace character and</span></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a><span class="st">the beginning of the line.</span></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a><span class="st">If ARG is not nil, move forward ARG lines first. If point reaches</span></span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a><span class="st">the beginning or end of the buffer, stop there.&quot;</span></span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a>  (interactive <span class="st">&quot;P&quot;</span>)</span>
<span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a>  (<span class="kw">when</span> (<span class="kw">numberp</span> arg)</span>
<span id="cb1-13"><a href="#cb1-13" aria-hidden="true" tabindex="-1"></a>    (<span class="kw">let</span> ((line-move-visual <span class="kw">nil</span>))</span>
<span id="cb1-14"><a href="#cb1-14" aria-hidden="true" tabindex="-1"></a>      (forward-line arg)))</span>
<span id="cb1-15"><a href="#cb1-15" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-16"><a href="#cb1-16" aria-hidden="true" tabindex="-1"></a>  (<span class="kw">let</span> ((orig-point (point)))</span>
<span id="cb1-17"><a href="#cb1-17" aria-hidden="true" tabindex="-1"></a>    (back-to-indentation)</span>
<span id="cb1-18"><a href="#cb1-18" aria-hidden="true" tabindex="-1"></a>    (<span class="kw">when</span> (<span class="op">=</span> orig-point (point))</span>
<span id="cb1-19"><a href="#cb1-19" aria-hidden="true" tabindex="-1"></a>      (move-beginning-of-line <span class="dv">1</span>))))</span>
<span id="cb1-20"><a href="#cb1-20" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-21"><a href="#cb1-21" aria-hidden="true" tabindex="-1"></a>(global-set-key [remap move-beginning-of-line] '+beginning-of-line)</span></code></pre></div>
<p>Now when it comes to similar thing in <code class="verbatim">org-mode</code>, it’s more tricky. In some sense, it’s adaptation o <code class="verbatim">org-beginning-of-line</code>, which doesn’t support desired order of stop points, e.g. I want to stop at first meaningful character, then go left to the first visible character and only then to the beginning of line.</p>
<div class="sourceCode" id="cb2" data-org-language="emacs-lisp"><pre class="sourceCode commonlisp"><code class="sourceCode commonlisp"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a>(<span class="kw">defun</span><span class="fu"> +org-beginning-of-line </span>(arg)</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>  <span class="st">&quot;Move point back to indentation of beginning of line.</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a><span class="st">Move point to the first non-whitespace character on this line. If</span></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a><span class="st">point is already there, move to the beginning of the line.</span></span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a><span class="st">Effectively toggle between the first non-whitespace character and</span></span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a><span class="st">the beginning of the line.</span></span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a><span class="st">When the point is on the heading, move to the beginning of title,</span></span>
<span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a><span class="st">but after any TODO keyword or priority cookie. Repeated usage</span></span>
<span id="cb2-11"><a href="#cb2-11" aria-hidden="true" tabindex="-1"></a><span class="st">moves to the beginning of the line.</span></span>
<span id="cb2-12"><a href="#cb2-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-13"><a href="#cb2-13" aria-hidden="true" tabindex="-1"></a><span class="st">When the point is on the bullet, first move to the beginning of</span></span>
<span id="cb2-14"><a href="#cb2-14" aria-hidden="true" tabindex="-1"></a><span class="st">the item, but after bullet and check-box. Repeated usage</span></span>
<span id="cb2-15"><a href="#cb2-15" aria-hidden="true" tabindex="-1"></a><span class="st">moves to the first non-whitespace character and then to the</span></span>
<span id="cb2-16"><a href="#cb2-16" aria-hidden="true" tabindex="-1"></a><span class="st">beginning of the line.</span></span>
<span id="cb2-17"><a href="#cb2-17" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-18"><a href="#cb2-18" aria-hidden="true" tabindex="-1"></a><span class="st">If ARG is not nil, move forward ARG lines first. If point reaches</span></span>
<span id="cb2-19"><a href="#cb2-19" aria-hidden="true" tabindex="-1"></a><span class="st">the beginning or end of the buffer, stop there.&quot;</span></span>
<span id="cb2-20"><a href="#cb2-20" aria-hidden="true" tabindex="-1"></a>  (interactive <span class="st">&quot;P&quot;</span>)</span>
<span id="cb2-21"><a href="#cb2-21" aria-hidden="true" tabindex="-1"></a>  (<span class="kw">let</span> ((origin (point)))</span>
<span id="cb2-22"><a href="#cb2-22" aria-hidden="true" tabindex="-1"></a>    <span class="co">;; move to the beginning of line, so regexp lookups properly capture context</span></span>
<span id="cb2-23"><a href="#cb2-23" aria-hidden="true" tabindex="-1"></a>    (<span class="kw">when</span> (<span class="kw">numberp</span> arg)</span>
<span id="cb2-24"><a href="#cb2-24" aria-hidden="true" tabindex="-1"></a>      (<span class="kw">let</span> ((line-move-visual <span class="kw">nil</span>))</span>
<span id="cb2-25"><a href="#cb2-25" aria-hidden="true" tabindex="-1"></a>        (forward-line arg)))</span>
<span id="cb2-26"><a href="#cb2-26" aria-hidden="true" tabindex="-1"></a>    (beginning-of-line)</span>
<span id="cb2-27"><a href="#cb2-27" aria-hidden="true" tabindex="-1"></a>    (<span class="kw">cond</span></span>
<span id="cb2-28"><a href="#cb2-28" aria-hidden="true" tabindex="-1"></a>     ((<span class="kw">let</span> ((case-fold-search <span class="kw">nil</span>)) (looking-at org-complex-heading-regexp))</span>
<span id="cb2-29"><a href="#cb2-29" aria-hidden="true" tabindex="-1"></a>      <span class="co">;; at the headline, special position is before the title, but after any</span></span>
<span id="cb2-30"><a href="#cb2-30" aria-hidden="true" tabindex="-1"></a>      <span class="co">;; </span><span class="al">TODO</span><span class="co"> keyword or priority cookie.</span></span>
<span id="cb2-31"><a href="#cb2-31" aria-hidden="true" tabindex="-1"></a>      (<span class="kw">let</span> ((refpos (<span class="kw">min</span> (<span class="op">1+</span> (<span class="kw">or</span> (match-end <span class="dv">3</span>) (match-end <span class="dv">2</span>) (match-end <span class="dv">1</span>)))</span>
<span id="cb2-32"><a href="#cb2-32" aria-hidden="true" tabindex="-1"></a>                         (line-end-position)))</span>
<span id="cb2-33"><a href="#cb2-33" aria-hidden="true" tabindex="-1"></a>            (bol (point)))</span>
<span id="cb2-34"><a href="#cb2-34" aria-hidden="true" tabindex="-1"></a>        (<span class="kw">when</span> (<span class="kw">or</span> (<span class="op">&gt;</span> origin refpos) (<span class="op">=</span> origin bol))</span>
<span id="cb2-35"><a href="#cb2-35" aria-hidden="true" tabindex="-1"></a>          (goto-char refpos))))</span>
<span id="cb2-36"><a href="#cb2-36" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-37"><a href="#cb2-37" aria-hidden="true" tabindex="-1"></a>     ((<span class="kw">and</span> (looking-at org-list-full-item-re)</span>
<span id="cb2-38"><a href="#cb2-38" aria-hidden="true" tabindex="-1"></a>           (memq (org-element-type (save-match-data (org-element-at-point)))</span>
<span id="cb2-39"><a href="#cb2-39" aria-hidden="true" tabindex="-1"></a>                 '(item plain-list)))</span>
<span id="cb2-40"><a href="#cb2-40" aria-hidden="true" tabindex="-1"></a>      <span class="co">;; Set special position at first white space character after</span></span>
<span id="cb2-41"><a href="#cb2-41" aria-hidden="true" tabindex="-1"></a>      <span class="co">;; bullet, and check-box, if any.</span></span>
<span id="cb2-42"><a href="#cb2-42" aria-hidden="true" tabindex="-1"></a>      (<span class="kw">let</span> ((after-bullet</span>
<span id="cb2-43"><a href="#cb2-43" aria-hidden="true" tabindex="-1"></a>             (<span class="kw">let</span> ((box (match-end <span class="dv">3</span>)))</span>
<span id="cb2-44"><a href="#cb2-44" aria-hidden="true" tabindex="-1"></a>               (<span class="kw">cond</span> ((<span class="kw">not</span> box) (match-end <span class="dv">1</span>))</span>
<span id="cb2-45"><a href="#cb2-45" aria-hidden="true" tabindex="-1"></a>                     ((<span class="kw">eq</span> (char-after box) ?\s) (<span class="op">1+</span> box))</span>
<span id="cb2-46"><a href="#cb2-46" aria-hidden="true" tabindex="-1"></a>                     (<span class="kw">t</span> box)))))</span>
<span id="cb2-47"><a href="#cb2-47" aria-hidden="true" tabindex="-1"></a>        <span class="co">;; since we want proper rotation, we go back to the original point so</span></span>
<span id="cb2-48"><a href="#cb2-48" aria-hidden="true" tabindex="-1"></a>        <span class="co">;; `bolp' works as expected</span></span>
<span id="cb2-49"><a href="#cb2-49" aria-hidden="true" tabindex="-1"></a>        (goto-char origin)</span>
<span id="cb2-50"><a href="#cb2-50" aria-hidden="true" tabindex="-1"></a>        (<span class="kw">cond</span></span>
<span id="cb2-51"><a href="#cb2-51" aria-hidden="true" tabindex="-1"></a>         ((<span class="kw">or</span> (<span class="op">&gt;</span> origin after-bullet) (bolp))</span>
<span id="cb2-52"><a href="#cb2-52" aria-hidden="true" tabindex="-1"></a>          (goto-char after-bullet))</span>
<span id="cb2-53"><a href="#cb2-53" aria-hidden="true" tabindex="-1"></a>         ((<span class="op">=</span> origin after-bullet)</span>
<span id="cb2-54"><a href="#cb2-54" aria-hidden="true" tabindex="-1"></a>          (back-to-indentation))</span>
<span id="cb2-55"><a href="#cb2-55" aria-hidden="true" tabindex="-1"></a>         ((<span class="op">=</span> origin (point))</span>
<span id="cb2-56"><a href="#cb2-56" aria-hidden="true" tabindex="-1"></a>          (move-beginning-of-line <span class="dv">1</span>)))))</span>
<span id="cb2-57"><a href="#cb2-57" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-58"><a href="#cb2-58" aria-hidden="true" tabindex="-1"></a>     (<span class="kw">t</span></span>
<span id="cb2-59"><a href="#cb2-59" aria-hidden="true" tabindex="-1"></a>      (back-to-indentation)</span>
<span id="cb2-60"><a href="#cb2-60" aria-hidden="true" tabindex="-1"></a>      (<span class="kw">when</span> (<span class="op">=</span> origin (point))</span>
<span id="cb2-61"><a href="#cb2-61" aria-hidden="true" tabindex="-1"></a>        (move-beginning-of-line <span class="dv">1</span>))))))</span>
<span id="cb2-62"><a href="#cb2-62" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-63"><a href="#cb2-63" aria-hidden="true" tabindex="-1"></a>(define-key org-mode-map (kbd <span class="st">&quot;C-a&quot;</span>) '+org-beginning-of-line)</span></code></pre></div>
      </section>
    </article>

    <div class="footer-separator"></div>
    <div class="footer">
      <a target="_blank" class="post-footer-sources" href="https://github.com/d12frosted/d12frosted.io/blob/master/posts/2020-06-04-beginning-of-line.org">Sources <i class="fa fa-code fa-lg"></i></a>
    </div>
    <script src="https://utteranc.es/client.js" repo="d12frosted/d12frosted.io" issue-term="pathname" label="comments" theme="github-light" crossorigin="anonymous" async>
    </script>

    <footer>
  <div>
      <p>
        Follow me on <a class="fa fa-github" href="https://github.com/d12frosted" title="GitHub profile">&nbsp GitHub</a>
      </p>
  </div>
</footer>

  </body>
</html>
]]></summary>
</entry>
<entry>
    <title>Readings Vol. I: precondition encoding</title>
    <link href="https://d12frosted.io/posts/2020-02-01-readings-vol-1.html" />
    <id>https://d12frosted.io/posts/2020-02-01-readings-vol-1.html</id>
    <published>2020-02-01T00:00:00Z</published>
    <updated>2020-02-01T00:00:00Z</updated>
    <summary type="html"><![CDATA[<!doctype html>
<html lang="en">
  <head>
    <title>Readings Vol. I: precondition encoding</title>
    <link rel="stylesheet" href="../css/post-bundle.css" />
    <meta charset="utf-8">
<meta http-equiv="x-ua-compatible" content="ie=edge">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="keywords" content="blog,programming,Haskell,Emacs,fish,bash">
<meta property="og:title" content="Boris Buliga">
<meta property="og:locale" content="es_US">
<meta property="og:url" content="https://d12frosted.io">

<link rel="apple-touch-icon" sizes="180x180" href="../apple-touch-icon.png">
<link rel="icon" type="image/png" sizes="32x32" href="../favicon-32x32.png">
<link rel="icon" type="image/png" sizes="16x16" href="../favicon-16x16.png">
<link rel="manifest" href="../site.webmanifest">

<link href="https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css" rel="stylesheet">
<script>
  MathJax = {
    svg: {
      fontCache: 'global'
    }
  };
</script>
<script type="text/javascript" id="MathJax-script" async src="../library/mathjax/es5/tex-svg.js">
</script>
<script src="../library/chart.js/dist/Chart.min.js"></script>
<script data-goatcounter="https://d12frosted.goatcounter.com/count" async src="//gc.zgo.at/count.js"></script>

    <meta name="description" content="Recommended articles and books" />
    <meta name="twitter:card" content="summary">
    <meta name="twitter:description" content="Recommended articles and books">
    <meta property="og:description" content="Recommended articles and books">
  </head>
  <body>
    <header>
      <nav>
  <ul>
    <li><a class="fa fa-home" href="../" title="Home">&nbsp Home</a></li>
    <li><a class="fa fa-suitcase" href="../projects.html" title="Projects">&nbsp Projects</a></li>
    <li><a class="fa fa-rss" href="../atom.xml" title="RSS">&nbsp RSS</a></li>
    <li><a class="fa fa-github" href="https://github.com/d12frosted" title="GitHub profile">&nbsp GitHub</a></li>
  </ul>
</nav>

    </header>

    <h1 class="post-title">Readings Vol. I: precondition encoding</h1>
    <div class="date"><span>February  1, 2020</span></div>
    <div class="tags"><span>(<a title="All pages tagged 'haskell'." href="../tags/haskell.html">haskell</a>, <a title="All pages tagged 'readings'." href="../tags/readings.html">readings</a>)</span></div>
    <article>
      <section>
        <p>When we write libraries for others (including ourselves) to use we often require some preconditions to be met. Sometimes we just make them implicit (in the form of folklore, passed from developer to developer during post mortem ritual). In other cases we encode the possibility of failure due to unsatisfied preconditions.</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="ot">safeHead ::</span> [a] <span class="ot">-&gt;</span> <span class="dt">Maybe</span> a</span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>safeHead [] <span class="ot">=</span> <span class="dt">None</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>safehead (a<span class="op">:</span>_) <span class="ot">=</span> <span class="dt">Just</span> a</span></code></pre></div>
<p>Is this is the only thing we can do? Definitely no! Is it the best thing we can do? Depends on the situation.</p>
<p>This article is part of the <a href="../tags/readings.html">readings</a> series where I take one topic and share links to related articles and papers. This time our focus is precondition encoding.</p>
<!--more-->

<p>In <a href="https://lexi-lambda.github.io/blog/2019/11/05/parse-don-t-validate/">Parse, don’t validate</a> article<a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a> Alexis King describes the meaning of type-driven design and explains the “parse, don’t validate” slogan using simple code examples. The most prominent one is comparison of the following two functions. Alexis then elaborates more on the differences between them.</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="ot">validateNonEmpty ::</span> [a] <span class="ot">-&gt;</span> <span class="dt">IO</span> ()</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>validateNonEmpty (_<span class="op">:</span>_) <span class="ot">=</span> <span class="fu">pure</span> ()</span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>validateNonEmpty [] <span class="ot">=</span> throwIO <span class="op">$</span> <span class="fu">userError</span> <span class="st">&quot;list cannot be empty&quot;</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a><span class="ot">parseNonEmpty ::</span> [a] <span class="ot">-&gt;</span> <span class="dt">IO</span> (<span class="dt">NonEmpty</span> a)</span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a>parseNonEmpty (x<span class="op">:</span>xs) <span class="ot">=</span> <span class="fu">pure</span> (x<span class="op">:|</span>xs)</span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a>parseNonEmpty [] <span class="ot">=</span> throwIO <span class="op">$</span> <span class="fu">userError</span> <span class="st">&quot;list cannot be empty&quot;</span></span></code></pre></div>
<p>I really like that in the parse approach the learned information is not discarded and can be used later, while validate approach completely discards what it learned.</p>
<p>Alexis also mentions one important thing. Using <code class="verbatim">Maybe</code> as resulting type of safe functions means that it’s easier to implement safe functions, but it pushes responsibility of the failure to the call site significantly increasing complexity of safe function user. This issue is talked through and Alexis provides a solution. You just need to be stricter about your input, that’s where all the static typing helps you. <a href="https://www.parsonsmatt.org/about/">Matt Parsons</a> has a wonderful <a href="https://www.parsonsmatt.org/2017/10/11/type_safety_back_and_forth.html">blog post</a> on this topic as well.</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="ot">safeHead ::</span> <span class="dt">NonEmpty</span> a <span class="ot">-&gt;</span> a</span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a>safeHead (x <span class="op">:|</span> xs) <span class="ot">=</span> x</span></code></pre></div>
<p>With this approach, users of <code class="verbatim">safeHead</code> must handle failure ahead of time. But this also means that the calling code doesn’t need to use things like <code class="verbatim">fromJust</code> when it is genuinely known that the list is non empty.</p>
<p>There is an orthogonal view on this exact problem by <a href="https://storm-country.com/">Matt Noonan</a> which he explains in the <a href="https://kataskeue.com/gdp.pdf">Ghosts of Departed Proofs (Functional Pearl)</a> paper. Matt describes an approach where preconditions (like non-empty list or key existence in the map) are encoded in the Haskell type system as phantoms. Users must prove that preconditions are met using exported set of lemmas.</p>
<p>One of my favourite examples from this paper is the function that computes the dot product of the vector and its reverse. It can be implemented in terms of a regular dot product function, which has one important precondition - both vectors must share the same length. So we encode it on the type level.</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="co">-- regular dot product</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a><span class="ot">dot ::</span> ([<span class="dt">Double</span>] <span class="op">~~</span> vec1 <span class="op">:::</span> <span class="dt">Length</span> vec1 <span class="op">==</span> n)</span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a>    <span class="ot">-&gt;</span> ([<span class="dt">Double</span>] <span class="op">~~</span> vec2 <span class="op">:::</span> <span class="dt">Length</span> vec2 <span class="op">==</span> n)</span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a>    <span class="ot">-&gt;</span> <span class="dt">Double</span></span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a>dot v1 v2 <span class="ot">=</span> <span class="fu">sum</span> (<span class="fu">zipWith</span> (<span class="op">*</span>) v1 v2)</span></code></pre></div>
<p>You can read it as ‘give me some list which I call <code class="verbatim">vec1</code> such that its length is equal to <code class="verbatim">n</code> and then give me some other list which I call <code class="verbatim">vec2</code> such that its length is also equal to <code class="verbatim">n</code> and I will give you some number back’. As you can see, it’s much more verbose compared to <code>dot :: [Double] -&gt; [Double] -&gt;
Double</code>, but it caries an important requirement on the type level, so no value is accidentally discarded by <code class="verbatim">zipWith</code>. Now if we want to write a function that calculates the dot product of vector and it’s reverse we need to provide a proof that the length of reversed list is equal to the original lists’ length.</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="ot">dot_rev ::</span> [<span class="dt">Double</span>] <span class="ot">-&gt;</span> <span class="dt">Double</span></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a>dot_rev xs <span class="ot">=</span> name xs <span class="op">$</span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a>  \vec <span class="ot">-&gt;</span> dot (vec <span class="op">...</span>refl) (<span class="fu">reverse</span> vec <span class="op">...</span>rev_length)</span></code></pre></div>
<p>First thing that we notice is that this function doesn’t have any preconditions, it works with any vector. And then there are <code class="verbatim">name</code>, <code class="verbatim">...refl</code> and <code class="verbatim">...rev_length</code> gluing the <code class="verbatim">dot</code> function and it’s arguments: original vector and its reverse. I am not going to explain everything (this is what paper does after all), my goal is to interest you enough so that you read the paper.</p>
<p>In short, <code class="verbatim">name</code> is the way to give some fixed name to it’s argument and then evaluate a function that takes a named argument. It uses Rank-2 scoping (the trick from ST<a href="#fn2" class="footnote-ref" id="fnref2" role="doc-noteref"><sup>2</sup></a>). Now since we have a named vector we need to prove that <code class="verbatim">vec</code> and <code class="verbatim">reverse vec</code> share the same length. So we need to provide a proof that the length of the first vector is equal to some <code class="verbatim">n</code> and then prove that the length of the second vector is equal to the same <code class="verbatim">n</code>. First proof is provided by reflection. <code class="verbatim">...</code> is just an operator which gives a way to attach a proof. The second vectors length is proven by lemma (or in this case, axiom) called <code class="verbatim">rev_length</code>, and it’s implementation is simple.</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="ot">rev_length ::</span> <span class="dt">Proof</span> (<span class="dt">Length</span> (<span class="dt">Rev</span> xs) <span class="op">==</span> <span class="dt">Length</span> xs)</span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a>rev_length <span class="ot">=</span> axiom</span></code></pre></div>
<p>It just says that there is an axiom that says that the length of the list is equal to the length of its reverse. And we use it to make the compiler happy. The meaning of <code class="verbatim">Length</code> and <code class="verbatim">Rev</code> are explained in the… paper. So please take a look!</p>
<p>It’s also interesting that all this machinery is implemented using Phantom Types and coercions, so compiler discards a lot of stuff from the runtime (like naming and proof providing), which means that there is no run-time penalty on having compile-time guarantees. We already <a href="2020-01-20-predicate-composition.html">touched this topic previously</a>.</p>
<p>Now, it’s up to you how far to go into encoding preconditions. I think that in many cases it’s enough to use proper data types. In some very specific scenarios it’s easier (or more convenient) to use ghosts of departed proofs approach. But always keep in mind, that it’s possible to move constraints into input type instead of wrapping result into <code class="verbatim">Maybe</code> (or alike). As people say, make illegal states unrepresentable.</p>
<p>Stay safe!</p>
<h1 id="references">References</h1>
<ol>
<li>Alexis King. Parse, don’t validate. <a href="https://lexi-lambda.github.io/blog/2019/11/05/parse-don-t-validate/">https://lexi-lambda.github.io/blog/2019/11/05/parse-don-t-validate/</a>, 2019.</li>
<li>Alexis King. No, dynamic type systems are not inherently more open. <a href="https://lexi-lambda.github.io/blog/2020/01/19/no-dynamic-type-systems-are-not-inherently-more-open/">https://lexi-lambda.github.io/blog/2020/01/19/no-dynamic-type-systems-are-not-inherently-more-open/</a>, 2020.</li>
<li>Haskell Wiki. Monad/ST. <a href="https://wiki.haskell.org/Monad/ST">https://wiki.haskell.org/Monad/ST</a>, 2012. Accessed: 2020-01-28.</li>
<li>Sandy Maguire. Thinking with Types. <a href="https://leanpub.com/thinking-with-types">https://leanpub.com/thinking-with-types</a>, 2018.</li>
<li>Matt Parsons. Type Safety Back and Forth. <a href="https://www.parsonsmatt.org/2017/10/11/type_safety_back_and_forth.html">https://www.parsonsmatt.org/2017/10/11/type_safety_back_and_forth.html</a>, 2017.</li>
<li>M. Noonan. Ghosts of departed proofs. <a href="http://www.github.com/matt-noonan/gdp-paper/">http://www.github.com/matt-noonan/gdp-paper/</a>, 2018. Accessed: 2020-01-28.</li>
<li>Boris Buliga. Predicate composition. <a href="https://d12frosted.io/posts/2020-01-20-predicate-composition.html">https://d12frosted.io/posts/2020-01-20-predicate-composition.html</a>, 2020.</li>
</ol>
<section class="footnotes" role="doc-endnotes">
<hr />
<ol>
<li id="fn1" role="doc-endnote"><p>If you liked this post, please make sure to read the next part ‘<a href="https://lexi-lambda.github.io/blog/2020/01/19/no-dynamic-type-systems-are-not-inherently-more-open/">No, dynamic type systems are not inherently more open</a>’ which is an open answer to some of the original article’ comments.<a href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn2" role="doc-endnote"><p>ST monad enables pure computations with local mutable variable that is not exposed (leaked) to the outside. It uses Rank-2 trick to enforce the scope of the variable on the compile time. You can read more about ST on <a href="https://wiki.haskell.org/Monad/ST">Haskell Wiki</a>, <a href="https://stackoverflow.com/questions/12468622/how-does-the-st-monad-work">Stackoverflow</a>, but the best explanation can be found in <a href="https://leanpub.com/thinking-with-types">Thinking with Types</a> book by <a href="https://reasonablypolymorphic.com/">Sandy Maguire</a>, Chapter 7.2 Scoping Information with Existentials.<a href="#fnref2" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>
      </section>
    </article>

    <div class="footer-separator"></div>
    <div class="footer">
      <a target="_blank" class="post-footer-sources" href="https://github.com/d12frosted/d12frosted.io/blob/master/posts/2020-02-01-readings-vol-1.org">Sources <i class="fa fa-code fa-lg"></i></a>
    </div>
    <script src="https://utteranc.es/client.js" repo="d12frosted/d12frosted.io" issue-term="pathname" label="comments" theme="github-light" crossorigin="anonymous" async>
    </script>

    <footer>
  <div>
      <p>
        Follow me on <a class="fa fa-github" href="https://github.com/d12frosted" title="GitHub profile">&nbsp GitHub</a>
      </p>
  </div>
</footer>

  </body>
</html>
]]></summary>
</entry>
<entry>
    <title>Predicate composition</title>
    <link href="https://d12frosted.io/posts/2020-01-20-predicate-composition.html" />
    <id>https://d12frosted.io/posts/2020-01-20-predicate-composition.html</id>
    <published>2020-01-20T00:00:00Z</published>
    <updated>2020-01-20T00:00:00Z</updated>
    <summary type="html"><![CDATA[<!doctype html>
<html lang="en">
  <head>
    <title>Predicate composition</title>
    <link rel="stylesheet" href="../css/post-bundle.css" />
    <meta charset="utf-8">
<meta http-equiv="x-ua-compatible" content="ie=edge">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="keywords" content="blog,programming,Haskell,Emacs,fish,bash">
<meta property="og:title" content="Boris Buliga">
<meta property="og:locale" content="es_US">
<meta property="og:url" content="https://d12frosted.io">

<link rel="apple-touch-icon" sizes="180x180" href="../apple-touch-icon.png">
<link rel="icon" type="image/png" sizes="32x32" href="../favicon-32x32.png">
<link rel="icon" type="image/png" sizes="16x16" href="../favicon-16x16.png">
<link rel="manifest" href="../site.webmanifest">

<link href="https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css" rel="stylesheet">
<script>
  MathJax = {
    svg: {
      fontCache: 'global'
    }
  };
</script>
<script type="text/javascript" id="MathJax-script" async src="../library/mathjax/es5/tex-svg.js">
</script>
<script src="../library/chart.js/dist/Chart.min.js"></script>
<script data-goatcounter="https://d12frosted.goatcounter.com/count" async src="//gc.zgo.at/count.js"></script>

    <meta name="description" content="Combinators for predicate composition" />
    <meta name="twitter:card" content="summary">
    <meta name="twitter:description" content="Combinators for predicate composition">
    <meta property="og:description" content="Combinators for predicate composition">
  </head>
  <body>
    <header>
      <nav>
  <ul>
    <li><a class="fa fa-home" href="../" title="Home">&nbsp Home</a></li>
    <li><a class="fa fa-suitcase" href="../projects.html" title="Projects">&nbsp Projects</a></li>
    <li><a class="fa fa-rss" href="../atom.xml" title="RSS">&nbsp RSS</a></li>
    <li><a class="fa fa-github" href="https://github.com/d12frosted" title="GitHub profile">&nbsp GitHub</a></li>
  </ul>
</nav>

    </header>

    <h1 class="post-title">Predicate composition</h1>
    <div class="date"><span>January 20, 2020</span></div>
    <div class="tags"><span>(<a title="All pages tagged 'haskell'." href="../tags/haskell.html">haskell</a>, <a title="All pages tagged 'semigroup'." href="../tags/semigroup.html">semigroup</a>, <a title="All pages tagged 'performance'." href="../tags/performance.html">performance</a>)</span></div>
    <article>
      <section>
        <p>They say functional programming has many essences and the composition is one of them. Thanks to the wonderful dot operator, we know how to compose functions like <code class="verbatim">a -&gt; b</code> and <code class="verbatim">b -&gt; c</code> to get a function <code class="verbatim">a -&gt; c</code>. But in some cases functions are not that simple and it becomes tricky to compose them nicely.</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="ot">valid ::</span> a <span class="ot">-&gt;</span> <span class="dt">Bool</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>valid <span class="ot">=</span> \a <span class="ot">-&gt;</span> check1 a <span class="op">&amp;&amp;</span> (check2 a <span class="op">||</span> check3 a)</span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>  <span class="kw">where</span> check1 <span class="ot">= undefined ::</span> a <span class="ot">-&gt;</span> <span class="dt">Bool</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>        check2 <span class="ot">= undefined ::</span> a <span class="ot">-&gt;</span> <span class="dt">Bool</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>        check3 <span class="ot">= undefined ::</span> a <span class="ot">-&gt;</span> <span class="dt">Bool</span></span></code></pre></div>
<p>It would be lovely to express it in a more declarative way by abstracting away function application and result combination.</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="ot">valid ::</span> a <span class="ot">-&gt;</span> <span class="dt">Bool</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>valid <span class="ot">=</span> check1 <span class="op">.&amp;&amp;</span> (check2 <span class="op">.||</span> check3)</span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a><span class="ot">(.&amp;&amp;) ::</span> (a <span class="ot">-&gt;</span> <span class="dt">Bool</span>) <span class="ot">-&gt;</span> (a <span class="ot">-&gt;</span> <span class="dt">Bool</span>) <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> <span class="dt">Bool</span></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a><span class="ot">(.||) ::</span> (a <span class="ot">-&gt;</span> <span class="dt">Bool</span>) <span class="ot">-&gt;</span> (a <span class="ot">-&gt;</span> <span class="dt">Bool</span>) <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> <span class="dt">Bool</span></span></code></pre></div>
<p>Apart from implementing combinators for predicate composition, we want to avoid any runtime penalty from using abstractions. In this article we are going to implement the following functions and investigate how far we can go with abstractions until performance degrades. Or maybe it won’t degrade. Who knows?</p>
<!--more-->

<h1 id="inline-implementation">Inline implementation</h1>
<p>Before we jump into the void, lets draw a baseline by keeping implementation simple.</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="kw">module</span> <span class="dt">Main</span> (main) <span class="kw">where</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a><span class="ot">main ::</span> <span class="dt">IO</span> ()</span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a>main <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a>  input <span class="ot">&lt;-</span> <span class="fu">read</span> <span class="op">&lt;$&gt;</span> <span class="fu">getLine</span></span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a>  <span class="kw">let</span> result <span class="ot">=</span> input <span class="op">&lt;</span> <span class="dv">10</span> <span class="op">&amp;&amp;</span> (input <span class="op">&gt;</span> <span class="dv">0</span> <span class="op">||</span> <span class="fu">even</span> input)</span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a>  <span class="fu">print</span> result</span></code></pre></div>
<p>Haskell language is abstract and high-level thus in some cases in order to really understand what the program does we need to look at the intermediate language called <a href="https://www.aosabook.org/en/ghc.html">Core</a> (or System FC) produced by Glasgow Haskell Compiler (GHC) when it compiles<a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a> our program. This reduced code is the end result of GHC’s optmisations-by-transformation process, which iteratively rewrites the original code into more optimised versions in a smaller language.</p>
<p>In order to dump the intermediate code in Core language we need to ask GHC to do it. We use <code class="verbatim">-O</code> (or <code class="verbatim">-O2</code>) to enable optimisations and <code class="verbatim">-ddump-simpl</code> to dump the simplified output, which can be combined with <code class="verbatim">-ddump-to-file</code> to write result into a file instead of <code class="verbatim">stdout</code>. More options are described in the <a href="https://downloads.haskell.org/ghc/latest/docs/html/users_guide/debugging.html#debugging-the-compiler">GHC manual</a>.</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> ghc <span class="at">-O</span> <span class="at">-ddump-simpl</span> Main.hs</span></code></pre></div>
<p>Or if you are using <a href="https://docs.haskellstack.org/en/stable/README/">stack</a>:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> stack ghc <span class="at">--</span> <span class="at">-O</span> <span class="at">-ddump-simpl</span> Main.hs</span></code></pre></div>
<p>This <a href="https://github.com/d12frosted/d12frosted.io/blob/master/assets/snippets/predicate-composition/inline.dump-simpl">prints a lot of stuff</a>, so let me focus on the most important part.</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="op">...</span></span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a><span class="op">Main.$</span><span class="ot">seven1 ::</span> <span class="dt">Integer</span></span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a><span class="op">Main.$</span>seven1 <span class="ot">=</span> <span class="dv">0</span></span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-6"><a href="#cb6-6" aria-hidden="true" tabindex="-1"></a><span class="op">...</span></span>
<span id="cb6-7"><a href="#cb6-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-8"><a href="#cb6-8" aria-hidden="true" tabindex="-1"></a><span class="op">Main.$</span><span class="ot">seven2 ::</span> <span class="dt">Integer</span></span>
<span id="cb6-9"><a href="#cb6-9" aria-hidden="true" tabindex="-1"></a><span class="op">Main.$</span>seven2 <span class="ot">=</span> <span class="dv">2</span></span>
<span id="cb6-10"><a href="#cb6-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-11"><a href="#cb6-11" aria-hidden="true" tabindex="-1"></a><span class="op">...</span></span>
<span id="cb6-12"><a href="#cb6-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-13"><a href="#cb6-13" aria-hidden="true" tabindex="-1"></a>Main.main3<span class="ot"> ::</span> <span class="dt">Integer</span></span>
<span id="cb6-14"><a href="#cb6-14" aria-hidden="true" tabindex="-1"></a>Main.main3 <span class="ot">=</span> <span class="dv">10</span></span>
<span id="cb6-15"><a href="#cb6-15" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-16"><a href="#cb6-16" aria-hidden="true" tabindex="-1"></a><span class="op">...</span></span>
<span id="cb6-17"><a href="#cb6-17" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-18"><a href="#cb6-18" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- check if input &lt; 10</span></span>
<span id="cb6-19"><a href="#cb6-19" aria-hidden="true" tabindex="-1"></a>  <span class="kw">case</span> integer<span class="op">-</span>gmp<span class="op">-</span><span class="fl">1.0</span><span class="op">.</span><span class="fl">2.0</span><span class="op">:</span>GHC.Integer.Type.ltInteger<span class="op">#</span></span>
<span id="cb6-20"><a href="#cb6-20" aria-hidden="true" tabindex="-1"></a>         x1_a6kH    <span class="co">-- input</span></span>
<span id="cb6-21"><a href="#cb6-21" aria-hidden="true" tabindex="-1"></a>         Main.main3 <span class="co">-- 10</span></span>
<span id="cb6-22"><a href="#cb6-22" aria-hidden="true" tabindex="-1"></a>  <span class="kw">of</span> {</span>
<span id="cb6-23"><a href="#cb6-23" aria-hidden="true" tabindex="-1"></a>    <span class="co">-- false</span></span>
<span id="cb6-24"><a href="#cb6-24" aria-hidden="true" tabindex="-1"></a>    __DEFAULT <span class="ot">-&gt;</span> <span class="op">GHC.Show.$</span>fShowBool4; <span class="co">-- false</span></span>
<span id="cb6-25"><a href="#cb6-25" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-26"><a href="#cb6-26" aria-hidden="true" tabindex="-1"></a>    <span class="co">-- true</span></span>
<span id="cb6-27"><a href="#cb6-27" aria-hidden="true" tabindex="-1"></a>    <span class="dv">1</span><span class="op">#</span> <span class="ot">-&gt;</span></span>
<span id="cb6-28"><a href="#cb6-28" aria-hidden="true" tabindex="-1"></a>      <span class="co">-- check if input &gt; 0</span></span>
<span id="cb6-29"><a href="#cb6-29" aria-hidden="true" tabindex="-1"></a>      <span class="kw">case</span> integer<span class="op">-</span>gmp<span class="op">-</span><span class="fl">1.0</span><span class="op">.</span><span class="fl">2.0</span><span class="op">:</span>GHC.Integer.Type.gtInteger<span class="op">#</span></span>
<span id="cb6-30"><a href="#cb6-30" aria-hidden="true" tabindex="-1"></a>             x1_a6kH      <span class="co">-- input</span></span>
<span id="cb6-31"><a href="#cb6-31" aria-hidden="true" tabindex="-1"></a>             <span class="op">Main.$</span>seven1 <span class="co">-- 0</span></span>
<span id="cb6-32"><a href="#cb6-32" aria-hidden="true" tabindex="-1"></a>      <span class="kw">of</span> {</span>
<span id="cb6-33"><a href="#cb6-33" aria-hidden="true" tabindex="-1"></a>        __DEFAULT <span class="ot">-&gt;</span></span>
<span id="cb6-34"><a href="#cb6-34" aria-hidden="true" tabindex="-1"></a>          <span class="co">-- check if input is even (e.g. rem input 2 == 0)</span></span>
<span id="cb6-35"><a href="#cb6-35" aria-hidden="true" tabindex="-1"></a>          <span class="kw">case</span> integer<span class="op">-</span>gmp<span class="op">-</span><span class="fl">1.0</span><span class="op">.</span><span class="fl">2.0</span><span class="op">:</span>GHC.Integer.Type.eqInteger<span class="op">#</span></span>
<span id="cb6-36"><a href="#cb6-36" aria-hidden="true" tabindex="-1"></a>                 (integer<span class="op">-</span>gmp<span class="op">-</span><span class="fl">1.0</span><span class="op">.</span><span class="fl">2.0</span><span class="op">:</span>GHC.Integer.Type.remInteger</span>
<span id="cb6-37"><a href="#cb6-37" aria-hidden="true" tabindex="-1"></a>                    x1_a6kH      <span class="co">-- input</span></span>
<span id="cb6-38"><a href="#cb6-38" aria-hidden="true" tabindex="-1"></a>                    <span class="op">Main.$</span>seven2 <span class="co">-- 2</span></span>
<span id="cb6-39"><a href="#cb6-39" aria-hidden="true" tabindex="-1"></a>                 )</span>
<span id="cb6-40"><a href="#cb6-40" aria-hidden="true" tabindex="-1"></a>                 <span class="op">Main.$</span>seven1    <span class="co">-- 0</span></span>
<span id="cb6-41"><a href="#cb6-41" aria-hidden="true" tabindex="-1"></a>          <span class="kw">of</span> {</span>
<span id="cb6-42"><a href="#cb6-42" aria-hidden="true" tabindex="-1"></a>            __DEFAULT <span class="ot">-&gt;</span> <span class="op">GHC.Show.$</span>fShowBool4; <span class="co">-- false</span></span>
<span id="cb6-43"><a href="#cb6-43" aria-hidden="true" tabindex="-1"></a>            <span class="dv">1</span><span class="op">#</span> <span class="ot">-&gt;</span> <span class="op">GHC.Show.$</span>fShowBool2         <span class="co">-- true</span></span>
<span id="cb6-44"><a href="#cb6-44" aria-hidden="true" tabindex="-1"></a>          };</span>
<span id="cb6-45"><a href="#cb6-45" aria-hidden="true" tabindex="-1"></a>        <span class="dv">1</span><span class="op">#</span> <span class="ot">-&gt;</span> <span class="op">GHC.Show.$</span>fShowBool2             <span class="co">-- true</span></span>
<span id="cb6-46"><a href="#cb6-46" aria-hidden="true" tabindex="-1"></a>      }</span>
<span id="cb6-47"><a href="#cb6-47" aria-hidden="true" tabindex="-1"></a>  };</span>
<span id="cb6-48"><a href="#cb6-48" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-49"><a href="#cb6-49" aria-hidden="true" tabindex="-1"></a><span class="op">...</span></span></code></pre></div>
<p>So this how it looks in Core, verbose but really straightforward.</p>
<h1 id="reason-to-read-the-line">Reason to read the line</h1>
<p>Strictly speaking there is no need for reading integer from <code class="verbatim">stdin</code> in our example. After all, we care only about the predicates. But GHC is pretty aggressive in terms of in-lining and simplifications when optimisations are enabled. With <code class="verbatim">-O2</code> there will be even more cross-module optimisation compared to <code class="verbatim">-O</code>.</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="kw">module</span> <span class="dt">Main</span> (main) <span class="kw">where</span></span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a><span class="ot">main ::</span> <span class="dt">IO</span> ()</span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a>main <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb7-5"><a href="#cb7-5" aria-hidden="true" tabindex="-1"></a>  <span class="kw">let</span> input  <span class="ot">=</span> <span class="dv">5</span></span>
<span id="cb7-6"><a href="#cb7-6" aria-hidden="true" tabindex="-1"></a>  <span class="kw">let</span> result <span class="ot">=</span> input <span class="op">&lt;</span> <span class="dv">10</span> <span class="op">&amp;&amp;</span> (input <span class="op">&gt;</span> <span class="dv">0</span> <span class="op">||</span> <span class="fu">even</span> input)</span>
<span id="cb7-7"><a href="#cb7-7" aria-hidden="true" tabindex="-1"></a>  <span class="fu">print</span> result</span></code></pre></div>
<p>Compiling this module with <code class="verbatim">-O</code> produces <a href="https://github.com/d12frosted/d12frosted.io/blob/master/assets/snippets/predicate-composition/no-getline.dump-simpl">the following Core</a> (83 lines).</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="ot">main ::</span> <span class="dt">IO</span> ()</span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a>[<span class="dt">GblId</span>,</span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a> <span class="dt">Arity</span><span class="ot">=</span><span class="dv">1</span>,</span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a> <span class="dt">Unf</span><span class="ot">=</span><span class="dt">Unf</span>{<span class="dt">Src</span><span class="op">=&lt;</span>vanilla<span class="op">&gt;</span>, <span class="dt">TopLvl</span><span class="ot">=</span><span class="dt">True</span>, <span class="dt">Value</span><span class="ot">=</span><span class="dt">True</span>, <span class="dt">ConLike</span><span class="ot">=</span><span class="dt">True</span>,</span>
<span id="cb8-5"><a href="#cb8-5" aria-hidden="true" tabindex="-1"></a>         <span class="dt">WorkFree</span><span class="ot">=</span><span class="dt">True</span>, <span class="dt">Expandable</span><span class="ot">=</span><span class="dt">True</span>, <span class="dt">Guidance</span><span class="ot">=</span><span class="dt">IF_ARGS</span> [] <span class="dv">40</span> <span class="dv">60</span>}]</span>
<span id="cb8-6"><a href="#cb8-6" aria-hidden="true" tabindex="-1"></a>main</span>
<span id="cb8-7"><a href="#cb8-7" aria-hidden="true" tabindex="-1"></a>  <span class="ot">=</span> GHC.IO.Handle.Text.hPutStr'</span>
<span id="cb8-8"><a href="#cb8-8" aria-hidden="true" tabindex="-1"></a>      GHC.IO.Handle.FD.stdout <span class="op">GHC.Show.$</span>fShowBool2 <span class="dt">GHC.Types.True</span></span></code></pre></div>
<p>As you can see, it figured out that there is no need to evaluate it in runtime. But in order to compare different implementations of composition operators, we don’t want compiler to inline the result.</p>
<p>If you are curious about reductions steps, you can pass <code class="verbatim">-v</code> option to <code class="verbatim">ghc</code> to be more verbose. When you build with <code class="verbatim">-v</code>, compilation of the version with <code class="verbatim">getLine</code> is less verbose than without.</p>
<h1 id="trivial-implementation">Trivial implementation</h1>
<p>Now that we have a solid source of nightmares, let’s return to cozy nook. Our first step is to create operators in the most trivial manner.</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a><span class="kw">module</span> <span class="dt">Main</span> (main) <span class="kw">where</span></span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-3"><a href="#cb9-3" aria-hidden="true" tabindex="-1"></a><span class="ot">main ::</span> <span class="dt">IO</span> ()</span>
<span id="cb9-4"><a href="#cb9-4" aria-hidden="true" tabindex="-1"></a>main <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb9-5"><a href="#cb9-5" aria-hidden="true" tabindex="-1"></a>  input <span class="ot">&lt;-</span> <span class="fu">read</span> <span class="op">&lt;$&gt;</span> <span class="fu">getLine</span></span>
<span id="cb9-6"><a href="#cb9-6" aria-hidden="true" tabindex="-1"></a>  <span class="kw">let</span> result <span class="ot">=</span> (<span class="op">&lt;</span> <span class="dv">10</span>) <span class="op">.&amp;&amp;</span> ((<span class="op">&gt;</span> <span class="dv">0</span>) <span class="op">.||</span> <span class="fu">even</span>) <span class="op">$</span> input</span>
<span id="cb9-7"><a href="#cb9-7" aria-hidden="true" tabindex="-1"></a>  <span class="fu">print</span> result</span>
<span id="cb9-8"><a href="#cb9-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-9"><a href="#cb9-9" aria-hidden="true" tabindex="-1"></a><span class="kw">infixr</span> <span class="dv">3</span> <span class="op">.&amp;&amp;</span></span>
<span id="cb9-10"><a href="#cb9-10" aria-hidden="true" tabindex="-1"></a><span class="ot">(.&amp;&amp;) ::</span> (a <span class="ot">-&gt;</span> <span class="dt">Bool</span>) <span class="ot">-&gt;</span> (a <span class="ot">-&gt;</span> <span class="dt">Bool</span>) <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> <span class="dt">Bool</span></span>
<span id="cb9-11"><a href="#cb9-11" aria-hidden="true" tabindex="-1"></a>p1 <span class="op">.&amp;&amp;</span> p2 <span class="ot">=</span> \a <span class="ot">-&gt;</span> p1 a <span class="op">&amp;&amp;</span> p2 a</span>
<span id="cb9-12"><a href="#cb9-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-13"><a href="#cb9-13" aria-hidden="true" tabindex="-1"></a><span class="kw">infixr</span> <span class="dv">2</span> <span class="op">.||</span></span>
<span id="cb9-14"><a href="#cb9-14" aria-hidden="true" tabindex="-1"></a><span class="ot">(.||) ::</span> (a <span class="ot">-&gt;</span> <span class="dt">Bool</span>) <span class="ot">-&gt;</span> (a <span class="ot">-&gt;</span> <span class="dt">Bool</span>) <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> <span class="dt">Bool</span></span>
<span id="cb9-15"><a href="#cb9-15" aria-hidden="true" tabindex="-1"></a>p1 <span class="op">.||</span> p2 <span class="ot">=</span> \a <span class="ot">-&gt;</span> p1 a <span class="op">||</span> p2 a</span></code></pre></div>
<p>If we compile it, the relevant part in the <span class="spurious-link" target="Core language"><em>Core language</em></span> is the same.</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a><span class="op">...</span></span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-3"><a href="#cb10-3" aria-hidden="true" tabindex="-1"></a>  <span class="kw">case</span> integer<span class="op">-</span>gmp<span class="op">-</span><span class="fl">1.0</span><span class="op">.</span><span class="fl">2.0</span><span class="op">:</span>GHC.Integer.Type.ltInteger<span class="op">#</span></span>
<span id="cb10-4"><a href="#cb10-4" aria-hidden="true" tabindex="-1"></a>         x1_a6m7 Main.main3</span>
<span id="cb10-5"><a href="#cb10-5" aria-hidden="true" tabindex="-1"></a>  <span class="kw">of</span> {</span>
<span id="cb10-6"><a href="#cb10-6" aria-hidden="true" tabindex="-1"></a>    __DEFAULT <span class="ot">-&gt;</span> <span class="op">GHC.Show.$</span>fShowBool4;</span>
<span id="cb10-7"><a href="#cb10-7" aria-hidden="true" tabindex="-1"></a>    <span class="dv">1</span><span class="op">#</span> <span class="ot">-&gt;</span></span>
<span id="cb10-8"><a href="#cb10-8" aria-hidden="true" tabindex="-1"></a>      <span class="kw">case</span> integer<span class="op">-</span>gmp<span class="op">-</span><span class="fl">1.0</span><span class="op">.</span><span class="fl">2.0</span><span class="op">:</span>GHC.Integer.Type.gtInteger<span class="op">#</span></span>
<span id="cb10-9"><a href="#cb10-9" aria-hidden="true" tabindex="-1"></a>             x1_a6m7 <span class="op">Main.$</span>seven1</span>
<span id="cb10-10"><a href="#cb10-10" aria-hidden="true" tabindex="-1"></a>      <span class="kw">of</span> {</span>
<span id="cb10-11"><a href="#cb10-11" aria-hidden="true" tabindex="-1"></a>        __DEFAULT <span class="ot">-&gt;</span></span>
<span id="cb10-12"><a href="#cb10-12" aria-hidden="true" tabindex="-1"></a>          <span class="kw">case</span> integer<span class="op">-</span>gmp<span class="op">-</span><span class="fl">1.0</span><span class="op">.</span><span class="fl">2.0</span><span class="op">:</span>GHC.Integer.Type.eqInteger<span class="op">#</span></span>
<span id="cb10-13"><a href="#cb10-13" aria-hidden="true" tabindex="-1"></a>                 (integer<span class="op">-</span>gmp<span class="op">-</span><span class="fl">1.0</span><span class="op">.</span><span class="fl">2.0</span><span class="op">:</span>GHC.Integer.Type.remInteger</span>
<span id="cb10-14"><a href="#cb10-14" aria-hidden="true" tabindex="-1"></a>                    x1_a6m7 <span class="op">Main.$</span>seven2)</span>
<span id="cb10-15"><a href="#cb10-15" aria-hidden="true" tabindex="-1"></a>                 <span class="op">Main.$</span>seven1</span>
<span id="cb10-16"><a href="#cb10-16" aria-hidden="true" tabindex="-1"></a>          <span class="kw">of</span> {</span>
<span id="cb10-17"><a href="#cb10-17" aria-hidden="true" tabindex="-1"></a>            __DEFAULT <span class="ot">-&gt;</span> <span class="op">GHC.Show.$</span>fShowBool4;</span>
<span id="cb10-18"><a href="#cb10-18" aria-hidden="true" tabindex="-1"></a>            <span class="dv">1</span><span class="op">#</span> <span class="ot">-&gt;</span> <span class="op">GHC.Show.$</span>fShowBool2</span>
<span id="cb10-19"><a href="#cb10-19" aria-hidden="true" tabindex="-1"></a>          };</span>
<span id="cb10-20"><a href="#cb10-20" aria-hidden="true" tabindex="-1"></a>        <span class="dv">1</span><span class="op">#</span> <span class="ot">-&gt;</span> <span class="op">GHC.Show.$</span>fShowBool2</span>
<span id="cb10-21"><a href="#cb10-21" aria-hidden="true" tabindex="-1"></a>      }</span>
<span id="cb10-22"><a href="#cb10-22" aria-hidden="true" tabindex="-1"></a>  };</span>
<span id="cb10-23"><a href="#cb10-23" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-24"><a href="#cb10-24" aria-hidden="true" tabindex="-1"></a><span class="op">...</span></span></code></pre></div>
<p>While our code looks better, there are no runtime penalties. In short, with <code class="verbatim">-O</code> option GHC always tries to inline small functions (based on <a href="https://downloads.haskell.org/ghc/latest/docs/html/users_guide/using-optimisation.html#ghc-flag--funfolding-creation-threshold=%E2%9F%A8n%E2%9F%A9">unfolding-creation-threshold</a> and heuristics) thus avoiding the call overhead and enabling other optimisations (like replacing whole expression with its result). And when unfolding doesn’t happen for some of the reasons and you really think that it should happen (make such decision based on CPU and memory profiling), then put <a href="https://downloads.haskell.org/ghc/latest/docs/html/users_guide/glasgow_exts.html#inline-pragma">INLINE pragma</a>.</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true" tabindex="-1"></a><span class="kw">infixr</span> <span class="dv">3</span> <span class="op">.&amp;&amp;</span></span>
<span id="cb11-2"><a href="#cb11-2" aria-hidden="true" tabindex="-1"></a><span class="ot">(.&amp;&amp;) ::</span> (a <span class="ot">-&gt;</span> <span class="dt">Bool</span>) <span class="ot">-&gt;</span> (a <span class="ot">-&gt;</span> <span class="dt">Bool</span>) <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> <span class="dt">Bool</span></span>
<span id="cb11-3"><a href="#cb11-3" aria-hidden="true" tabindex="-1"></a>p1 <span class="op">.&amp;&amp;</span> p2 <span class="ot">=</span> \a <span class="ot">-&gt;</span> p1 a <span class="op">&amp;&amp;</span> p2 a</span>
<span id="cb11-4"><a href="#cb11-4" aria-hidden="true" tabindex="-1"></a><span class="ot">{-# INLINE (.&amp;&amp;) #-}</span></span></code></pre></div>
<p>Please note that in-lining usually leads to bigger executable.</p>
<h1 id="using-newtype-wrappers">Using <code class="verbatim">newtype</code> wrappers</h1>
<p>If we look at the definition of <code class="verbatim">.&amp;&amp;</code> and <code class="verbatim">.||</code> we see that they are pretty much the same. The only difference is the use of <code class="verbatim">&amp;&amp;</code> instead of <code class="verbatim">||</code>.</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true" tabindex="-1"></a><span class="kw">infixr</span> <span class="dv">3</span> <span class="op">.&amp;&amp;</span></span>
<span id="cb12-2"><a href="#cb12-2" aria-hidden="true" tabindex="-1"></a><span class="ot">(.&amp;&amp;) ::</span> (a <span class="ot">-&gt;</span> <span class="dt">Bool</span>) <span class="ot">-&gt;</span> (a <span class="ot">-&gt;</span> <span class="dt">Bool</span>) <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> <span class="dt">Bool</span></span>
<span id="cb12-3"><a href="#cb12-3" aria-hidden="true" tabindex="-1"></a>p1 <span class="op">.&amp;&amp;</span> p2 <span class="ot">=</span> \a <span class="ot">-&gt;</span> p1 a <span class="op">&amp;&amp;</span> p2 a</span>
<span id="cb12-4"><a href="#cb12-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-5"><a href="#cb12-5" aria-hidden="true" tabindex="-1"></a><span class="kw">infixr</span> <span class="dv">2</span> <span class="op">.||</span></span>
<span id="cb12-6"><a href="#cb12-6" aria-hidden="true" tabindex="-1"></a><span class="ot">(.||) ::</span> (a <span class="ot">-&gt;</span> <span class="dt">Bool</span>) <span class="ot">-&gt;</span> (a <span class="ot">-&gt;</span> <span class="dt">Bool</span>) <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> <span class="dt">Bool</span></span>
<span id="cb12-7"><a href="#cb12-7" aria-hidden="true" tabindex="-1"></a>p1 <span class="op">.||</span> p2 <span class="ot">=</span> \a <span class="ot">-&gt;</span> p1 a <span class="op">||</span> p2 a</span></code></pre></div>
<p>Maybe there is some magic function that takes a function for combining two booleans, two predicates, a value and returns a boolean? So we can express our combinators with it.</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true" tabindex="-1"></a><span class="ot">magic ::</span> (<span class="dt">Bool</span> <span class="ot">-&gt;</span> <span class="dt">Bool</span> <span class="ot">-&gt;</span> <span class="dt">Bool</span>) <span class="ot">-&gt;</span> (a <span class="ot">-&gt;</span> <span class="dt">Bool</span>) <span class="ot">-&gt;</span> (a <span class="ot">-&gt;</span> <span class="dt">Bool</span>) <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> <span class="dt">Bool</span></span>
<span id="cb13-2"><a href="#cb13-2" aria-hidden="true" tabindex="-1"></a>magic plus p1 p2 <span class="ot">=</span> \a <span class="ot">-&gt;</span> p1 a <span class="ot">`plus`</span> p2 a</span></code></pre></div>
<p>Or even more generic one:</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb14-1"><a href="#cb14-1" aria-hidden="true" tabindex="-1"></a><span class="ot">gmagic ::</span> (b <span class="ot">-&gt;</span> b <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> (a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> (a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> b</span>
<span id="cb14-2"><a href="#cb14-2" aria-hidden="true" tabindex="-1"></a>gmagic plus p1 p2 <span class="ot">=</span> \a <span class="ot">-&gt;</span> p1 a <span class="ot">`plus`</span> p2 a</span></code></pre></div>
<p>This all reminds me of <code class="verbatim">Semigroup</code>.</p>
<div class="sourceCode" id="cb15"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb15-1"><a href="#cb15-1" aria-hidden="true" tabindex="-1"></a><span class="kw">class</span> <span class="dt">Semigroup</span> a <span class="kw">where</span></span>
<span id="cb15-2"><a href="#cb15-2" aria-hidden="true" tabindex="-1"></a><span class="ot">  (&lt;&gt;) ::</span> a <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> a</span>
<span id="cb15-3"><a href="#cb15-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb15-4"><a href="#cb15-4" aria-hidden="true" tabindex="-1"></a><span class="ot">gmagic ::</span> (<span class="dt">Semigroup</span> b) <span class="ot">=&gt;</span> (a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> (a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> b</span>
<span id="cb15-5"><a href="#cb15-5" aria-hidden="true" tabindex="-1"></a>gmagic f g <span class="ot">=</span> \a <span class="ot">-&gt;</span> f a <span class="op">&lt;&gt;</span> g a</span></code></pre></div>
<p>Thanks to <code class="verbatim">Semigroup</code> the <code class="verbatim">plus</code> function is not passed explicitly and <code class="verbatim">gmagic</code> become lighter. Now, functions which return type is an instance of <code class="verbatim">Semigroup</code> also form <code class="verbatim">Semigroup</code> and it’s implementation looks familiar.</p>
<div class="sourceCode" id="cb16"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb16-1"><a href="#cb16-1" aria-hidden="true" tabindex="-1"></a><span class="kw">instance</span> <span class="dt">Semigroup</span> b <span class="ot">=&gt;</span> <span class="dt">Semigroup</span> (a <span class="ot">-&gt;</span> b) <span class="kw">where</span></span>
<span id="cb16-2"><a href="#cb16-2" aria-hidden="true" tabindex="-1"></a>  f <span class="op">&lt;&gt;</span> g <span class="ot">=</span> \a <span class="ot">-&gt;</span> f a <span class="op">&lt;&gt;</span> g a</span></code></pre></div>
<p>So it turns out that our <code class="verbatim">gmagic</code> function is a binary operator from <code class="verbatim">Semigroup</code>. How convenient, isn’t it? If we add more parenthesis to the signature you’ll notice that it actually takes two functions and produces new one (exactly what we are doing with predicates).</p>
<div class="sourceCode" id="cb17"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb17-1"><a href="#cb17-1" aria-hidden="true" tabindex="-1"></a><span class="ot">gmagic ::</span> (<span class="dt">Semigroup</span> b) <span class="ot">=&gt;</span> (a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> (a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> (a <span class="ot">-&gt;</span> b)</span>
<span id="cb17-2"><a href="#cb17-2" aria-hidden="true" tabindex="-1"></a>gmagic f g <span class="ot">=</span> \a <span class="ot">-&gt;</span> f a <span class="op">&lt;&gt;</span> g a</span></code></pre></div>
<p>In Haskell every single data type can have not more than one instance of a given type class. But for some data types there are more than one valid (lawful) instances of a given type class. For example, we know that the set of natural numbers forms different semigroups with different operations: <span class="math inline">\( ( \mathbb{N}, +
) \)</span> or <span class="math inline">\( ( \mathbb{N}, \cdot ) \)</span>. The same story with booleans - <span class="math inline">\( (
\mathbb{B}, \wedge ) \)</span> and <span class="math inline">\( ( \mathbb{B}, \vee ) \)</span> are both valid semigroups.</p>
<p>Restriction for amount of instances means that we need to wrap our data types when we need to create multiple instances. A wrapper per each instance. That leads to an awful runtime cost - wrapping and unwrapping are not free. That’s why we use <code class="verbatim">newtype</code> to create wrappers. In compile time the <code class="verbatim">newtype</code> wrapper is not equal to the type that is being wrapped, so we can use different instances. But since the types are isomorphic, all the wrapping and unwrapping can be removed by compiler, so we don’t have any runtime costs anymore.</p>
<p>When it comes to booleans with conjunction (<code class="verbatim">&amp;&amp;</code>) or disjunction (<code class="verbatim">||</code>), we don’t need to define our own wrappers since <code class="verbatim">Data.Monoid</code> already provides them - <code class="verbatim">All</code> and <code class="verbatim">Any</code>.</p>
<div class="sourceCode" id="cb18"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb18-1"><a href="#cb18-1" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;</span> getAll (<span class="dt">All</span> <span class="dt">True</span> <span class="op">&lt;&gt;</span> <span class="dt">All</span> <span class="dt">False</span>)</span>
<span id="cb18-2"><a href="#cb18-2" aria-hidden="true" tabindex="-1"></a><span class="dt">False</span></span>
<span id="cb18-3"><a href="#cb18-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb18-4"><a href="#cb18-4" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;</span> getAny (<span class="dt">Any</span> <span class="dt">True</span> <span class="op">&lt;&gt;</span> <span class="dt">Any</span> <span class="dt">False</span>)</span>
<span id="cb18-5"><a href="#cb18-5" aria-hidden="true" tabindex="-1"></a><span class="dt">True</span></span></code></pre></div>
<p>We can fetch it all together and get new definition of <code class="verbatim">.&amp;&amp;</code> and <code class="verbatim">.||</code>.</p>
<div class="sourceCode" id="cb19"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb19-1"><a href="#cb19-1" aria-hidden="true" tabindex="-1"></a><span class="kw">infixr</span> <span class="dv">3</span> <span class="op">.&amp;&amp;</span></span>
<span id="cb19-2"><a href="#cb19-2" aria-hidden="true" tabindex="-1"></a><span class="ot">(.&amp;&amp;) ::</span> (a <span class="ot">-&gt;</span> <span class="dt">Bool</span>) <span class="ot">-&gt;</span> (a <span class="ot">-&gt;</span> <span class="dt">Bool</span>) <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> <span class="dt">Bool</span></span>
<span id="cb19-3"><a href="#cb19-3" aria-hidden="true" tabindex="-1"></a>p1 <span class="op">.&amp;&amp;</span> p2 <span class="ot">=</span> getAll <span class="op">.</span> (<span class="dt">All</span> <span class="op">.</span> p1 <span class="op">&lt;&gt;</span> <span class="dt">All</span> <span class="op">.</span> p2)</span>
<span id="cb19-4"><a href="#cb19-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb19-5"><a href="#cb19-5" aria-hidden="true" tabindex="-1"></a><span class="kw">infixr</span> <span class="dv">2</span> <span class="op">.||</span></span>
<span id="cb19-6"><a href="#cb19-6" aria-hidden="true" tabindex="-1"></a><span class="ot">(.||) ::</span> (a <span class="ot">-&gt;</span> <span class="dt">Bool</span>) <span class="ot">-&gt;</span> (a <span class="ot">-&gt;</span> <span class="dt">Bool</span>) <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> <span class="dt">Bool</span></span>
<span id="cb19-7"><a href="#cb19-7" aria-hidden="true" tabindex="-1"></a>p1 <span class="op">.||</span> p2 <span class="ot">=</span> getAny <span class="op">.</span> (<span class="dt">Any</span> <span class="op">.</span> p1 <span class="op">&lt;&gt;</span> <span class="dt">Any</span> <span class="op">.</span> p2)</span></code></pre></div>
<p>I’ve heard multiple times that <code class="verbatim">newtype</code> is erased during compilation and by inspecting <a href="https://github.com/d12frosted/d12frosted.io/blob/master/assets/snippets/predicate-composition/operator-newtype.dump-simpl">the dumped Core</a> we can confirm that this version is not different from the previous one.</p>
<p>However we didn’t improve the code. I’d say that we degraded. While we abstracted away function application, we have strengthened the link between the definition shape and the binary operation, which now appears three times on two different levels. Not good, definitely not good.</p>
<h1 id="coercion">Coercion</h1>
<p>What comes to the rescue is coercion. Starting with GHC 7.8 there is a new type class allowing conversion between any two types that are representationally equal.</p>
<div class="sourceCode" id="cb20"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb20-1"><a href="#cb20-1" aria-hidden="true" tabindex="-1"></a><span class="co">-- Data.Coerce</span></span>
<span id="cb20-2"><a href="#cb20-2" aria-hidden="true" tabindex="-1"></a><span class="kw">class</span> <span class="dt">Coercible</span> a b <span class="kw">where</span></span>
<span id="cb20-3"><a href="#cb20-3" aria-hidden="true" tabindex="-1"></a><span class="ot">  coerce ::</span> a <span class="ot">-&gt;</span> b</span></code></pre></div>
<p>But what does it mean to be representationally equal? And are there any other types<a href="#fn2" class="footnote-ref" id="fnref2" role="doc-noteref"><sup>2</sup></a> of type equality? It turns out that there are two of them and they were <a href="https://gitlab.haskell.org/ghc/ghc/wikis/roles">introduced</a> as a solution for a long existing hole in a type system.</p>
<p>Nominal equality means that types are <em>really</em> equal. If two types have the same name (expanding synonyms) they are nominally equal. If they don’t have the same name, well, then they are not nominally equal.</p>
<p>But what about <code class="verbatim">newtype</code> wrappers like <code class="verbatim">All</code> and <code class="verbatim">Any</code>? We know that they are isomorphic to <code class="verbatim">Bool</code> (and mutually as well). Are they equal? Here comes the second kind of type equality – representational. They all share the same representation. While <code class="verbatim">All</code> and <code class="verbatim">Bool</code> are representationally equal, they are not equal nominally!</p>
<p>So all that means that we can use <code class="verbatim">coerce</code> to convert from <code class="verbatim">All</code> to <code class="verbatim">Bool</code> and back. Let’s try it.</p>
<div class="sourceCode" id="cb21"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb21-1"><a href="#cb21-1" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;</span> <span class="op">:</span>m <span class="op">+</span><span class="dt">Data.Coerce</span></span>
<span id="cb21-2"><a href="#cb21-2" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;</span> <span class="op">:</span>m <span class="op">+</span><span class="dt">Data.Monoid</span></span>
<span id="cb21-3"><a href="#cb21-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb21-4"><a href="#cb21-4" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;</span> <span class="op">:</span>t coerce</span>
<span id="cb21-5"><a href="#cb21-5" aria-hidden="true" tabindex="-1"></a><span class="ot">coerce ::</span> <span class="dt">Coercible</span> a b <span class="ot">=&gt;</span> a <span class="ot">-&gt;</span> b</span>
<span id="cb21-6"><a href="#cb21-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb21-7"><a href="#cb21-7" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;</span> <span class="op">:</span>t getAll <span class="op">.</span> coerce</span>
<span id="cb21-8"><a href="#cb21-8" aria-hidden="true" tabindex="-1"></a>getAll <span class="op">.</span><span class="ot"> coerce ::</span> <span class="dt">Coercible</span> a <span class="dt">Bool</span> <span class="ot">=&gt;</span> a <span class="ot">-&gt;</span> <span class="dt">Bool</span></span></code></pre></div>
<p>Wow, this is kind of tricky. The <code class="verbatim">getAll . coerce</code> expression literally says – ‘give me something representationally equal to <code class="verbatim">Bool</code> and I will get to back the <code class="verbatim">Bool</code>’. It will do all the conversion for us.</p>
<p>When we look at the previous implementation of <code class="verbatim">.&amp;&amp;</code> we might notice that we actually <del>convert</del> coerce <code class="verbatim">Bool</code> to <code class="verbatim">All</code> and then get back the <code class="verbatim">Bool</code> value.</p>
<div class="sourceCode" id="cb22"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb22-1"><a href="#cb22-1" aria-hidden="true" tabindex="-1"></a><span class="kw">infixr</span> <span class="dv">3</span> <span class="op">.&amp;&amp;</span></span>
<span id="cb22-2"><a href="#cb22-2" aria-hidden="true" tabindex="-1"></a><span class="ot">(.&amp;&amp;) ::</span> (a <span class="ot">-&gt;</span> <span class="dt">Bool</span>) <span class="ot">-&gt;</span> (a <span class="ot">-&gt;</span> <span class="dt">Bool</span>) <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> <span class="dt">Bool</span></span>
<span id="cb22-3"><a href="#cb22-3" aria-hidden="true" tabindex="-1"></a>p1 <span class="op">.&amp;&amp;</span> p2 <span class="ot">=</span> getAll <span class="op">.</span> (<span class="dt">All</span> <span class="op">.</span> p1 <span class="op">&lt;&gt;</span> <span class="dt">All</span> <span class="op">.</span> p2)</span></code></pre></div>
<p>Maybe we can replace <code class="verbatim">All</code> with <code class="verbatim">coerce</code>?</p>
<div class="sourceCode" id="cb23"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb23-1"><a href="#cb23-1" aria-hidden="true" tabindex="-1"></a><span class="kw">infixr</span> <span class="dv">3</span> <span class="op">.&amp;&amp;</span></span>
<span id="cb23-2"><a href="#cb23-2" aria-hidden="true" tabindex="-1"></a><span class="ot">(.&amp;&amp;) ::</span> (a <span class="ot">-&gt;</span> <span class="dt">Bool</span>) <span class="ot">-&gt;</span> (a <span class="ot">-&gt;</span> <span class="dt">Bool</span>) <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> <span class="dt">Bool</span></span>
<span id="cb23-3"><a href="#cb23-3" aria-hidden="true" tabindex="-1"></a>p1 <span class="op">.&amp;&amp;</span> p2 <span class="ot">=</span> getAll <span class="op">.</span> (coerce <span class="op">.</span> p1 <span class="op">&lt;&gt;</span> coerce <span class="op">.</span> p2)</span></code></pre></div>
<p>And it works. We can repeat the trick with <code class="verbatim">.||</code>, but at this point we can move this patter to a helper operator <code class="verbatim">&lt;~&gt;</code>.</p>
<div class="sourceCode" id="cb24"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb24-1"><a href="#cb24-1" aria-hidden="true" tabindex="-1"></a>f <span class="op">&lt;~&gt;</span> g <span class="ot">=</span> coerce <span class="op">.</span> f  <span class="op">&lt;&gt;</span> coerce <span class="op">.</span> g</span>
<span id="cb24-2"><a href="#cb24-2" aria-hidden="true" tabindex="-1"></a><span class="co">-- or in other words</span></span>
<span id="cb24-3"><a href="#cb24-3" aria-hidden="true" tabindex="-1"></a>f <span class="op">&lt;~&gt;</span> g <span class="ot">=</span> \a <span class="ot">-&gt;</span> coerce (f a) <span class="op">&lt;&gt;</span> coerce (g a)</span>
<span id="cb24-4"><a href="#cb24-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb24-5"><a href="#cb24-5" aria-hidden="true" tabindex="-1"></a><span class="kw">infixr</span> <span class="dv">3</span> <span class="op">.&amp;&amp;</span></span>
<span id="cb24-6"><a href="#cb24-6" aria-hidden="true" tabindex="-1"></a><span class="ot">(.&amp;&amp;) ::</span> (a <span class="ot">-&gt;</span> <span class="dt">Bool</span>) <span class="ot">-&gt;</span> (a <span class="ot">-&gt;</span> <span class="dt">Bool</span>) <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> <span class="dt">Bool</span></span>
<span id="cb24-7"><a href="#cb24-7" aria-hidden="true" tabindex="-1"></a>p1 <span class="op">.&amp;&amp;</span> p2 <span class="ot">=</span> getAll <span class="op">.</span> (p1 <span class="op">&lt;~&gt;</span> p2)</span></code></pre></div>
<p>I specially omitted the type signature of <code class="verbatim">&lt;~&gt;</code>. It’s not our job to infer the types, but let’s steal some bread from GHC’s table.</p>
<p>We know that the type of <code class="verbatim">f</code> should be <code class="verbatim">a -&gt; b</code>. Previously we put a constraint on <code class="verbatim">b</code> to form <code class="verbatim">Semigroup</code>. But now we <code class="verbatim">coerce</code> it some type and only then use <code class="verbatim">&lt;&gt;</code>. The result of <code class="verbatim">coerce (f a)</code> must form <code class="verbatim">Semigroup</code>. Which means that if <code class="verbatim">f</code> has type <code class="verbatim">a -&gt; b</code> then we need be able to covert <code class="verbatim">b</code> to some type <code class="verbatim">c</code> which is semigroup.</p>
<div class="sourceCode" id="cb25"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb25-1"><a href="#cb25-1" aria-hidden="true" tabindex="-1"></a><span class="ot">(&lt;~&gt;) ::</span> (<span class="dt">Coercible</span> b c, <span class="dt">Monoid</span> c) <span class="ot">=&gt;</span> (a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> (a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> c</span>
<span id="cb25-2"><a href="#cb25-2" aria-hidden="true" tabindex="-1"></a>f <span class="op">&lt;~&gt;</span> g <span class="ot">=</span> coerce <span class="op">.</span> f <span class="op">&lt;&gt;</span> coerce <span class="op">.</span> g</span></code></pre></div>
<p>And you know what? It works! But if you think about the <code class="verbatim">g</code>, then you realise that <code class="verbatim">f a</code> and <code class="verbatim">g a</code> are independent, the only requirement is to be able to coerce them to the same type <code class="verbatim">c</code> that forms <code class="verbatim">Semigroup</code>.</p>
<div class="sourceCode" id="cb26"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb26-1"><a href="#cb26-1" aria-hidden="true" tabindex="-1"></a><span class="kw">module</span> <span class="dt">Main</span> (main) <span class="kw">where</span></span>
<span id="cb26-2"><a href="#cb26-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb26-3"><a href="#cb26-3" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span>           <span class="dt">Data.Coerce</span></span>
<span id="cb26-4"><a href="#cb26-4" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span>           <span class="dt">Data.Monoid</span></span>
<span id="cb26-5"><a href="#cb26-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb26-6"><a href="#cb26-6" aria-hidden="true" tabindex="-1"></a><span class="ot">main ::</span> <span class="dt">IO</span> ()</span>
<span id="cb26-7"><a href="#cb26-7" aria-hidden="true" tabindex="-1"></a>main <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb26-8"><a href="#cb26-8" aria-hidden="true" tabindex="-1"></a>  input <span class="ot">&lt;-</span> <span class="fu">read</span> <span class="op">&lt;$&gt;</span> <span class="fu">getLine</span></span>
<span id="cb26-9"><a href="#cb26-9" aria-hidden="true" tabindex="-1"></a>  <span class="kw">let</span> result <span class="ot">=</span> (<span class="op">&lt;</span> <span class="dv">10</span>) <span class="op">.&amp;&amp;</span> ((<span class="op">&gt;</span> <span class="dv">0</span>) <span class="op">.||</span> <span class="fu">even</span>) <span class="op">$</span> input</span>
<span id="cb26-10"><a href="#cb26-10" aria-hidden="true" tabindex="-1"></a>  <span class="fu">print</span> result</span>
<span id="cb26-11"><a href="#cb26-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb26-12"><a href="#cb26-12" aria-hidden="true" tabindex="-1"></a><span class="ot">(&lt;~&gt;) ::</span> ( <span class="dt">Coercible</span> b1 c</span>
<span id="cb26-13"><a href="#cb26-13" aria-hidden="true" tabindex="-1"></a>         , <span class="dt">Coercible</span> b2 c</span>
<span id="cb26-14"><a href="#cb26-14" aria-hidden="true" tabindex="-1"></a>         , <span class="dt">Monoid</span> c</span>
<span id="cb26-15"><a href="#cb26-15" aria-hidden="true" tabindex="-1"></a>         )</span>
<span id="cb26-16"><a href="#cb26-16" aria-hidden="true" tabindex="-1"></a>      <span class="ot">=&gt;</span> (a <span class="ot">-&gt;</span> b1) <span class="ot">-&gt;</span> (a <span class="ot">-&gt;</span> b2) <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> c</span>
<span id="cb26-17"><a href="#cb26-17" aria-hidden="true" tabindex="-1"></a>f <span class="op">&lt;~&gt;</span> g <span class="ot">=</span> coerce <span class="op">.</span> f <span class="op">&lt;&gt;</span> coerce <span class="op">.</span> g</span>
<span id="cb26-18"><a href="#cb26-18" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb26-19"><a href="#cb26-19" aria-hidden="true" tabindex="-1"></a><span class="kw">infixr</span> <span class="dv">3</span> <span class="op">.&amp;&amp;</span></span>
<span id="cb26-20"><a href="#cb26-20" aria-hidden="true" tabindex="-1"></a><span class="ot">(.&amp;&amp;) ::</span> (a <span class="ot">-&gt;</span> <span class="dt">Bool</span>) <span class="ot">-&gt;</span> (a <span class="ot">-&gt;</span> <span class="dt">Bool</span>) <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> <span class="dt">Bool</span></span>
<span id="cb26-21"><a href="#cb26-21" aria-hidden="true" tabindex="-1"></a>p1 <span class="op">.&amp;&amp;</span> p2 <span class="ot">=</span> getAll <span class="op">.</span> (p1 <span class="op">&lt;~&gt;</span> p2)</span>
<span id="cb26-22"><a href="#cb26-22" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb26-23"><a href="#cb26-23" aria-hidden="true" tabindex="-1"></a><span class="kw">infixr</span> <span class="dv">2</span> <span class="op">.||</span></span>
<span id="cb26-24"><a href="#cb26-24" aria-hidden="true" tabindex="-1"></a><span class="ot">(.||) ::</span> (a <span class="ot">-&gt;</span> <span class="dt">Bool</span>) <span class="ot">-&gt;</span> (a <span class="ot">-&gt;</span> <span class="dt">Bool</span>) <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> <span class="dt">Bool</span></span>
<span id="cb26-25"><a href="#cb26-25" aria-hidden="true" tabindex="-1"></a>p1 <span class="op">.||</span> p2 <span class="ot">=</span> getAny <span class="op">.</span> (p1 <span class="op">&lt;~&gt;</span> p2)</span></code></pre></div>
<p>This works, this composes. You can also use it with other semigroups like <code class="verbatim">Sum</code> and <code class="verbatim">Product</code>. But it might look a little bit weird.</p>
<div class="sourceCode" id="cb27"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb27-1"><a href="#cb27-1" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;</span> getSum <span class="op">.</span> ((<span class="op">*</span><span class="dv">2</span>) <span class="op">&lt;~&gt;</span> (<span class="op">+</span><span class="dv">100</span>)) <span class="op">$</span> <span class="dv">15</span></span>
<span id="cb27-2"><a href="#cb27-2" aria-hidden="true" tabindex="-1"></a><span class="dv">145</span></span></code></pre></div>
<p>So instead, let’s look at <a href="https://github.com/d12frosted/d12frosted.io/blob/master/assets/snippets/predicate-composition/operator-coerce.dump-simpl">the Core dump</a>.</p>
<div class="sourceCode" id="cb28"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb28-1"><a href="#cb28-1" aria-hidden="true" tabindex="-1"></a><span class="op">...</span></span>
<span id="cb28-2"><a href="#cb28-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb28-3"><a href="#cb28-3" aria-hidden="true" tabindex="-1"></a><span class="kw">case</span> ds2_a6m8 <span class="kw">of</span> {</span>
<span id="cb28-4"><a href="#cb28-4" aria-hidden="true" tabindex="-1"></a>  [] <span class="ot">-&gt;</span></span>
<span id="cb28-5"><a href="#cb28-5" aria-hidden="true" tabindex="-1"></a>    <span class="kw">case</span> integer<span class="op">-</span>gmp<span class="op">-</span><span class="fl">1.0</span><span class="op">.</span><span class="fl">2.0</span><span class="op">:</span>GHC.Integer.Type.ltInteger<span class="op">#</span></span>
<span id="cb28-6"><a href="#cb28-6" aria-hidden="true" tabindex="-1"></a>           x1_a6m7 Main.main3</span>
<span id="cb28-7"><a href="#cb28-7" aria-hidden="true" tabindex="-1"></a>    <span class="kw">of</span> {</span>
<span id="cb28-8"><a href="#cb28-8" aria-hidden="true" tabindex="-1"></a>      __DEFAULT <span class="ot">-&gt;</span> <span class="op">GHC.Show.$</span>fShowBool4;</span>
<span id="cb28-9"><a href="#cb28-9" aria-hidden="true" tabindex="-1"></a>      <span class="dv">1</span><span class="op">#</span> <span class="ot">-&gt;</span></span>
<span id="cb28-10"><a href="#cb28-10" aria-hidden="true" tabindex="-1"></a>        <span class="kw">case</span> integer<span class="op">-</span>gmp<span class="op">-</span><span class="fl">1.0</span><span class="op">.</span><span class="fl">2.0</span><span class="op">:</span>GHC.Integer.Type.gtInteger<span class="op">#</span></span>
<span id="cb28-11"><a href="#cb28-11" aria-hidden="true" tabindex="-1"></a>               x1_a6m7 <span class="op">Main.$</span>seven1</span>
<span id="cb28-12"><a href="#cb28-12" aria-hidden="true" tabindex="-1"></a>        <span class="kw">of</span> {</span>
<span id="cb28-13"><a href="#cb28-13" aria-hidden="true" tabindex="-1"></a>          __DEFAULT <span class="ot">-&gt;</span></span>
<span id="cb28-14"><a href="#cb28-14" aria-hidden="true" tabindex="-1"></a>            <span class="kw">case</span> integer<span class="op">-</span>gmp<span class="op">-</span><span class="fl">1.0</span><span class="op">.</span><span class="fl">2.0</span><span class="op">:</span>GHC.Integer.Type.eqInteger<span class="op">#</span></span>
<span id="cb28-15"><a href="#cb28-15" aria-hidden="true" tabindex="-1"></a>                   (integer<span class="op">-</span>gmp<span class="op">-</span><span class="fl">1.0</span><span class="op">.</span><span class="fl">2.0</span><span class="op">:</span>GHC.Integer.Type.remInteger</span>
<span id="cb28-16"><a href="#cb28-16" aria-hidden="true" tabindex="-1"></a>                      x1_a6m7 <span class="op">Main.$</span>seven2)</span>
<span id="cb28-17"><a href="#cb28-17" aria-hidden="true" tabindex="-1"></a>                   <span class="op">Main.$</span>seven1</span>
<span id="cb28-18"><a href="#cb28-18" aria-hidden="true" tabindex="-1"></a>            <span class="kw">of</span> {</span>
<span id="cb28-19"><a href="#cb28-19" aria-hidden="true" tabindex="-1"></a>              __DEFAULT <span class="ot">-&gt;</span> <span class="op">GHC.Show.$</span>fShowBool4;</span>
<span id="cb28-20"><a href="#cb28-20" aria-hidden="true" tabindex="-1"></a>              <span class="dv">1</span><span class="op">#</span> <span class="ot">-&gt;</span> <span class="op">GHC.Show.$</span>fShowBool2</span>
<span id="cb28-21"><a href="#cb28-21" aria-hidden="true" tabindex="-1"></a>            };</span>
<span id="cb28-22"><a href="#cb28-22" aria-hidden="true" tabindex="-1"></a>          <span class="dv">1</span><span class="op">#</span> <span class="ot">-&gt;</span> <span class="op">GHC.Show.$</span>fShowBool2</span>
<span id="cb28-23"><a href="#cb28-23" aria-hidden="true" tabindex="-1"></a>        }</span>
<span id="cb28-24"><a href="#cb28-24" aria-hidden="true" tabindex="-1"></a>    };</span>
<span id="cb28-25"><a href="#cb28-25" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb28-26"><a href="#cb28-26" aria-hidden="true" tabindex="-1"></a><span class="op">...</span></span></code></pre></div>
<p>The important bits are the same.</p>
<h1 id="criterion">Criterion</h1>
<p>I bet that at this point it’s obvious, but they perform similarly – the naive implementation and the most abstract one with coercion and <code class="verbatim">newtype</code> wrappers. We know this because we inspected the dumped Core, but we can also refer to criterion to inspect the runtime performance.</p>
<pre class="example"><code>benchmarking single/naive
time                 3.027 ns   (3.011 ns .. 3.043 ns)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 3.017 ns   (3.009 ns .. 3.029 ns)
std dev              31.73 ps   (22.17 ps .. 48.50 ps)
variance introduced by outliers: 12% (moderately inflated)

benchmarking single/coerce
time                 3.017 ns   (3.009 ns .. 3.025 ns)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 3.026 ns   (3.015 ns .. 3.055 ns)
std dev              56.91 ps   (26.62 ps .. 114.5 ps)
variance introduced by outliers: 30% (moderately inflated)
</code></pre>
<div class="criterion-chart"><canvas id="predicate-composition/single-6317837669900583668" height="120"></canvas><script>
      new Chart(document.getElementById("predicate-composition/single-6317837669900583668"), {
        type: "horizontalBar",
        data: {
          labels: ["naive","coerce"],
          datasets: [{"borderColor":"#36a2eb","data":[3.0463795600278686e-9,3.053795658440273e-9],"fill":false,"label":"single","backgroundColor":"#36a2eb"}]
        },
        options: {
          maintainAspectRatio: false,
          title: {
            display: false,
            text: ""
          },
          legend: {
            display: false
          },
          tooltips: {
            callbacks: {
              label: function(item, data) {
                var vtls = {"single/coerce":"3.053796 ns","single/naive":"3.046380 ns"};
                var name = data.datasets[item.datasetIndex].label + "/" + item.label;
                var label = data.datasets[item.datasetIndex].label || '';
                if (label) label += ": ";
                label += vtls[name];
                return label;
              }
            }
          },
          scales: {"xAxes":[{"ticks":{"beginAtZero":true},"type":"linear"}],"yAxes":[]}
        }
      });
      </script></div>
<h1 id="final-words">Final words</h1>
<p>I love that in Haskell one can use <em>some</em> of the abstractions without hurting the runtime. After all, as developers we want to simplify our <em>development</em> life with minimal negative influence on the application.</p>
<p>Today we implemented two simple operators for predicate composition using semigroups and coercion. And we saw that they don’t introduce runtime penalty. Techniques that made it possible are usable in other scenarios.</p>
<div class="sourceCode" id="cb30"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb30-1"><a href="#cb30-1" aria-hidden="true" tabindex="-1"></a><span class="kw">module</span> <span class="dt">Data.Monoid.Extra</span></span>
<span id="cb30-2"><a href="#cb30-2" aria-hidden="true" tabindex="-1"></a>  ( (<span class="op">.&amp;&amp;</span>)</span>
<span id="cb30-3"><a href="#cb30-3" aria-hidden="true" tabindex="-1"></a>  , (<span class="op">.||</span>)</span>
<span id="cb30-4"><a href="#cb30-4" aria-hidden="true" tabindex="-1"></a>  ) <span class="kw">where</span></span>
<span id="cb30-5"><a href="#cb30-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb30-6"><a href="#cb30-6" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span>           <span class="dt">Data.Coerce</span></span>
<span id="cb30-7"><a href="#cb30-7" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span>           <span class="dt">Data.Monoid</span></span>
<span id="cb30-8"><a href="#cb30-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb30-9"><a href="#cb30-9" aria-hidden="true" tabindex="-1"></a><span class="kw">infixr</span> <span class="dv">3</span> <span class="op">.&amp;&amp;</span></span>
<span id="cb30-10"><a href="#cb30-10" aria-hidden="true" tabindex="-1"></a><span class="ot">(.&amp;&amp;) ::</span> (a <span class="ot">-&gt;</span> <span class="dt">Bool</span>) <span class="ot">-&gt;</span> (a <span class="ot">-&gt;</span> <span class="dt">Bool</span>) <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> <span class="dt">Bool</span></span>
<span id="cb30-11"><a href="#cb30-11" aria-hidden="true" tabindex="-1"></a>p1 <span class="op">.&amp;&amp;</span> p2 <span class="ot">=</span> getAll <span class="op">.</span> (p1 <span class="op">&lt;~&gt;</span> p2)</span>
<span id="cb30-12"><a href="#cb30-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb30-13"><a href="#cb30-13" aria-hidden="true" tabindex="-1"></a><span class="kw">infixr</span> <span class="dv">2</span> <span class="op">.||</span></span>
<span id="cb30-14"><a href="#cb30-14" aria-hidden="true" tabindex="-1"></a><span class="ot">(.||) ::</span> (a <span class="ot">-&gt;</span> <span class="dt">Bool</span>) <span class="ot">-&gt;</span> (a <span class="ot">-&gt;</span> <span class="dt">Bool</span>) <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> <span class="dt">Bool</span></span>
<span id="cb30-15"><a href="#cb30-15" aria-hidden="true" tabindex="-1"></a>p1 <span class="op">.||</span> p2 <span class="ot">=</span> getAny <span class="op">.</span> (p1 <span class="op">&lt;~&gt;</span> p2)</span>
<span id="cb30-16"><a href="#cb30-16" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb30-17"><a href="#cb30-17" aria-hidden="true" tabindex="-1"></a><span class="ot">(&lt;~&gt;) ::</span> ( <span class="dt">Coercible</span> b1 c</span>
<span id="cb30-18"><a href="#cb30-18" aria-hidden="true" tabindex="-1"></a>         , <span class="dt">Coercible</span> b2 c</span>
<span id="cb30-19"><a href="#cb30-19" aria-hidden="true" tabindex="-1"></a>         , <span class="dt">Monoid</span> c</span>
<span id="cb30-20"><a href="#cb30-20" aria-hidden="true" tabindex="-1"></a>         )</span>
<span id="cb30-21"><a href="#cb30-21" aria-hidden="true" tabindex="-1"></a>      <span class="ot">=&gt;</span> (a <span class="ot">-&gt;</span> b1) <span class="ot">-&gt;</span> (a <span class="ot">-&gt;</span> b2) <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> c</span>
<span id="cb30-22"><a href="#cb30-22" aria-hidden="true" tabindex="-1"></a>f <span class="op">&lt;~&gt;</span> g <span class="ot">=</span> coerce <span class="op">.</span> f <span class="op">&lt;&gt;</span> coerce <span class="op">.</span> g</span></code></pre></div>
<h1 id="evolution">Evolution</h1>
<p>I love the <a href="https://willamette.edu/~fruehr/haskell/evolution.html">The Evolution of a Haskell Programmer</a> by Fritz Ruehr. And to keep the traction of this evolution path, we should step back and reflect on atrocious results. We all love functions, don’t we? And functions are known functors and applicatives. So instead of going this lengthy path, we could just do something dead simple.</p>
<div class="sourceCode" id="cb31"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb31-1"><a href="#cb31-1" aria-hidden="true" tabindex="-1"></a><span class="kw">infixr</span> <span class="dv">3</span> <span class="op">.&amp;&amp;</span></span>
<span id="cb31-2"><a href="#cb31-2" aria-hidden="true" tabindex="-1"></a><span class="ot">(.&amp;&amp;) ::</span> (a <span class="ot">-&gt;</span> <span class="dt">Bool</span>) <span class="ot">-&gt;</span> (a <span class="ot">-&gt;</span> <span class="dt">Bool</span>) <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> <span class="dt">Bool</span></span>
<span id="cb31-3"><a href="#cb31-3" aria-hidden="true" tabindex="-1"></a>p1 <span class="op">.&amp;&amp;</span> p2 <span class="ot">=</span> (<span class="op">&amp;&amp;</span>) <span class="op">&lt;$&gt;</span> p1 <span class="op">&lt;*&gt;</span> p2</span>
<span id="cb31-4"><a href="#cb31-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb31-5"><a href="#cb31-5" aria-hidden="true" tabindex="-1"></a><span class="kw">infixr</span> <span class="dv">2</span> <span class="op">.||</span></span>
<span id="cb31-6"><a href="#cb31-6" aria-hidden="true" tabindex="-1"></a><span class="ot">(.||) ::</span> (a <span class="ot">-&gt;</span> <span class="dt">Bool</span>) <span class="ot">-&gt;</span> (a <span class="ot">-&gt;</span> <span class="dt">Bool</span>) <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> <span class="dt">Bool</span></span>
<span id="cb31-7"><a href="#cb31-7" aria-hidden="true" tabindex="-1"></a>p1 <span class="op">.||</span> p2 <span class="ot">=</span> (<span class="op">||</span>) <span class="op">&lt;$&gt;</span> p1 <span class="op">&lt;*&gt;</span> p2</span></code></pre></div>
<p>Or using <code class="verbatim">liftA2</code>:</p>
<div class="sourceCode" id="cb32"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb32-1"><a href="#cb32-1" aria-hidden="true" tabindex="-1"></a><span class="kw">infixr</span> <span class="dv">3</span> <span class="op">.&amp;&amp;</span></span>
<span id="cb32-2"><a href="#cb32-2" aria-hidden="true" tabindex="-1"></a><span class="ot">(.&amp;&amp;) ::</span> (a <span class="ot">-&gt;</span> <span class="dt">Bool</span>) <span class="ot">-&gt;</span> (a <span class="ot">-&gt;</span> <span class="dt">Bool</span>) <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> <span class="dt">Bool</span></span>
<span id="cb32-3"><a href="#cb32-3" aria-hidden="true" tabindex="-1"></a>(<span class="op">.&amp;&amp;</span>) p2 <span class="ot">=</span> liftA2 (<span class="op">&amp;&amp;</span>)</span>
<span id="cb32-4"><a href="#cb32-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb32-5"><a href="#cb32-5" aria-hidden="true" tabindex="-1"></a><span class="kw">infixr</span> <span class="dv">2</span> <span class="op">.||</span></span>
<span id="cb32-6"><a href="#cb32-6" aria-hidden="true" tabindex="-1"></a><span class="ot">(.||) ::</span> (a <span class="ot">-&gt;</span> <span class="dt">Bool</span>) <span class="ot">-&gt;</span> (a <span class="ot">-&gt;</span> <span class="dt">Bool</span>) <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> <span class="dt">Bool</span></span>
<span id="cb32-7"><a href="#cb32-7" aria-hidden="true" tabindex="-1"></a>(<span class="op">.||</span>) <span class="ot">=</span> liftA2 (<span class="op">||</span>)</span></code></pre></div>
<p>Stay safe!</p>
<h1 id="references">References</h1>
<ul>
<li><a href="https://www.aosabook.org/en/ghc.html">The Glasgow Haskell Compiler</a> by <a href="https://www.aosabook.org/en/intro2.html#marlow-simon">Simon Marlow</a> and <a href="https://www.aosabook.org/en/intro2.html#peyton-jones-simon">Simon Peyton-Jones</a>.</li>
<li><a href="http://book.realworldhaskell.org/read/profiling-and-optimization.html">Real World Haskell</a> Chapter 25. Profiling and optimization by Bryan O’Sullivan, Don Stewart, and John Goerzen.</li>
<li><a href="https://downloads.haskell.org/ghc/latest/docs/html/users_guide/debugging.html#id2">Glasgow Haskell Compiler User’s Guide</a> Debugging the compiler.</li>
<li><a href="https://gitlab.haskell.org/ghc/ghc/wikis/roles">Roles</a> on GHC Wiki.</li>
</ul>
<section class="footnotes" role="doc-endnotes">
<hr />
<ol>
<li id="fn1" role="doc-endnote"><p>Aaah, the tautology…<a href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn2" role="doc-endnote"><p>Kinds?<a href="#fnref2" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>
      </section>
    </article>

    <div class="footer-separator"></div>
    <div class="footer">
      <a target="_blank" class="post-footer-sources" href="https://github.com/d12frosted/d12frosted.io/blob/master/posts/2020-01-20-predicate-composition.org">Sources <i class="fa fa-code fa-lg"></i></a>
    </div>
    <script src="https://utteranc.es/client.js" repo="d12frosted/d12frosted.io" issue-term="pathname" label="comments" theme="github-light" crossorigin="anonymous" async>
    </script>

    <footer>
  <div>
      <p>
        Follow me on <a class="fa fa-github" href="https://github.com/d12frosted" title="GitHub profile">&nbsp GitHub</a>
      </p>
  </div>
</footer>

  </body>
</html>
]]></summary>
</entry>
<entry>
    <title>emacs-plus: current state</title>
    <link href="https://d12frosted.io/posts/2020-01-08-emacs-plus-current-state.html" />
    <id>https://d12frosted.io/posts/2020-01-08-emacs-plus-current-state.html</id>
    <published>2020-01-08T00:00:00Z</published>
    <updated>2020-01-08T00:00:00Z</updated>
    <summary type="html"><![CDATA[<!doctype html>
<html lang="en">
  <head>
    <title>emacs-plus: current state</title>
    <link rel="stylesheet" href="../css/post-bundle.css" />
    <meta charset="utf-8">
<meta http-equiv="x-ua-compatible" content="ie=edge">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="keywords" content="blog,programming,Haskell,Emacs,fish,bash">
<meta property="og:title" content="Boris Buliga">
<meta property="og:locale" content="es_US">
<meta property="og:url" content="https://d12frosted.io">

<link rel="apple-touch-icon" sizes="180x180" href="../apple-touch-icon.png">
<link rel="icon" type="image/png" sizes="32x32" href="../favicon-32x32.png">
<link rel="icon" type="image/png" sizes="16x16" href="../favicon-16x16.png">
<link rel="manifest" href="../site.webmanifest">

<link href="https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css" rel="stylesheet">
<script>
  MathJax = {
    svg: {
      fontCache: 'global'
    }
  };
</script>
<script type="text/javascript" id="MathJax-script" async src="../library/mathjax/es5/tex-svg.js">
</script>
<script src="../library/chart.js/dist/Chart.min.js"></script>
<script data-goatcounter="https://d12frosted.goatcounter.com/count" async src="//gc.zgo.at/count.js"></script>

    <meta name="description" content="Overview of current state of emacs-plus project" />
    <meta name="twitter:card" content="summary">
    <meta name="twitter:description" content="Overview of current state of emacs-plus project">
    <meta property="og:description" content="Overview of current state of emacs-plus project">
  </head>
  <body>
    <header>
      <nav>
  <ul>
    <li><a class="fa fa-home" href="../" title="Home">&nbsp Home</a></li>
    <li><a class="fa fa-suitcase" href="../projects.html" title="Projects">&nbsp Projects</a></li>
    <li><a class="fa fa-rss" href="../atom.xml" title="RSS">&nbsp RSS</a></li>
    <li><a class="fa fa-github" href="https://github.com/d12frosted" title="GitHub profile">&nbsp GitHub</a></li>
  </ul>
</nav>

    </header>

    <h1 class="post-title">emacs-plus: current state</h1>
    <div class="date"><span>January  8, 2020</span></div>
    <div class="tags"><span>(<a title="All pages tagged 'emacs'." href="../tags/emacs.html">emacs</a>, <a title="All pages tagged 'emacs-plus'." href="../tags/emacs-plus.html">emacs-plus</a>)</span></div>
    <article>
      <section>
        <p>Not everyone knows, but emacs-plus is almost an April Fool’s joke that was late for 1 day. Its <a href="https://github.com/d12frosted/homebrew-emacs-plus/commit/6c85ae34d2649512a3088207b5f2a81c23cd8630">initial release</a> was on 2nd April 2016 and the only feature it had compared to the official Emacs formula back in the day was Spacemacs icon (installed by default). Homebrew maintainers didn’t want to increase the complexity of the Emacs formula, so I’ve put that burden on myself, created a tap with one additional icon and after several years info command for <code class="verbatim">emacs-plus</code> prints a wall of options.</p>
<p>I am very happy to see so many users of this feature-inclusive (and sometimes experimental) formula. I am grateful to all of you. I would’ve abandoned this project a year ago if it would not you! And I think it’s fair to (in)formally share the current state of the project and shed some light on my plans.</p>
<!--more-->

<h2 id="the-problem">The problem</h2>
<p>During the last year (or maybe even more), <code class="verbatim">emacs-plus</code> overgrown with issues. Here is my top list.</p>
<ol>
<li>Experimental <code class="verbatim">xwidgets</code> build was breaking time to time and only thanks to users (mostly <a href="https://github.com/agzam">Ag Ibragimov</a>) I would acknowledge it.</li>
<li>While I state that <code class="verbatim">HEAD</code> builds are not supported, I still want this option to work. First of all, for Emacs users to easily get the latest features. And secondly, for Emacs maintainers to get feedback from the users.</li>
<li>Patches are located outside of the project and their destiny is unclear.</li>
<li>It’s hard to contribute a new patch or a patch fix inside the <code class="verbatim">emacs-plus</code> repository, because you have to mess with the URLs and branch names.</li>
<li>Travis builds are very slow. The default build takes 7 minutes, from sources - 13 minutes, build HEAD was impossible. I’d like to test much more build options and their combination.</li>
<li>Too many options are given to the users, which kind of contradicts my initial idea.</li>
</ol>
<p>When it comes to build failures, all of them can be divided into two categories - patch application failure or upstream issue.</p>
<h2 id="visibility-and-stability">Visibility and stability</h2>
<p>In order to address the named issues, I’ve performed the following actions.</p>
<p>I moved from Travis to GitHub Workflows, which gave such a decent boost in compiling time. It also enabled me to add the <code class="verbatim">HEAD</code> and <code class="verbatim">xwidgets</code> options to the build matrix. I would love to add <code class="verbatim">x11</code> as well, but I didn’t figure out how to setup XQuartz on build machines. I haven’t really measured the build time, but here are some examples that I fetched from the build history. Also I’ve heard that Travis improved their machines so more calculating power is given to the users now.</p>
<table>
<thead>
<tr class="header">
<th>Options</th>
<th>Travis</th>
<th>GitHub</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td></td>
<td>6m 30s</td>
<td>3m 14s</td>
</tr>
<tr class="even">
<td><code class="verbatim">--with-no-titlebar</code></td>
<td>11m 16s</td>
<td>5m 18s</td>
</tr>
<tr class="odd">
<td><code class="verbatim">--HEAD</code></td>
<td>-</td>
<td>11m 18s</td>
</tr>
<tr class="even">
<td><code class="verbatim">--HEAD --with-xwidgets</code></td>
<td>-</td>
<td>11m 15s</td>
</tr>
</tbody>
</table>
<p>This gives me better visibility on the build breakages (both when patch application fails or it’s because of the upstream issue).</p>
<p>All of the used patches were moved to the <code class="verbatim">emacs-plus</code> repository, so they are always with formula. And I added support for running builds on CI with patches from PR.</p>
<p>And in order to better maintain the patches I’ve created <a href="https://github.com/d12frosted/emacs-plus-basis">emacs-plus-basis</a> repository, which is basically a fork of Emacs repository with patches applied on top. Everyday CI fetches the latest updates from the upstream and applies the patches on top. And if it fails, I get a notification. So it gives me visibility of patch application failures. And it gives me environment to fix named patches.</p>
<p>While all these steps should improve stability of the <code class="verbatim">emacs-plus</code>, I am aware that build breakages are impossible to avoid (upstream changes very fast). What I am achieving here is better visibility and tools to address breakages more quickly.</p>
<h2 id="build-options-zoo">Build options zoo</h2>
<p>What was not covered yet is the amount of build options. The initial idea behind <code class="verbatim">emacs-plus</code> is that users should not pass many custom options to <code class="verbatim">install</code> command. If you remember, back then everyone recommended to install Emacs from brew using the following command:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> brew install emacs <span class="at">--with-cocoa</span> <span class="at">--with-gnutls</span> <span class="at">--with-rsvg</span> <span class="at">--with-imagemagick</span></span></code></pre></div>
<p>All of these options where recommended to most of the users. So I decided to turn them on by default.</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> brew install emacs-plus</span></code></pre></div>
<p>In my ideal world, the only options users should pass is the icon choice and experimental or controversial stuff.</p>
<p>I still don’t have a solution, but I am willing to decrease amount of available options. For example, I think that no one actually installs without cocoa and without x11. So the choice must be between these two options. GnuTLS? Well, why would anyone want to install Emacs without it? <code class="verbatim">librsvg</code> and <code class="verbatim">libxml2</code>? Does it hurt if installed with it? I want <code class="verbatim">emacs-plus</code> be as simple as possible, while still providing things that are not available from the official Emacs formula.</p>
<p>Unfortunately, I don’t have anonymous statistics about options usage. So I still don’t have any decision in this field. Will keep you posted :)</p>
<h2 id="cask">Cask</h2>
<p>This is something people are waiting for. I understand why, but I don’t have time to invest into this project. At least now. If someone wants to step in - I would be super glad and grateful!</p>
<h2 id="final-words">Final words</h2>
<p>That being said, all contributions are welcome! Let’s keep in touch ;)</p>
      </section>
    </article>

    <div class="footer-separator"></div>
    <div class="footer">
      <a target="_blank" class="post-footer-sources" href="https://github.com/d12frosted/d12frosted.io/blob/master/posts/2020-01-08-emacs-plus-current-state.org">Sources <i class="fa fa-code fa-lg"></i></a>
    </div>
    <script src="https://utteranc.es/client.js" repo="d12frosted/d12frosted.io" issue-term="pathname" label="comments" theme="github-light" crossorigin="anonymous" async>
    </script>

    <footer>
  <div>
      <p>
        Follow me on <a class="fa fa-github" href="https://github.com/d12frosted" title="GitHub profile">&nbsp GitHub</a>
      </p>
  </div>
</footer>

  </body>
</html>
]]></summary>
</entry>

</feed>
